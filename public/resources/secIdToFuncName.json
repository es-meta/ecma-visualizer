{
  "sec-static-semantics-vardeclarednames|Statement|ReturnStatement" : "[VarDeclaredNames] Statement : ReturnStatement",
  "sec-static-semantics-isconstantdeclaration|GeneratorDeclaration|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[IsConstantDeclaration] GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-contains|FunctionExpression|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[Contains] FunctionExpression : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-ordinaryobjectcreate" : "OrdinaryObjectCreate",
  "sec-compilequantifier|Quantifier|QuantifierPrefix" : "[CompileQuantifier] Quantifier : QuantifierPrefix",
  "sec-object-initializer-runtime-semantics-evaluation|LiteralPropertyName|NumericLiteral" : "[Evaluation] LiteralPropertyName : NumericLiteral",
  "sec-static-semantics-isstrict|Script|ScriptBody" : "[IsStrict] Script : ScriptBody",
  "sec-compiletocharset|ClassSetCharacter|\\b" : "[CompileToCharSet] ClassSetCharacter : \\b",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|ClassExpression" : "[HasCallInTailPosition] PrimaryExpression : ClassExpression",
  "sec-static-semantics-containsundefinedcontinuetarget|FunctionStatementList" : "[ContainsUndefinedContinueTarget] FunctionStatementList :",
  "sec-static-semantics-toplevellexicallydeclarednames|StatementListItem|Declaration" : "[TopLevelLexicallyDeclaredNames] StatementListItem : Declaration",
  "sec-static-semantics-containsduplicatelabels|Block|{|}" : "[ContainsDuplicateLabels] Block : { }",
  "sec-ordinaryfunctioncreate" : "OrdinaryFunctionCreate",
  "sec-static-semantics-isfunctiondefinition|RelationalExpression|RelationalExpression|instanceof|ShiftExpression" : "[IsFunctionDefinition] RelationalExpression : RelationalExpression instanceof ShiftExpression",
  "sec-runtime-semantics-instantiatefunctionobject|GeneratorDeclaration|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[InstantiateFunctionObject] GeneratorDeclaration : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-dataview.prototype.setuint16" : "DataView.prototype.setUint16",
  "sec-static-semantics-containsundefinedbreaktarget|Statement|ExpressionStatement" : "[ContainsUndefinedBreakTarget] Statement : ExpressionStatement",
  "sec-runtime-semantics-instantiateasyncfunctionobject|AsyncFunctionDeclaration|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[InstantiateAsyncFunctionObject] AsyncFunctionDeclaration : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-identifiers-runtime-semantics-evaluation|IdentifierReference|await" : "[Evaluation] IdentifierReference : await",
  "sec-%typedarray%.prototype.join" : "TypedArray.prototype.join",
  "sec-patterns-static-semantics-character-value|CharacterEscape|IdentityEscape" : "[CharacterValue] CharacterEscape : IdentityEscape",
  "sec-class-definitions-runtime-semantics-evaluation|ClassDeclaration|class|BindingIdentifier|ClassTail" : "[Evaluation] ClassDeclaration : class BindingIdentifier ClassTail",
  "sec-string.prototype.startswith" : "String.prototype.startsWith",
  "sec-debugger-statement-runtime-semantics-evaluation|DebuggerStatement|debugger|;" : "[Evaluation] DebuggerStatement : debugger ;",
  "sec-string.prototype.localecompare" : "String.prototype.localeCompare",
  "sec-promise-resolve-functions" : "yet:PromiseResolveFunction",
  "sec-binary-bitwise-operators-runtime-semantics-evaluation|BitwiseXORExpression|BitwiseXORExpression|^|BitwiseANDExpression" : "[Evaluation] BitwiseXORExpression : BitwiseXORExpression ^ BitwiseANDExpression",
  "sec-built-in-function-objects-construct-argumentslist-newtarget" : "[[Construct]]",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|LexicalDeclaration|Expression|;|Expression|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( LexicalDeclaration Expression ; Expression ) Statement",
  "sec-date.prototype.settime" : "Date.prototype.setTime",
  "sec-touint8" : "ToUint8",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|Expression|;|Expression|;|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( Expression ; Expression ; ) Statement",
  "sec-runtime-semantics-forinofloopevaluation|ForInOfStatement|for|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[ForInOfLoopEvaluation] ForInOfStatement : for ( var ForBinding of AssignmentExpression ) Statement",
  "sec-runtime-semantics-namedevaluation|FunctionExpression|function|(|FormalParameters|)|{|FunctionBody|}" : "[NamedEvaluation] FunctionExpression : function ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-containsundefinedcontinuetarget|ForInOfStatement|for|await|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedContinueTarget] ForInOfStatement : for await ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-patterns-static-semantics-is-character-class|ClassEscape|CharacterClassEscape" : "[IsCharacterClass] ClassEscape : CharacterClassEscape",
  "sec-numeric-types-bigint-tostring" : "BigInt::toString",
  "sec-object-environment-records-setmutablebinding-n-v-s" : "SetMutableBinding",
  "sec-aggregate-error" : "AggregateError",
  "sec-get-dataview.prototype.buffer" : "get DataView.prototype.buffer",
  "sec-static-semantics-vardeclarednames|AsyncConciseBody|ExpressionBody" : "[VarDeclaredNames] AsyncConciseBody : ExpressionBody",
  "sec-module-namespace-exotic-objects-defineownproperty-p-desc" : "[[DefineOwnProperty]]",
  "sec-numericvalue|DecimalBigIntegerLiteral|NonZeroDigit|DecimalDigits|BigIntLiteralSuffix" : "[NumericValue] DecimalBigIntegerLiteral : NonZeroDigit DecimalDigits BigIntLiteralSuffix",
  "sec-static-semantics-containsexpression|FormalParameters|FormalParameterList|,|FunctionRestParameter" : "[ContainsExpression] FormalParameters : FormalParameterList , FunctionRestParameter",
  "sec-static-semantics-hascallintailposition|WithStatement|with|(|Expression|)|Statement" : "[HasCallInTailPosition] WithStatement : with ( Expression ) Statement",
  "sec-numericvalue|DecimalBigIntegerLiteral|NonZeroDigit|BigIntLiteralSuffix" : "[NumericValue] DecimalBigIntegerLiteral : NonZeroDigit BigIntLiteralSuffix",
  "sec-ordinarytoprimitive" : "OrdinaryToPrimitive",
  "sec-arguments-exotic-objects-set-p-v-receiver" : "[[Set]]",
  "sec-static-semantics-privateboundidentifiers|FieldDefinition|ClassElementName|Initializer" : "[PrivateBoundIdentifiers] FieldDefinition : ClassElementName Initializer",
  "sec-emptymatcher" : "EmptyMatcher",
  "sec-optional-chaining-chain-evaluation|OptionalChain|?.|Arguments" : "[ChainEvaluation] OptionalChain : ?. Arguments",
  "sec-%typedarray%.prototype.at" : "TypedArray.prototype.at",
  "sec-compiletocharset|ClassSetCharacter|SourceCharacter" : "[CompileToCharSet] ClassSetCharacter : SourceCharacter",
  "sec-yield" : "Yield",
  "sec-haslexicaldeclaration" : "HasLexicalDeclaration",
  "sec-thisnumbervalue" : "ThisNumberValue",
  "sec-%asyncfromsynciteratorprototype%.return" : "AsyncFromSyncIteratorPrototype.return",
  "sec-stringpad" : "StringPad",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|Literal" : "[HasCallInTailPosition] PrimaryExpression : Literal",
  "sec-literals-runtime-semantics-evaluation|Literal|NullLiteral" : "[Evaluation] Literal : NullLiteral",
  "sec-initializeboundname" : "InitializeBoundName",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|AsyncGeneratorExpression" : "[AssignmentTargetType] PrimaryExpression : AsyncGeneratorExpression",
  "sec-static-semantics-assignmenttargettype|CallExpression|CoverCallExpressionAndAsyncArrowHead" : "[AssignmentTargetType] CallExpression : CoverCallExpressionAndAsyncArrowHead",
  "sec-static-semantics-computedpropertycontains|FieldDefinition|ClassElementName" : "[ComputedPropertyContains] FieldDefinition : ClassElementName",
  "sec-tostring" : "ToString",
  "sec-declarative-environment-records-setmutablebinding-n-v-s" : "SetMutableBinding",
  "sec-static-semantics-maycontainstrings|ClassUnion|ClassSetOperand" : "[MayContainStrings] ClassUnion : ClassSetOperand",
  "sec-runtime-semantics-classdefinitionevaluation|ClassTail|ClassHeritage|{|ClassBody|}" : "[ClassDefinitionEvaluation] ClassTail : ClassHeritage { ClassBody }",
  "sec-static-semantics-isfunctiondefinition|UnaryExpression|+|UnaryExpression" : "[IsFunctionDefinition] UnaryExpression : + UnaryExpression",
  "sec-static-semantics-containsduplicatelabels|DefaultClause|default|:|StatementList" : "[ContainsDuplicateLabels] DefaultClause : default : StatementList",
  "sec-runtime-semantics-argumentlistevaluation|SubstitutionTemplate|TemplateHead|Expression|TemplateSpans" : "[ArgumentListEvaluation] SubstitutionTemplate : TemplateHead Expression TemplateSpans",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|;|;|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( ; ; ) Statement",
  "sec-getnamedtimezoneoffsetnanoseconds" : "GetNamedTimeZoneOffsetNanoseconds",
  "sec-static-semantics-computedpropertycontains|ClassElement|;" : "[ComputedPropertyContains] ClassElement : ;",
  "sec-patterns-static-semantics-character-value|ClassSetCharacter|\\b" : "[CharacterValue] ClassSetCharacter : \\b",
  "sec-compileatom|Atom|(|Disjunction|)" : "[CompileAtom] Atom : ( Disjunction )",
  "sec-ordinary-object-internal-methods-and-internal-slots-isextensible" : "[[IsExtensible]]",
  "sec-numerictorawbytes" : "NumericToRawBytes",
  "sec-initializetypedarrayfromarraylike" : "InitializeTypedArrayFromArrayLike",
  "sec-runtime-semantics-iteratorbindinginitialization|ArrayBindingPattern|[|BindingElementList|,|BindingRestElement|]" : "[IteratorBindingInitialization] ArrayBindingPattern : [ BindingElementList , BindingRestElement ]",
  "sec-array.isarray" : "Array.isArray",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|TemplateLiteral" : "[HasCallInTailPosition] PrimaryExpression : TemplateLiteral",
  "sec-arraybufferbytelength" : "ArrayBufferByteLength",
  "sec-static-semantics-varscopeddeclarations|Statement|BreakStatement" : "[VarScopedDeclarations] Statement : BreakStatement",
  "sec-static-semantics-containsundefinedcontinuetarget|Statement|BreakStatement" : "[ContainsUndefinedContinueTarget] Statement : BreakStatement",
  "sec-static-semantics-vardeclarednames|DoWhileStatement|do|Statement|while|(|Expression|)|;" : "[VarDeclaredNames] DoWhileStatement : do Statement while ( Expression ) ;",
  "sec-static-semantics-vardeclarednames|Statement|ThrowStatement" : "[VarDeclaredNames] Statement : ThrowStatement",
  "sec-static-semantics-privateboundidentifiers|MethodDefinition|get|ClassElementName|(|)|{|FunctionBody|}" : "[PrivateBoundIdentifiers] MethodDefinition : get ClassElementName ( ) { FunctionBody }",
  "sec-dataview.prototype.setuint8" : "DataView.prototype.setUint8",
  "sec-static-semantics-lexicallydeclarednames|ModuleItem|StatementListItem" : "[LexicallyDeclaredNames] ModuleItem : StatementListItem",
  "sec-object-initializer-runtime-semantics-evaluation|LiteralPropertyName|StringLiteral" : "[Evaluation] LiteralPropertyName : StringLiteral",
  "sec-static-semantics-contains|ArrowParameters|CoverParenthesizedExpressionAndArrowParameterList" : "[Contains] ArrowParameters : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-static-semantics-assignmenttargettype|RelationalExpression|RelationalExpression|<|ShiftExpression" : "[AssignmentTargetType] RelationalExpression : RelationalExpression < ShiftExpression",
  "sec-static-semantics-hascallintailposition|CaseClause|case|Expression|:" : "[HasCallInTailPosition] CaseClause : case Expression :",
  "sec-static-semantics-boundnames|ArrayBindingPattern|[|BindingElementList|,|Elision|]" : "[BoundNames] ArrayBindingPattern : [ BindingElementList , Elision ]",
  "sec-compiletocharset|CharacterClassEscape|s" : "[CompileToCharSet] CharacterClassEscape : s",
  "sec-static-semantics-hascallintailposition|AdditiveExpression|AdditiveExpression|+|MultiplicativeExpression" : "[HasCallInTailPosition] AdditiveExpression : AdditiveExpression + MultiplicativeExpression",
  "sec-break-statement-runtime-semantics-evaluation|BreakStatement|break|;" : "[Evaluation] BreakStatement : break ;",
  "sec-property-accessors-runtime-semantics-evaluation|CallExpression|CallExpression|.|IdentifierName" : "[Evaluation] CallExpression : CallExpression . IdentifierName",
  "sec-isconstructor" : "IsConstructor",
  "sec-compiletocharset|CharacterClassEscape|w" : "[CompileToCharSet] CharacterClassEscape : w",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|Expression|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( var VariableDeclarationList ; Expression ; Expression ) Statement",
  "sec-privateset" : "PrivateSet",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|RegularExpressionLiteral" : "[AssignmentTargetType] PrimaryExpression : RegularExpressionLiteral",
  "sec-issharedarraybuffer" : "IsSharedArrayBuffer",
  "sec-date.prototype.getdate" : "Date.prototype.getDate",
  "sec-static-semantics-containsundefinedbreaktarget|BreakStatement|break|LabelIdentifier|;" : "[ContainsUndefinedBreakTarget] BreakStatement : break LabelIdentifier ;",
  "sec-runtime-semantics-bindinginitialization|BindingPattern|ArrayBindingPattern" : "[BindingInitialization] BindingPattern : ArrayBindingPattern",
  "sec-static-semantics-assignmenttargettype|UnaryExpression|delete|UnaryExpression" : "[AssignmentTargetType] UnaryExpression : delete UnaryExpression",
  "sec-static-semantics-boundnames|VariableDeclaration|BindingIdentifier" : "[BoundNames] VariableDeclaration : BindingIdentifier",
  "sec-set.prototype.add" : "Set.prototype.add",
  "sec-compiletocharset|CharacterClassEscape|d" : "[CompileToCharSet] CharacterClassEscape : d",
  "sec-array.prototype.with" : "Array.prototype.with",
  "sec-static-semantics-hascallintailposition|MemberExpression|MetaProperty" : "[HasCallInTailPosition] MemberExpression : MetaProperty",
  "sec-patterns-static-semantics-character-value|ClassSetCharacter|SourceCharacter" : "[CharacterValue] ClassSetCharacter : SourceCharacter",
  "sec-static-semantics-specialmethod|MethodDefinition|AsyncGeneratorMethod" : "[SpecialMethod] MethodDefinition : AsyncGeneratorMethod",
  "sec-static-semantics-containsundefinedbreaktarget|ForInOfStatement|for|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedBreakTarget] ForInOfStatement : for ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-optional-chaining-chain-evaluation|OptionalChain|?.|[|Expression|]" : "[ChainEvaluation] OptionalChain : ?. [ Expression ]",
  "sec-compiletocharset|UnicodePropertyValueExpression|LoneUnicodePropertyNameOrValue" : "[CompileToCharSet] UnicodePropertyValueExpression : LoneUnicodePropertyNameOrValue",
  "sec-static-semantics-assignmenttargettype|CallExpression|CallExpression|Arguments" : "[AssignmentTargetType] CallExpression : CallExpression Arguments",
  "sec-function.prototype.apply" : "Function.prototype.apply",
  "sec-symbol.prototype.tostring" : "Symbol.prototype.toString",
  "sec-static-semantics-assignmenttargettype|MemberExpression|new|MemberExpression|Arguments" : "[AssignmentTargetType] MemberExpression : new MemberExpression Arguments",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|CoverParenthesizedExpressionAndArrowParameterList" : "[AssignmentTargetType] PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-compiletocharset|CharacterClassEscape|S" : "[CompileToCharSet] CharacterClassEscape : S",
  "sec-static-semantics-containsexpression|BindingElisionElement|Elision|BindingElement" : "[ContainsExpression] BindingElisionElement : Elision BindingElement",
  "sec-array.prototype.flatmap" : "Array.prototype.flatMap",
  "sec-template-literals-runtime-semantics-evaluation|TemplateMiddleList|TemplateMiddleList|TemplateMiddle|Expression" : "[Evaluation] TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression",
  "sec-static-semantics-exportentries|ExportDeclaration|export|default|AssignmentExpression|;" : "[ExportEntries] ExportDeclaration : export default AssignmentExpression ;",
  "sec-get-map.prototype.size" : "get Map.prototype.size",
  "sec-async-module-execution-fulfilled" : "AsyncModuleExecutionFulfilled",
  "sec-static-semantics-concisebodycontainsusestrict|ConciseBody|{|FunctionBody|}" : "[ConciseBodyContainsUseStrict] ConciseBody : { FunctionBody }",
  "sec-compiletocharset|CharacterClassEscape|W" : "[CompileToCharSet] CharacterClassEscape : W",
  "sec-isstringwellformedunicode" : "IsStringWellFormedUnicode",
  "sec-static-semantics-containsundefinedcontinuetarget|TryStatement|try|Block|Catch|Finally" : "[ContainsUndefinedContinueTarget] TryStatement : try Block Catch Finally",
  "sec-static-semantics-containsarguments|FunctionDeclaration|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[ContainsArguments] FunctionDeclaration : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|var|VariableDeclarationList|;|;|Expression|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( var VariableDeclarationList ; ; Expression ) Statement",
  "sec-static-semantics-boundnames|LexicalBinding|BindingIdentifier|Initializer" : "[BoundNames] LexicalBinding : BindingIdentifier Initializer",
  "sec-static-semantics-maycontainstrings|NonEmptyClassString|ClassSetCharacter|NonEmptyClassString" : "[MayContainStrings] NonEmptyClassString : ClassSetCharacter NonEmptyClassString",
  "sec-static-semantics-isidentifierref|MemberExpression|new|MemberExpression|Arguments" : "[IsIdentifierRef] MemberExpression : new MemberExpression Arguments",
  "sec-static-semantics-allprivateidentifiersvalid|CallExpression|CallExpression|.|PrivateIdentifier" : "[AllPrivateIdentifiersValid] CallExpression : CallExpression . PrivateIdentifier",
  "sec-static-semantics-boundnames|GeneratorDeclaration|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[BoundNames] GeneratorDeclaration : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-get-regexp.prototype.source" : "get RegExp.prototype.source",
  "sec-daywithinyear" : "DayWithinYear",
  "sec-compiletocharset|NestedClass|[^|ClassContents|]" : "[CompileToCharSet] NestedClass : [^ ClassContents ]",
  "sec-get-regexp.prototype.unicode" : "get RegExp.prototype.unicode",
  "sec-compiletocharset|CharacterClassEscape|D" : "[CompileToCharSet] CharacterClassEscape : D",
  "sec-object.prototype.valueof" : "Object.prototype.valueOf",
  "sec-number.issafeinteger" : "Number.isSafeInteger",
  "sec-static-semantics-hascallintailposition|OptionalChain|?.|PrivateIdentifier" : "[HasCallInTailPosition] OptionalChain : ?. PrivateIdentifier",
  "sec-compilesubpattern|Term|Atom|Quantifier" : "[CompileSubpattern] Term : Atom Quantifier",
  "sec-patterns-static-semantics-character-value|HexLeadSurrogate|Hex4Digits" : "[CharacterValue] HexLeadSurrogate : Hex4Digits",
  "sec-template-literals-runtime-semantics-evaluation|TemplateSpans|TemplateMiddleList|TemplateTail" : "[Evaluation] TemplateSpans : TemplateMiddleList TemplateTail",
  "sec-runtime-semantics-destructuringassignmentevaluation|ArrayAssignmentPattern|[|AssignmentElementList|,|Elision|AssignmentRestElement|]" : "[DestructuringAssignmentEvaluation] ArrayAssignmentPattern : [ AssignmentElementList , Elision AssignmentRestElement ]",
  "sec-static-semantics-isdestructuring|ForBinding|BindingPattern" : "[IsDestructuring] ForBinding : BindingPattern",
  "sec-get-arraybuffer.prototype.detached" : "get ArrayBuffer.prototype.detached",
  "sec-array-initializer-runtime-semantics-evaluation|ArrayLiteral|[|]" : "[Evaluation] ArrayLiteral : [ ]",
  "sec-static-semantics-issimpleparameterlist|SingleNameBinding|BindingIdentifier|Initializer" : "[IsSimpleParameterList] SingleNameBinding : BindingIdentifier Initializer",
  "sec-createdatapropertyorthrow" : "CreateDataPropertyOrThrow",
  "sec-static-semantics-isfunctiondefinition|AdditiveExpression|AdditiveExpression|+|MultiplicativeExpression" : "[IsFunctionDefinition] AdditiveExpression : AdditiveExpression + MultiplicativeExpression",
  "sec-ContinueModuleLoading" : "ContinueModuleLoading",
  "sec-static-semantics-exportentriesformodule|NamedExports|{|}" : "[ExportEntriesForModule] NamedExports : { }",
  "sec-createsetiterator" : "CreateSetIterator",
  "sec-runtime-semantics-labelledevaluation|LabelledItem|FunctionDeclaration" : "[LabelledEvaluation] LabelledItem : FunctionDeclaration",
  "sec-static-semantics-exportednames|ExportDeclaration|export|default|AssignmentExpression|;" : "[ExportedNames] ExportDeclaration : export default AssignmentExpression ;",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|LexicalDeclaration|Expression|;|)|Statement" : "[VarDeclaredNames] ForStatement : for ( LexicalDeclaration Expression ; ) Statement",
  "sec-compiletocharset|ClassUnion|ClassSetRange|ClassUnion" : "[CompileToCharSet] ClassUnion : ClassSetRange ClassUnion",
  "sec-static-semantics-hascallintailposition|RelationalExpression|RelationalExpression|in|ShiftExpression" : "[HasCallInTailPosition] RelationalExpression : RelationalExpression in ShiftExpression",
  "sec-math.tan" : "Math.tan",
  "sec-runtime-semantics-scriptevaluation" : "ScriptEvaluation",
  "sec-timefromyear" : "TimeFromYear",
  "sec-dataview.prototype.getuint32" : "DataView.prototype.getUint32",
  "sec-static-semantics-containsundefinedcontinuetarget|CaseBlock|{|DefaultClause|CaseClauses|}" : "[ContainsUndefinedContinueTarget] CaseBlock : { DefaultClause CaseClauses }",
  "sec-static-semantics-boundnames|ExportDeclaration|export|VariableStatement" : "[BoundNames] ExportDeclaration : export VariableStatement",
  "sec-createsharedbytedatablock" : "CreateSharedByteDataBlock",
  "sec-static-semantics-varscopeddeclarations|ForInOfStatement|for|(|var|ForBinding|in|Expression|)|Statement" : "[VarScopedDeclarations] ForInOfStatement : for ( var ForBinding in Expression ) Statement",
  "sec-function-environment-records-hasthisbinding" : "HasThisBinding",
  "sec-static-semantics-isidentifierref|MemberExpression|MemberExpression|TemplateLiteral" : "[IsIdentifierRef] MemberExpression : MemberExpression TemplateLiteral",
  "sec-runtime-semantics-classdefinitionevaluation|ClassTail|ClassHeritage|{|}" : "[ClassDefinitionEvaluation] ClassTail : ClassHeritage { }",
  "sec-toint8" : "ToInt8",
  "sec-hasownproperty" : "HasOwnProperty",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|Expression|;|Expression|;|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( Expression ; Expression ; ) Statement",
  "sec-math.ceil" : "Math.ceil",
  "sec-static-semantics-containsarguments|GeneratorExpression|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[ContainsArguments] GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }",
  "sec-wordcharacters" : "WordCharacters",
  "sec-exports-runtime-semantics-evaluation|ExportDeclaration|export|NamedExports|;" : "[Evaluation] ExportDeclaration : export NamedExports ;",
  "sec-return-statement-runtime-semantics-evaluation|ReturnStatement|return|;" : "[Evaluation] ReturnStatement : return ;",
  "sec-runtime-semantics-evaluatebody|AsyncConciseBody|ExpressionBody" : "[EvaluateBody] AsyncConciseBody : ExpressionBody",
  "sec-%typedarray%.of" : "TypedArray.of",
  "sec-static-semantics-isdestructuring|MemberExpression|MemberExpression|.|PrivateIdentifier" : "[IsDestructuring] MemberExpression : MemberExpression . PrivateIdentifier",
  "sec-get-%typedarray%-@@species" : "get TypedArray[@@species]",
  "sec-isintegralnumber" : "IsIntegralNumber",
  "sec-newdeclarativeenvironment" : "NewDeclarativeEnvironment",
  "sec-static-semantics-exportentries|ExportDeclaration|export|NamedExports|;" : "[ExportEntries] ExportDeclaration : export NamedExports ;",
  "sec-static-semantics-containsduplicatelabels|CaseBlock|{|CaseClauses|DefaultClause|CaseClauses|}" : "[ContainsDuplicateLabels] CaseBlock : { CaseClauses DefaultClause CaseClauses }",
  "sec-static-semantics-containsexpression|ArrayBindingPattern|[|BindingElementList|,|Elision|BindingRestElement|]" : "[ContainsExpression] ArrayBindingPattern : [ BindingElementList , Elision BindingRestElement ]",
  "sec-static-semantics-hascallintailposition|LogicalORExpression|LogicalORExpression||||LogicalANDExpression" : "[HasCallInTailPosition] LogicalORExpression : LogicalORExpression || LogicalANDExpression",
  "sec-get-dataview.prototype.byteoffset" : "get DataView.prototype.byteOffset",
  "sec-math.atan" : "Math.atan",
  "sec-builtincallorconstruct" : "BuiltinCallOrConstruct",
  "sec-runtime-semantics-iteratordestructuringassignmentevaluation|AssignmentElementList|AssignmentElementList|,|AssignmentElisionElement" : "[IteratorDestructuringAssignmentEvaluation] AssignmentElementList : AssignmentElementList , AssignmentElisionElement",
  "sec-encodeuri-uri" : "encodeURI",
  "sec-static-semantics-importentries|ImportDeclaration|import|ImportClause|FromClause|;" : "[ImportEntries] ImportDeclaration : import ImportClause FromClause ;",
  "sec-runtime-semantics-iteratordestructuringassignmentevaluation|Elision|," : "[IteratorDestructuringAssignmentEvaluation] Elision : ,",
  "sec-evaluatestringornumericbinaryexpression" : "EvaluateStringOrNumericBinaryExpression",
  "sec-copydatablockbytes" : "CopyDataBlockBytes",
  "sec-static-semantics-isidentifierref|MemberExpression|MemberExpression|.|IdentifierName" : "[IsIdentifierRef] MemberExpression : MemberExpression . IdentifierName",
  "sec-static-semantics-exportedbindings|ExportDeclaration|export|VariableStatement" : "[ExportedBindings] ExportDeclaration : export VariableStatement",
  "sec-static-semantics-vardeclarednames|ForInOfStatement|for|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[VarDeclaredNames] ForInOfStatement : for ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-setintegritylevel" : "SetIntegrityLevel",
  "sec-async-function-definitions-runtime-semantics-evaluation|AsyncFunctionExpression|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[Evaluation] AsyncFunctionExpression : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-createiteratorfromclosure" : "CreateIteratorFromClosure",
  "sec-static-semantics-assignmenttargettype|ShiftExpression|ShiftExpression|>>>|AdditiveExpression" : "[AssignmentTargetType] ShiftExpression : ShiftExpression >>> AdditiveExpression",
  "sec-ordinary-object-internal-methods-and-internal-slots-delete-p" : "[[Delete]]",
  "sec-revalidateatomicaccess" : "RevalidateAtomicAccess",
  "sec-static-semantics-computedpropertycontains|GeneratorMethod|*|ClassElementName|(|UniqueFormalParameters|)|{|GeneratorBody|}" : "[ComputedPropertyContains] GeneratorMethod : * ClassElementName ( UniqueFormalParameters ) { GeneratorBody }",
  "sec-get-sharedarraybuffer.prototype.growable" : "get SharedArrayBuffer.prototype.growable",
  "sec-static-semantics-contains|AsyncArrowFunction|async|AsyncArrowBindingIdentifier|=>|AsyncConciseBody" : "[Contains] AsyncArrowFunction : async AsyncArrowBindingIdentifier => AsyncConciseBody",
  "sec-runtime-semantics-definemethod|MethodDefinition|ClassElementName|(|UniqueFormalParameters|)|{|FunctionBody|}" : "[DefineMethod] MethodDefinition : ClassElementName ( UniqueFormalParameters ) { FunctionBody }",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|LexicalDeclaration|;|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( LexicalDeclaration ; Expression ) Statement",
  "sec-createasyncfromsynciterator" : "CreateAsyncFromSyncIterator",
  "sec-dataview.prototype.getuint16" : "DataView.prototype.getUint16",
  "sec-static-semantics-contains|CallExpression|CallExpression|.|IdentifierName" : "[Contains] CallExpression : CallExpression . IdentifierName",
  "sec-static-semantics-specialmethod|MethodDefinition|get|ClassElementName|(|)|{|FunctionBody|}" : "[SpecialMethod] MethodDefinition : get ClassElementName ( ) { FunctionBody }",
  "sec-static-semantics-assignmenttargettype|EqualityExpression|EqualityExpression|!=|RelationalExpression" : "[AssignmentTargetType] EqualityExpression : EqualityExpression != RelationalExpression",
  "sec-static-semantics-propertynamelist|PropertyDefinitionList|PropertyDefinition" : "[PropertyNameList] PropertyDefinitionList : PropertyDefinition",
  "sec-bitwise-not-operator-runtime-semantics-evaluation|UnaryExpression|~|UnaryExpression" : "[Evaluation] UnaryExpression : ~ UnaryExpression",
  "sec-event-set" : "EventSet",
  "sec-%typedarray%.prototype.findindex" : "TypedArray.prototype.findIndex",
  "sec-static-semantics-hasname|PrimaryExpression|CoverParenthesizedExpressionAndArrowParameterList" : "[HasName] PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-static-semantics-hascallintailposition|UnaryExpression|~|UnaryExpression" : "[HasCallInTailPosition] UnaryExpression : ~ UnaryExpression",
  "sec-template-literals-runtime-semantics-evaluation|TemplateLiteral|NoSubstitutionTemplate" : "[Evaluation] TemplateLiteral : NoSubstitutionTemplate",
  "sec-static-semantics-isdestructuring|MemberExpression|MemberExpression|[|Expression|]" : "[IsDestructuring] MemberExpression : MemberExpression [ Expression ]",
  "sec-boundfunctioncreate" : "BoundFunctionCreate",
  "sec-runtime-semantics-iteratordestructuringassignmentevaluation|AssignmentElement|DestructuringAssignmentTarget" : "[IteratorDestructuringAssignmentEvaluation] AssignmentElement : DestructuringAssignmentTarget",
  "sec-getnewtarget" : "GetNewTarget",
  "sec-static-semantics-assignmenttargettype|MemberExpression|SuperProperty" : "[AssignmentTargetType] MemberExpression : SuperProperty",
  "sec-%typedarray%.prototype.includes" : "TypedArray.prototype.includes",
  "sec-createarrayiterator" : "CreateArrayIterator",
  "sec-getiterator" : "GetIterator",
  "sec-static-semantics-isfunctiondefinition|LogicalANDExpression|LogicalANDExpression|&&|BitwiseORExpression" : "[IsFunctionDefinition] LogicalANDExpression : LogicalANDExpression && BitwiseORExpression",
  "sec-makeclassconstructor" : "MakeClassConstructor",
  "sec-runtime-semantics-evaluatefunctionbody|FunctionBody|FunctionStatementList" : "[EvaluateFunctionBody] FunctionBody : FunctionStatementList",
  "sec-static-semantics-lexicallyscopeddeclarations|ExportDeclaration|export|ExportFromClause|FromClause|;" : "[LexicallyScopedDeclarations] ExportDeclaration : export ExportFromClause FromClause ;",
  "sec-static-semantics-importentriesformodule|ImportSpecifier|ImportedBinding" : "[ImportEntriesForModule] ImportSpecifier : ImportedBinding",
  "sec-this-keyword-runtime-semantics-evaluation|PrimaryExpression|this" : "[Evaluation] PrimaryExpression : this",
  "sec-assignment-operators-runtime-semantics-evaluation|AssignmentExpression|LeftHandSideExpression|=|AssignmentExpression" : "[Evaluation] AssignmentExpression : LeftHandSideExpression = AssignmentExpression",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|Expression|;|;|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( Expression ; ; ) Statement",
  "sec-compileatom|Atom|(|GroupSpecifier|Disjunction|)" : "[CompileAtom] Atom : ( GroupSpecifier Disjunction )",
  "sec-object-initializer-runtime-semantics-evaluation|ObjectLiteral|{|PropertyDefinitionList|}" : "[Evaluation] ObjectLiteral : { PropertyDefinitionList }",
  "sec-static-semantics-exportednames|ExportDeclaration|export|default|ClassDeclaration" : "[ExportedNames] ExportDeclaration : export default ClassDeclaration",
  "sec-static-semantics-isconstantdeclaration|ClassDeclaration|class|BindingIdentifier|ClassTail" : "[IsConstantDeclaration] ClassDeclaration : class BindingIdentifier ClassTail",
  "sec-static-semantics-propertynamelist|PropertyDefinitionList|PropertyDefinitionList|,|PropertyDefinition" : "[PropertyNameList] PropertyDefinitionList : PropertyDefinitionList , PropertyDefinition",
  "sec-iteratorstep" : "IteratorStep",
  "sec-atomics.islockfree" : "Atomics.isLockFree",
  "sec-isvalidintegerindex" : "IsValidIntegerIndex",
  "sec-runtime-semantics-evaluateasyncfunctionbody|AsyncFunctionBody|FunctionBody" : "[EvaluateAsyncFunctionBody] AsyncFunctionBody : FunctionBody",
  "sec-reflect.get" : "Reflect.get",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|Expression|;|;|)|Statement" : "[VarDeclaredNames] ForStatement : for ( Expression ; ; ) Statement",
  "sec-getvaluefrombuffer" : "GetValueFromBuffer",
  "sec-static-semantics-assignmenttargettype|AssignmentExpression|LeftHandSideExpression|||=|AssignmentExpression" : "[AssignmentTargetType] AssignmentExpression : LeftHandSideExpression ||= AssignmentExpression",
  "sec-object.getprototypeof" : "Object.getPrototypeOf",
  "sec-static-semantics-classelementevaluation|ClassElement|FieldDefinition|;" : "[ClassElementEvaluation] ClassElement : FieldDefinition ;",
  "sec-static-semantics-isidentifierref|PrimaryExpression|ObjectLiteral" : "[IsIdentifierRef] PrimaryExpression : ObjectLiteral",
  "sec-date.prototype.totimestring" : "Date.prototype.toTimeString",
  "sec-static-semantics-contains|SuperProperty|super|.|IdentifierName" : "[Contains] SuperProperty : super . IdentifierName",
  "sec-static-semantics-containsundefinedbreaktarget|Catch|catch|(|CatchParameter|)|Block" : "[ContainsUndefinedBreakTarget] Catch : catch ( CatchParameter ) Block",
  "sec-runtime-semantics-keyedbindinginitialization|SingleNameBinding|BindingIdentifier|Initializer" : "[KeyedBindingInitialization] SingleNameBinding : BindingIdentifier Initializer",
  "sec-day" : "Day",
  "sec-static-semantics-lexicallydeclarednames|LabelledItem|FunctionDeclaration" : "[LexicallyDeclaredNames] LabelledItem : FunctionDeclaration",
  "sec-conditional-operator-runtime-semantics-evaluation|ConditionalExpression|ShortCircuitExpression|?|AssignmentExpression|:|AssignmentExpression" : "[Evaluation] ConditionalExpression : ShortCircuitExpression ? AssignmentExpression : AssignmentExpression",
  "sec-static-semantics-templatestrings|TemplateSpans|TemplateMiddleList|TemplateTail" : "[TemplateStrings] TemplateSpans : TemplateMiddleList TemplateTail",
  "sec-ordinarygetownproperty" : "OrdinaryGetOwnProperty",
  "sec-static-semantics-boundnames|VariableDeclaration|BindingPattern|Initializer" : "[BoundNames] VariableDeclaration : BindingPattern Initializer",
  "sec-getglobalobject" : "GetGlobalObject",
  "sec-evaldeclarationinstantiation" : "EvalDeclarationInstantiation",
  "sec-preparefortailcall" : "PrepareForTailCall",
  "sec-static-semantics-capturinggroupname|GroupName|<|RegExpIdentifierName|>" : "[CapturingGroupName] GroupName : < RegExpIdentifierName >",
  "sec-runtime-semantics-characterrange-abstract-operation" : "CharacterRange",
  "sec-static-semantics-hascallintailposition|UpdateExpression|--|UnaryExpression" : "[HasCallInTailPosition] UpdateExpression : -- UnaryExpression",
  "sec-runtime-semantics-methoddefinitionevaluation|GeneratorMethod|*|ClassElementName|(|UniqueFormalParameters|)|{|GeneratorBody|}" : "[MethodDefinitionEvaluation] GeneratorMethod : * ClassElementName ( UniqueFormalParameters ) { GeneratorBody }",
  "sec-compiletocharset|CharacterClassEscape|P{|UnicodePropertyValueExpression|}" : "[CompileToCharSet] CharacterClassEscape : P{ UnicodePropertyValueExpression }",
  "sec-compiletocharset|ClassContents" : "[CompileToCharSet] ClassContents :",
  "sec-static-semantics-exportednames|ExportFromClause|*|as|ModuleExportName" : "[ExportedNames] ExportFromClause : * as ModuleExportName",
  "sec-get-regexp.prototype.global" : "get RegExp.prototype.global",
  "sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver" : "[[Get]]",
  "sec-host-cleanup-finalization-registry" : "HostEnqueueFinalizationRegistryCleanupJob",
  "sec-runtime-semantics-bindinginitialization|BindingIdentifier|await" : "[BindingInitialization] BindingIdentifier : await",
  "sec-runtime-semantics-arrayaccumulation|ElementList|SpreadElement" : "[ArrayAccumulation] ElementList : SpreadElement",
  "sec-agentcansuspend" : "AgentCanSuspend",
  "sec-static-semantics-varscopeddeclarations|Script" : "[VarScopedDeclarations] Script :",
  "sec-static-semantics-expectedargumentcount|FormalParameterList|FormalParameter" : "[ExpectedArgumentCount] FormalParameterList : FormalParameter",
  "sec-static-semantics-hascallintailposition|TryStatement|try|Block|Catch" : "[HasCallInTailPosition] TryStatement : try Block Catch",
  "sec-date.prototype.setseconds" : "Date.prototype.setSeconds",
  "sec-static-semantics-lexicallyscopeddeclarations|ConciseBody|ExpressionBody" : "[LexicallyScopedDeclarations] ConciseBody : ExpressionBody",
  "sec-static-semantics-exportednames|ExportDeclaration|export|ExportFromClause|FromClause|;" : "[ExportedNames] ExportDeclaration : export ExportFromClause FromClause ;",
  "sec-static-semantics-specialmethod|MethodDefinition|GeneratorMethod" : "[SpecialMethod] MethodDefinition : GeneratorMethod",
  "sec-static-semantics-vardeclarednames|FunctionStatementList" : "[VarDeclaredNames] FunctionStatementList :",
  "sec-static-semantics-containsundefinedbreaktarget|ClassStaticBlockStatementList" : "[ContainsUndefinedBreakTarget] ClassStaticBlockStatementList :",
  "sec-compiletocharset|ClassSetCharacter|\\|CharacterEscape" : "[CompileToCharSet] ClassSetCharacter : \\ CharacterEscape",
  "sec-static-semantics-boundnames|ObjectBindingPattern|{|BindingPropertyList|,|BindingRestProperty|}" : "[BoundNames] ObjectBindingPattern : { BindingPropertyList , BindingRestProperty }",
  "sec-GetImportedModule" : "GetImportedModule",
  "sec-global-environment-records-withbaseobject" : "WithBaseObject",
  "sec-boolean.prototype.valueof" : "Boolean.prototype.valueOf",
  "sec-updateempty" : "UpdateEmpty",
  "sec-static-semantics-boundnames|ArrayBindingPattern|[|BindingRestElement|]" : "[BoundNames] ArrayBindingPattern : [ BindingRestElement ]",
  "sec-static-semantics-assignmenttargettype|BitwiseANDExpression|BitwiseANDExpression|&|EqualityExpression" : "[AssignmentTargetType] BitwiseANDExpression : BitwiseANDExpression & EqualityExpression",
  "sec-date.prototype.gethours" : "Date.prototype.getHours",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|;|Expression|;|Expression|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( ; Expression ; Expression ) Statement",
  "sec-add-value-to-keyed-group" : "AddValueToKeyedGroup",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|LexicalDeclaration|;|)|Statement" : "[VarDeclaredNames] ForStatement : for ( LexicalDeclaration ; ) Statement",
  "sec-string.prototype.tolowercase" : "String.prototype.toLowerCase",
  "sec-createmapiterator" : "CreateMapIterator",
  "sec-static-semantics-isfunctiondefinition|MemberExpression|SuperProperty" : "[IsFunctionDefinition] MemberExpression : SuperProperty",
  "sec-parseint-string-radix" : "parseInt",
  "sec-compilecharacterclass|CharacterClass|[|ClassContents|]" : "[CompileCharacterClass] CharacterClass : [ ClassContents ]",
  "sec-get-arraybuffer.prototype.resizable" : "get ArrayBuffer.prototype.resizable",
  "sec-typedarraybytelength" : "TypedArrayByteLength",
  "sec-compilesubpattern|Disjunction|Alternative|||Disjunction" : "[CompileSubpattern] Disjunction : Alternative | Disjunction",
  "sec-serializejsonproperty" : "SerializeJSONProperty",
  "sec-static-semantics-varscopeddeclarations|IfStatement|if|(|Expression|)|Statement|else|Statement" : "[VarScopedDeclarations] IfStatement : if ( Expression ) Statement else Statement",
  "sec-get-regexp.prototype.hasIndices" : "get RegExp.prototype.hasIndices",
  "sec-static-semantics-isfunctiondefinition|PrimaryExpression|ObjectLiteral" : "[IsFunctionDefinition] PrimaryExpression : ObjectLiteral",
  "sec-static-semantics-lexicallyscopeddeclarations|ExportDeclaration|export|default|HoistableDeclaration" : "[LexicallyScopedDeclarations] ExportDeclaration : export default HoistableDeclaration",
  "sec-object.issealed" : "Object.isSealed",
  "sec-object.prototype.__defineSetter__" : "Object.prototype.__defineSetter__",
  "sec-samevaluenonnumber" : "SameValueNonNumber",
  "sec-createiterresultobject" : "CreateIterResultObject",
  "sec-dataview.prototype.setuint32" : "DataView.prototype.setUint32",
  "sec-array.prototype.indexof" : "Array.prototype.indexOf",
  "sec-static-semantics-boundnames|BindingElisionElement|BindingElement" : "[BoundNames] BindingElisionElement : BindingElement",
  "sec-date.prototype.getminutes" : "Date.prototype.getMinutes",
  "sec-property-accessors-runtime-semantics-evaluation|CallExpression|CallExpression|[|Expression|]" : "[Evaluation] CallExpression : CallExpression [ Expression ]",
  "sec-static-semantics-nonconstructorelements|ClassElementList|ClassElement" : "[NonConstructorElements] ClassElementList : ClassElement",
  "sec-static-semantics-contains|FunctionDeclaration|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[Contains] FunctionDeclaration : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-varscopeddeclarations|CaseBlock|{|}" : "[VarScopedDeclarations] CaseBlock : { }",
  "sec-static-semantics-isfunctiondefinition|NewExpression|new|NewExpression" : "[IsFunctionDefinition] NewExpression : new NewExpression",
  "sec-runtime-semantics-destructuringassignmentevaluation|ObjectAssignmentPattern|{|AssignmentPropertyList|,|}" : "[DestructuringAssignmentEvaluation] ObjectAssignmentPattern : { AssignmentPropertyList , }",
  "sec-static-semantics-hasname|AsyncFunctionExpression|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[HasName] AsyncFunctionExpression : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-class-definitions-runtime-semantics-evaluation|ClassElementName|PrivateIdentifier" : "[Evaluation] ClassElementName : PrivateIdentifier",
  "sec-static-semantics-isidentifierref|PrimaryExpression|AsyncFunctionExpression" : "[IsIdentifierRef] PrimaryExpression : AsyncFunctionExpression",
  "sec-object-value" : "Object",
  "sec-numeric-types-bigint-bitwiseNOT" : "BigInt::bitwiseNOT",
  "sec-static-semantics-issimpleparameterlist|FormalParameters|FormalParameterList|,|FunctionRestParameter" : "[IsSimpleParameterList] FormalParameters : FormalParameterList , FunctionRestParameter",
  "sec-runtime-semantics-labelledevaluation|Statement|IfStatement" : "[LabelledEvaluation] Statement : IfStatement",
  "sec-numeric-types-number-multiply" : "Number::multiply",
  "sec-static-semantics-containsundefinedcontinuetarget|CaseClauses|CaseClauses|CaseClause" : "[ContainsUndefinedContinueTarget] CaseClauses : CaseClauses CaseClause",
  "sec-static-semantics-boundnames|ImportsList|ImportsList|,|ImportSpecifier" : "[BoundNames] ImportsList : ImportsList , ImportSpecifier",
  "sec-static-semantics-stringvalue|IdentifierName|IdentifierStart" : "[StringValue] IdentifierName : IdentifierStart",
  "sec-array.of" : "Array.of",
  "sec-static-semantics-exportentries|ExportDeclaration|export|Declaration" : "[ExportEntries] ExportDeclaration : export Declaration",
  "sec-addwaiter" : "AddWaiter",
  "sec-static-semantics-hascallintailposition|LogicalANDExpression|LogicalANDExpression|&&|BitwiseORExpression" : "[HasCallInTailPosition] LogicalANDExpression : LogicalANDExpression && BitwiseORExpression",
  "sec-binaryxor" : "BinaryXor",
  "sec-static-semantics-contains|AsyncFunctionExpression|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[Contains] AsyncFunctionExpression : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-exportednames|ExportDeclaration|export|default|HoistableDeclaration" : "[ExportedNames] ExportDeclaration : export default HoistableDeclaration",
  "sec-function.prototype-@@hasinstance" : "Function.prototype[@@hasInstance]",
  "sec-static-semantics-contains|PropertyDefinition|MethodDefinition" : "[Contains] PropertyDefinition : MethodDefinition",
  "sec-exports-runtime-semantics-evaluation|ExportDeclaration|export|Declaration" : "[Evaluation] ExportDeclaration : export Declaration",
  "sec-getviewvalue" : "GetViewValue",
  "sec-static-semantics-hascallintailposition|LabelledItem|FunctionDeclaration" : "[HasCallInTailPosition] LabelledItem : FunctionDeclaration",
  "sec-static-semantics-boundnames|ExportDeclaration|export|Declaration" : "[BoundNames] ExportDeclaration : export Declaration",
  "sec-%typedarray%.from" : "TypedArray.from",
  "sec-array.prototype.flat" : "Array.prototype.flat",
  "sec-static-semantics-hascallintailposition|CallExpression|CallExpression|.|IdentifierName" : "[HasCallInTailPosition] CallExpression : CallExpression . IdentifierName",
  "sec-static-semantics-privateboundidentifiers|MethodDefinition|set|ClassElementName|(|PropertySetParameterList|)|{|FunctionBody|}" : "[PrivateBoundIdentifiers] MethodDefinition : set ClassElementName ( PropertySetParameterList ) { FunctionBody }",
  "sec-static-semantics-exportedbindings|ModuleItemList|ModuleItemList|ModuleItem" : "[ExportedBindings] ModuleItemList : ModuleItemList ModuleItem",
  "sec-patterns-static-semantics-character-value|ClassEscape|b" : "[CharacterValue] ClassEscape : b",
  "sec-static-semantics-containsundefinedbreaktarget|ForInOfStatement|for|(|var|ForBinding|in|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForInOfStatement : for ( var ForBinding in Expression ) Statement",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|;|;|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( ; ; ) Statement",
  "sec-numeric-types-number-bitwiseXOR" : "Number::bitwiseXOR",
  "sec-resolve-private-identifier" : "ResolvePrivateIdentifier",
  "sec-isregexp" : "IsRegExp",
  "sec-module-namespace-exotic-objects-get-p-receiver" : "[[Get]]",
  "sec-global-environment-records-hassuperbinding" : "HasSuperBinding",
  "sec-numeric-types-number-remainder" : "Number::remainder",
  "sec-settypedarrayfromtypedarray" : "SetTypedArrayFromTypedArray",
  "sec-numeric-types-number-sameValue" : "Number::sameValue",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|LexicalDeclaration|Expression|;|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( LexicalDeclaration Expression ; ) Statement",
  "sec-static-semantics-assignmenttargettype|UnaryExpression|!|UnaryExpression" : "[AssignmentTargetType] UnaryExpression : ! UnaryExpression",
  "sec-static-semantics-maycontainstrings|ClassUnion|ClassSetOperand|ClassUnion" : "[MayContainStrings] ClassUnion : ClassSetOperand ClassUnion",
  "sec-static-semantics-containsarguments|AsyncFunctionExpression|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[ContainsArguments] AsyncFunctionExpression : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-regular-expression-literals-runtime-semantics-evaluation|PrimaryExpression|RegularExpressionLiteral" : "[Evaluation] PrimaryExpression : RegularExpressionLiteral",
  "sec-static-semantics-assignmenttargettype|UnaryExpression|AwaitExpression" : "[AssignmentTargetType] UnaryExpression : AwaitExpression",
  "sec-object.freeze" : "Object.freeze",
  "sec-static-semantics-hasname|FunctionExpression|function|(|FormalParameters|)|{|FunctionBody|}" : "[HasName] FunctionExpression : function ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-functionbodycontainsusestrict|FunctionBody|FunctionStatementList" : "[FunctionBodyContainsUseStrict] FunctionBody : FunctionStatementList",
  "sec-class-definitions-runtime-semantics-evaluation|ClassExpression|class|BindingIdentifier|ClassTail" : "[Evaluation] ClassExpression : class BindingIdentifier ClassTail",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|)|Statement" : "[VarDeclaredNames] ForStatement : for ( var VariableDeclarationList ; Expression ; ) Statement",
  "sec-static-semantics-containsundefinedcontinuetarget|ModuleItemList|ModuleItemList|ModuleItem" : "[ContainsUndefinedContinueTarget] ModuleItemList : ModuleItemList ModuleItem",
  "sec-runtime-semantics-propertydefinitionevaluation|PropertyDefinition|MethodDefinition" : "[PropertyDefinitionEvaluation] PropertyDefinition : MethodDefinition",
  "sec-static-semantics-toplevelvardeclarednames|LabelledItem|Statement" : "[TopLevelVarDeclaredNames] LabelledItem : Statement",
  "sec-static-semantics-assignmenttargettype|UpdateExpression|++|UnaryExpression" : "[AssignmentTargetType] UpdateExpression : ++ UnaryExpression",
  "sec-static-semantics-contains|AsyncFunctionExpression|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[Contains] AsyncFunctionExpression : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-%typedarray%.prototype.findlast" : "TypedArray.prototype.findLast",
  "sec-toprimitive" : "ToPrimitive",
  "sec-static-semantics-isfunctiondefinition|UnaryExpression|delete|UnaryExpression" : "[IsFunctionDefinition] UnaryExpression : delete UnaryExpression",
  "sec-static-semantics-hascallintailposition|UnaryExpression|delete|UnaryExpression" : "[HasCallInTailPosition] UnaryExpression : delete UnaryExpression",
  "sec-isstrictlyequal" : "IsStrictlyEqual",
  "sec-runtime-semantics-caseblockevaluation|CaseBlock|{|CaseClauses|}" : "[CaseBlockEvaluation] CaseBlock : { CaseClauses }",
  "sec-static-semantics-varscopeddeclarations|DoWhileStatement|do|Statement|while|(|Expression|)|;" : "[VarScopedDeclarations] DoWhileStatement : do Statement while ( Expression ) ;",
  "sec-typedarray" : "_TypedArray_",
  "sec-ordinaryhasinstance" : "OrdinaryHasInstance",
  "sec-static-semantics-maycontainstrings|ClassIntersection|ClassIntersection|&&|ClassSetOperand" : "[MayContainStrings] ClassIntersection : ClassIntersection && ClassSetOperand",
  "sec-isconcatspreadable" : "IsConcatSpreadable",
  "sec-static-semantics-containsundefinedbreaktarget|CaseClause|case|Expression|:" : "[ContainsUndefinedBreakTarget] CaseClause : case Expression :",
  "sec-allcharacters" : "AllCharacters",
  "sec-array.prototype.slice" : "Array.prototype.slice",
  "sec-static-semantics-varscopeddeclarations|ForInOfStatement|for|await|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[VarScopedDeclarations] ForInOfStatement : for await ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-static-semantics-hasname|GeneratorExpression|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[HasName] GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-regexp.prototype-@@replace" : "RegExp.prototype[@@replace]",
  "sec-math.trunc" : "Math.trunc",
  "sec-static-semantics-modulerequests|ExportDeclaration|export|default|ClassDeclaration" : "[ModuleRequests] ExportDeclaration : export default ClassDeclaration",
  "sec-runtime-semantics-labelledevaluation|BreakableStatement|SwitchStatement" : "[LabelledEvaluation] BreakableStatement : SwitchStatement",
  "sec-runtime-semantics-instantiatearrowfunctionexpression|ArrowFunction|ArrowParameters|=>|ConciseBody" : "[InstantiateArrowFunctionExpression] ArrowFunction : ArrowParameters => ConciseBody",
  "sec-static-semantics-specialmethod|MethodDefinition|set|ClassElementName|(|PropertySetParameterList|)|{|FunctionBody|}" : "[SpecialMethod] MethodDefinition : set ClassElementName ( PropertySetParameterList ) { FunctionBody }",
  "sec-setvalueinbuffer" : "SetValueInBuffer",
  "sec-initializeinstanceelements" : "InitializeInstanceElements",
  "sec-array.prototype.entries" : "Array.prototype.entries",
  "sec-static-semantics-hascallintailposition|IfStatement|if|(|Expression|)|Statement" : "[HasCallInTailPosition] IfStatement : if ( Expression ) Statement",
  "sec-static-semantics-hascallintailposition|EqualityExpression|EqualityExpression|!==|RelationalExpression" : "[HasCallInTailPosition] EqualityExpression : EqualityExpression !== RelationalExpression",
  "sec-isunclampedintegerelementtype" : "IsUnclampedIntegerElementType",
  "sec-static-semantics-hascallintailposition|DoWhileStatement|do|Statement|while|(|Expression|)|;" : "[HasCallInTailPosition] DoWhileStatement : do Statement while ( Expression ) ;",
  "sec-array.prototype.tospliced" : "Array.prototype.toSpliced",
  "sec-enumerate-object-properties" : "EnumerateObjectProperties",
  "sec-variable-statement-runtime-semantics-evaluation|VariableDeclaration|BindingIdentifier|Initializer" : "[Evaluation] VariableDeclaration : BindingIdentifier Initializer",
  "sec-static-semantics-containsundefinedcontinuetarget|CaseBlock|{|CaseClauses|DefaultClause|}" : "[ContainsUndefinedContinueTarget] CaseBlock : { CaseClauses DefaultClause }",
  "sec-ecmascript-function-objects-call-thisargument-argumentslist" : "[[Call]]",
  "sec-static-semantics-containsduplicatelabels|Statement|ContinueStatement" : "[ContainsDuplicateLabels] Statement : ContinueStatement",
  "sec-atomics.or" : "Atomics.or",
  "sec-newpromisereactionjob" : "NewPromiseReactionJob",
  "sec-iteratorcomplete" : "IteratorComplete",
  "sec-array.prototype.push" : "Array.prototype.push",
  "sec-static-semantics-containsduplicatelabels|ForInOfStatement|for|(|ForDeclaration|in|Expression|)|Statement" : "[ContainsDuplicateLabels] ForInOfStatement : for ( ForDeclaration in Expression ) Statement",
  "sec-static-semantics-containsundefinedbreaktarget|ForInOfStatement|for|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedBreakTarget] ForInOfStatement : for ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-array.prototype.at" : "Array.prototype.at",
  "sec-thisbooleanvalue" : "ThisBooleanValue",
  "sec-static-semantics-classelementevaluation|ClassElement|;" : "[ClassElementEvaluation] ClassElement : ;",
  "sec-hostmakejobcallback" : "HostMakeJobCallback",
  "sec-%typedarray%.prototype.tosorted" : "TypedArray.prototype.toSorted",
  "sec-static-semantics-hascallintailposition|MultiplicativeExpression|MultiplicativeExpression|MultiplicativeOperator|ExponentiationExpression" : "[HasCallInTailPosition] MultiplicativeExpression : MultiplicativeExpression MultiplicativeOperator ExponentiationExpression",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|var|VariableDeclarationList|;|;|Expression|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( var VariableDeclarationList ; ; Expression ) Statement",
  "sec-static-semantics-varscopeddeclarations|DefaultClause|default|:" : "[VarScopedDeclarations] DefaultClause : default :",
  "sec-static-semantics-nonconstructorelements|ClassElementList|ClassElementList|ClassElement" : "[NonConstructorElements] ClassElementList : ClassElementList ClassElement",
  "sec-static-semantics-isdestructuring|LeftHandSideExpression|OptionalExpression" : "[IsDestructuring] LeftHandSideExpression : OptionalExpression",
  "sec-object.prototype.hasownproperty" : "Object.prototype.hasOwnProperty",
  "sec-runtime-semantics-keyeddestructuringassignmentevaluation|AssignmentElement|DestructuringAssignmentTarget" : "[KeyedDestructuringAssignmentEvaluation] AssignmentElement : DestructuringAssignmentTarget",
  "sec-property-accessors-runtime-semantics-evaluation|MemberExpression|MemberExpression|[|Expression|]" : "[Evaluation] MemberExpression : MemberExpression [ Expression ]",
  "sec-static-semantics-lexicallydeclarednames|ModuleItemList|ModuleItemList|ModuleItem" : "[LexicallyDeclaredNames] ModuleItemList : ModuleItemList ModuleItem",
  "sec-date.prototype.getmilliseconds" : "Date.prototype.getMilliseconds",
  "sec-static-semantics-containsundefinedbreaktarget|ForInOfStatement|for|await|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedBreakTarget] ForInOfStatement : for await ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-static-semantics-hascallintailposition|ShiftExpression|ShiftExpression|>>|AdditiveExpression" : "[HasCallInTailPosition] ShiftExpression : ShiftExpression >> AdditiveExpression",
  "sec-static-semantics-lexicallyscopeddeclarations|ClassStaticBlockStatementList|StatementList" : "[LexicallyScopedDeclarations] ClassStaticBlockStatementList : StatementList",
  "sec-static-semantics-maycontainstrings|ClassContents|NonemptyClassRanges" : "[MayContainStrings] ClassContents : NonemptyClassRanges",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|LexicalDeclaration|;|Expression|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( LexicalDeclaration ; Expression ) Statement",
  "sec-numericvalue|NumericLiteral|DecimalLiteral" : "[NumericValue] NumericLiteral : DecimalLiteral",
  "sec-static-semantics-hascallintailposition|MemberExpression|new|MemberExpression|Arguments" : "[HasCallInTailPosition] MemberExpression : new MemberExpression Arguments",
  "sec-runtime-semantics-arrayaccumulation|ElementList|ElementList|,|Elision|AssignmentExpression" : "[ArrayAccumulation] ElementList : ElementList , Elision AssignmentExpression",
  "sec-module-environment-records-getthisbinding" : "GetThisBinding",
  "sec-reflect.defineproperty" : "Reflect.defineProperty",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|Expression|;|;|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( Expression ; ; ) Statement",
  "sec-identifiercodepoints|IdentifierName|IdentifierName|IdentifierPart" : "[IdentifierCodePoints] IdentifierName : IdentifierName IdentifierPart",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|;|Expression|;|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( ; Expression ; ) Statement",
  "sec-math.log1p" : "Math.log1p",
  "sec-string.prototype.replaceall" : "String.prototype.replaceAll",
  "sec-static-semantics-hascallintailposition|AssignmentExpression|LeftHandSideExpression|&&=|AssignmentExpression" : "[HasCallInTailPosition] AssignmentExpression : LeftHandSideExpression &&= AssignmentExpression",
  "sec-static-semantics-importentries|ModuleItem|StatementListItem" : "[ImportEntries] ModuleItem : StatementListItem",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|;|Expression|;|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( ; Expression ; Expression ) Statement",
  "sec-isextensible-o" : "IsExtensible",
  "sec-array-initializer-runtime-semantics-evaluation|ArrayLiteral|[|ElementList|,|Elision|]" : "[Evaluation] ArrayLiteral : [ ElementList , Elision ]",
  "sec-static-semantics-privateboundidentifiers|ClassElement|ClassStaticBlock" : "[PrivateBoundIdentifiers] ClassElement : ClassStaticBlock",
  "sec-atomics.xor" : "Atomics.xor",
  "sec-static-semantics-containsundefinedcontinuetarget|ContinueStatement|continue|LabelIdentifier|;" : "[ContainsUndefinedContinueTarget] ContinueStatement : continue LabelIdentifier ;",
  "sec-runtime-semantics-evaluatebody|AsyncGeneratorBody|FunctionBody" : "[EvaluateBody] AsyncGeneratorBody : FunctionBody",
  "sec-let-and-const-declarations-runtime-semantics-evaluation|BindingList|BindingList|,|LexicalBinding" : "[Evaluation] BindingList : BindingList , LexicalBinding",
  "sec-patterns-static-semantics-character-value|RegExpUnicodeEscapeSequence|u{|CodePoint|}" : "[CharacterValue] RegExpUnicodeEscapeSequence : u{ CodePoint }",
  "sec-compileassertion|Assertion|(?=|Disjunction|)" : "[CompileAssertion] Assertion : (?= Disjunction )",
  "sec-static-semantics-isidentifierref|NewExpression|new|NewExpression" : "[IsIdentifierRef] NewExpression : new NewExpression",
  "sec-static-semantics-vardeclarednames|CaseClauses|CaseClauses|CaseClause" : "[VarDeclaredNames] CaseClauses : CaseClauses CaseClause",
  "sec-numericvalue|NumericLiteral|NonDecimalIntegerLiteral|BigIntLiteralSuffix" : "[NumericValue] NumericLiteral : NonDecimalIntegerLiteral BigIntLiteralSuffix",
  "sec-systemtimezoneidentifier" : "SystemTimeZoneIdentifier",
  "sec-property-accessors-runtime-semantics-evaluation|CallExpression|CallExpression|.|PrivateIdentifier" : "[Evaluation] CallExpression : CallExpression . PrivateIdentifier",
  "sec-static-semantics-expectedargumentcount|AsyncArrowBindingIdentifier|BindingIdentifier" : "[ExpectedArgumentCount] AsyncArrowBindingIdentifier : BindingIdentifier",
  "sec-compileatom|Atom|(?:|Disjunction|)" : "[CompileAtom] Atom : (?: Disjunction )",
  "sec-static-semantics-vardeclarednames|ClassStaticBlockStatementList|StatementList" : "[VarDeclaredNames] ClassStaticBlockStatementList : StatementList",
  "sec-static-semantics-exportedbindings|ExportDeclaration|export|ExportFromClause|FromClause|;" : "[ExportedBindings] ExportDeclaration : export ExportFromClause FromClause ;",
  "sec-object.fromentries" : "Object.fromEntries",
  "sec-generator-function-definitions-runtime-semantics-evaluation|YieldExpression|yield|AssignmentExpression" : "[Evaluation] YieldExpression : yield AssignmentExpression",
  "sec-optional-chaining-evaluation|OptionalExpression|OptionalExpression|OptionalChain" : "[Evaluation] OptionalExpression : OptionalExpression OptionalChain",
  "sec-static-semantics-hasname|ClassExpression|class|BindingIdentifier|ClassTail" : "[HasName] ClassExpression : class BindingIdentifier ClassTail",
  "sec-static-semantics-vardeclarednames|Catch|catch|(|CatchParameter|)|Block" : "[VarDeclaredNames] Catch : catch ( CatchParameter ) Block",
  "sec-static-semantics-varscopeddeclarations|Statement|ContinueStatement" : "[VarScopedDeclarations] Statement : ContinueStatement",
  "sec-map.prototype.set" : "Map.prototype.set",
  "sec-static-semantics-assignmenttargettype|UnaryExpression|-|UnaryExpression" : "[AssignmentTargetType] UnaryExpression : - UnaryExpression",
  "sec-static-semantics-lexicallyscopeddeclarations|CaseClause|case|Expression|:|StatementList" : "[LexicallyScopedDeclarations] CaseClause : case Expression : StatementList",
  "sec-compiletocharset|ClassAtom|-" : "[CompileToCharSet] ClassAtom : -",
  "sec-makedataviewwithbufferwitnessrecord" : "MakeDataViewWithBufferWitnessRecord",
  "sec-arrayspeciescreate" : "ArraySpeciesCreate",
  "sec-math.cos" : "Math.cos",
  "sec-function-environment-records-hassuperbinding" : "HasSuperBinding",
  "sec-serializejsonobject" : "SerializeJSONObject",
  "sec-module-namespace-exotic-objects-getownproperty-p" : "[[GetOwnProperty]]",
  "sec-static-semantics-lexicallydeclarednames|StatementList|StatementList|StatementListItem" : "[LexicallyDeclaredNames] StatementList : StatementList StatementListItem",
  "sec-runtime-semantics-whileloopevaluation|WhileStatement|while|(|Expression|)|Statement" : "[WhileLoopEvaluation] WhileStatement : while ( Expression ) Statement",
  "sec-arraysetlength" : "ArraySetLength",
  "sec-static-semantics-containsundefinedbreaktarget|TryStatement|try|Block|Catch" : "[ContainsUndefinedBreakTarget] TryStatement : try Block Catch",
  "sec-static-semantics-exportentries|ExportDeclaration|export|default|HoistableDeclaration" : "[ExportEntries] ExportDeclaration : export default HoistableDeclaration",
  "sec-newmoduleenvironment" : "NewModuleEnvironment",
  "sec-runtime-semantics-iteratorbindinginitialization|BindingElement|BindingPattern" : "[IteratorBindingInitialization] BindingElement : BindingPattern",
  "sec-static-semantics-assignmenttargettype|BitwiseORExpression|BitwiseORExpression|||BitwiseXORExpression" : "[AssignmentTargetType] BitwiseORExpression : BitwiseORExpression | BitwiseXORExpression",
  "sec-add-entries-from-iterable" : "AddEntriesFromIterable",
  "sec-static-semantics-isidentifierref|PrimaryExpression|FunctionExpression" : "[IsIdentifierRef] PrimaryExpression : FunctionExpression",
  "sec-static-semantics-isfunctiondefinition|UpdateExpression|--|UnaryExpression" : "[IsFunctionDefinition] UpdateExpression : -- UnaryExpression",
  "sec-static-semantics-hascallintailposition|DefaultClause|default|:" : "[HasCallInTailPosition] DefaultClause : default :",
  "sec-global-environment-records-getthisbinding" : "GetThisBinding",
  "sec-dataview.prototype.setbiguint64" : "DataView.prototype.setBigUint64",
  "sec-compilepattern|Pattern|Disjunction" : "[CompilePattern] Pattern : Disjunction",
  "sec-numeric-types-bigint-bitwiseAND" : "BigInt::bitwiseAND",
  "sec-date.prototype.getutchours" : "Date.prototype.getUTCHours",
  "sec-asynciteratorclose" : "AsyncIteratorClose",
  "sec-static-semantics-vardeclarednames|ForInOfStatement|for|await|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[VarDeclaredNames] ForInOfStatement : for await ( var ForBinding of AssignmentExpression ) Statement",
  "sec-static-semantics-hascallintailposition|EqualityExpression|EqualityExpression|===|RelationalExpression" : "[HasCallInTailPosition] EqualityExpression : EqualityExpression === RelationalExpression",
  "sec-static-semantics-containsundefinedbreaktarget|Statement|EmptyStatement" : "[ContainsUndefinedBreakTarget] Statement : EmptyStatement",
  "sec-makematchindicesindexpairarray" : "MakeMatchIndicesIndexPairArray",
  "sec-date.prototype.setutcmilliseconds" : "Date.prototype.setUTCMilliseconds",
  "sec-promise.allsettled-reject-element-functions" : "yet:`Promise.allSettled`RejectElementFunction",
  "sec-%typedarray%.prototype.findlastindex" : "TypedArray.prototype.findLastIndex",
  "sec-runtime-semantics-instantiatefunctionobject|FunctionDeclaration|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[InstantiateFunctionObject] FunctionDeclaration : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-date.prototype.todatestring" : "Date.prototype.toDateString",
  "sec-get-regexp.prototype.multiline" : "get RegExp.prototype.multiline",
  "sec-labelled-statements-runtime-semantics-evaluation|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[Evaluation] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-typedarraygetelement" : "TypedArrayGetElement",
  "sec-templatestring" : "TemplateString",
  "sec-equality-operators-runtime-semantics-evaluation|EqualityExpression|EqualityExpression|==|RelationalExpression" : "[Evaluation] EqualityExpression : EqualityExpression == RelationalExpression",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|Expression|;|Expression|;|Expression|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( Expression ; Expression ; Expression ) Statement",
  "sec-static-semantics-containsduplicatelabels|TryStatement|try|Block|Finally" : "[ContainsDuplicateLabels] TryStatement : try Block Finally",
  "sec-runtime-semantics-stringnumericvalue|StrUnsignedDecimalLiteral|DecimalDigits|.|ExponentPart" : "[StringNumericValue] StrUnsignedDecimalLiteral : DecimalDigits . ExponentPart",
  "sec-%typedarray%.prototype.reverse" : "TypedArray.prototype.reverse",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|var|VariableDeclarationList|;|;|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( var VariableDeclarationList ; ; ) Statement",
  "sec-makeday" : "MakeDay",
  "sec-array.prototype.unshift" : "Array.prototype.unshift",
  "sec-date.prototype.setutcminutes" : "Date.prototype.setUTCMinutes",
  "sec-static-semantics-privateboundidentifiers|GeneratorMethod|*|ClassElementName|(|UniqueFormalParameters|)|{|GeneratorBody|}" : "[PrivateBoundIdentifiers] GeneratorMethod : * ClassElementName ( UniqueFormalParameters ) { GeneratorBody }",
  "sec-sharedarraybuffer.prototype.slice" : "SharedArrayBuffer.prototype.slice",
  "sec-ordinarycallevaluatebody" : "OrdinaryCallEvaluateBody",
  "sec-static-semantics-exportentries|ExportDeclaration|export|default|ClassDeclaration" : "[ExportEntries] ExportDeclaration : export default ClassDeclaration",
  "sec-bytelistequal" : "ByteListEqual",
  "sec-static-semantics-hascallintailposition|OptionalChain|OptionalChain|.|IdentifierName" : "[HasCallInTailPosition] OptionalChain : OptionalChain . IdentifierName",
  "sec-static-semantics-assignmenttargettype|BitwiseXORExpression|BitwiseXORExpression|^|BitwiseANDExpression" : "[AssignmentTargetType] BitwiseXORExpression : BitwiseXORExpression ^ BitwiseANDExpression",
  "sec-object.assign" : "Object.assign",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|LexicalDeclaration|Expression|;|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( LexicalDeclaration Expression ; Expression ) Statement",
  "sec-parsepattern" : "ParsePattern",
  "sec-static-semantics-boundnames|AsyncFunctionDeclaration|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[BoundNames] AsyncFunctionDeclaration : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-containsduplicatelabels|CaseBlock|{|DefaultClause|CaseClauses|}" : "[ContainsDuplicateLabels] CaseBlock : { DefaultClause CaseClauses }",
  "sec-static-semantics-isfunctiondefinition|UnaryExpression|void|UnaryExpression" : "[IsFunctionDefinition] UnaryExpression : void UnaryExpression",
  "sec-static-semantics-varscopeddeclarations|TryStatement|try|Block|Catch|Finally" : "[VarScopedDeclarations] TryStatement : try Block Catch Finally",
  "sec-static-semantics-boundnames|VariableDeclaration|BindingIdentifier|Initializer" : "[BoundNames] VariableDeclaration : BindingIdentifier Initializer",
  "sec-static-semantics-isfunctiondefinition|EqualityExpression|EqualityExpression|==|RelationalExpression" : "[IsFunctionDefinition] EqualityExpression : EqualityExpression == RelationalExpression",
  "sec-typedarrayelementsize" : "TypedArrayElementSize",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|Expression|;|;|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( Expression ; ; ) Statement",
  "sec-declarative-environment-records-initializebinding-n-v" : "InitializeBinding",
  "sec-enumerableownproperties" : "EnumerableOwnProperties",
  "sec-numeric-types-bigint-signedRightShift" : "BigInt::signedRightShift",
  "sec-static-semantics-containsundefinedcontinuetarget|BreakableStatement|IterationStatement" : "[ContainsUndefinedContinueTarget] BreakableStatement : IterationStatement",
  "sec-static-semantics-exportedbindings|ExportSpecifier|ModuleExportName" : "[ExportedBindings] ExportSpecifier : ModuleExportName",
  "sec-%typedarray%.prototype.keys" : "TypedArray.prototype.keys",
  "sec-static-semantics-expectedargumentcount|FormalParameterList|FormalParameterList|,|FormalParameter" : "[ExpectedArgumentCount] FormalParameterList : FormalParameterList , FormalParameter",
  "sec-runtime-semantics-arrayaccumulation|ElementList|AssignmentExpression" : "[ArrayAccumulation] ElementList : AssignmentExpression",
  "sec-static-semantics-asyncconcisebodycontainsusestrict|AsyncConciseBody|ExpressionBody" : "[AsyncConciseBodyContainsUseStrict] AsyncConciseBody : ExpressionBody",
  "sec-static-semantics-hasname|GeneratorExpression|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[HasName] GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-boundnames|NamedImports|{|}" : "[BoundNames] NamedImports : { }",
  "sec-math.acosh" : "Math.acosh",
  "sec-static-semantics-boundnames|BindingIdentifier|await" : "[BoundNames] BindingIdentifier : await",
  "sec-static-semantics-computedpropertycontains|MethodDefinition|get|ClassElementName|(|)|{|FunctionBody|}" : "[ComputedPropertyContains] MethodDefinition : get ClassElementName ( ) { FunctionBody }",
  "sec-literals-runtime-semantics-evaluation|Literal|StringLiteral" : "[Evaluation] Literal : StringLiteral",
  "sec-module-namespace-exotic-objects-set-p-v-receiver" : "[[Set]]",
  "sec-array.prototype.shift" : "Array.prototype.shift",
  "sec-static-semantics-assignmenttargettype|ShiftExpression|ShiftExpression|<<|AdditiveExpression" : "[AssignmentTargetType] ShiftExpression : ShiftExpression << AdditiveExpression",
  "sec-static-semantics-lexicallyscopeddeclarations|ExportDeclaration|export|Declaration" : "[LexicallyScopedDeclarations] ExportDeclaration : export Declaration",
  "sec-createimportbinding" : "CreateImportBinding",
  "sec-stringpaddingbuiltinsimpl" : "StringPaddingBuiltinsImpl",
  "sec-string.prototype.charat" : "String.prototype.charAt",
  "sec-object.getownpropertydescriptors" : "Object.getOwnPropertyDescriptors",
  "sec-map.prototype.foreach" : "Map.prototype.forEach",
  "sec-runtime-semantics-forinofloopevaluation|ForInOfStatement|for|(|var|ForBinding|in|Expression|)|Statement" : "[ForInOfLoopEvaluation] ForInOfStatement : for ( var ForBinding in Expression ) Statement",
  "sec-typedarray-delete" : "[[Delete]]",
  "sec-static-semantics-assignmenttargettype|AssignmentExpression|AsyncArrowFunction" : "[AssignmentTargetType] AssignmentExpression : AsyncArrowFunction",
  "sec-static-semantics-containsundefinedbreaktarget|ModuleItemList|ModuleItemList|ModuleItem" : "[ContainsUndefinedBreakTarget] ModuleItemList : ModuleItemList ModuleItem",
  "sec-promise.allsettled" : "Promise.allSettled",
  "sec-asyncgenerator-prototype-throw" : "AsyncGeneratorFunction.prototype.prototype.throw",
  "sec-static-semantics-boundnames|ClassDeclaration|class|BindingIdentifier|ClassTail" : "[BoundNames] ClassDeclaration : class BindingIdentifier ClassTail",
  "sec-get-arraybuffer.prototype.bytelength" : "get ArrayBuffer.prototype.byteLength",
  "sec-asyncgeneratorunwrapyieldresumption" : "AsyncGeneratorUnwrapYieldResumption",
  "sec-static-semantics-varscopeddeclarations|ModuleItemList|ModuleItemList|ModuleItem" : "[VarScopedDeclarations] ModuleItemList : ModuleItemList ModuleItem",
  "sec-isdatadescriptor" : "IsDataDescriptor",
  "sec-math.log10" : "Math.log10",
  "sec-static-semantics-privateboundidentifiers|FieldDefinition|ClassElementName" : "[PrivateBoundIdentifiers] FieldDefinition : ClassElementName",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|;|Expression|;|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( ; Expression ; Expression ) Statement",
  "sec-static-semantics-bodytext|RegularExpressionLiteral|/|RegularExpressionBody|/|RegularExpressionFlags" : "[BodyText] RegularExpressionLiteral : / RegularExpressionBody / RegularExpressionFlags",
  "sec-static-semantics-boundnames|SingleNameBinding|BindingIdentifier|Initializer" : "[BoundNames] SingleNameBinding : BindingIdentifier Initializer",
  "sec-static-semantics-hascallintailposition|Statement|ThrowStatement" : "[HasCallInTailPosition] Statement : ThrowStatement",
  "sec-allocatesharedarraybuffer" : "AllocateSharedArrayBuffer",
  "sec-getmatchstring" : "GetMatchString",
  "sec-static-semantics-hascallintailposition|Expression|AssignmentExpression" : "[HasCallInTailPosition] Expression : AssignmentExpression",
  "sec-runtime-semantics-argumentlistevaluation|TemplateLiteral|NoSubstitutionTemplate" : "[ArgumentListEvaluation] TemplateLiteral : NoSubstitutionTemplate",
  "sec-object-environment-records-createmutablebinding-n-d" : "CreateMutableBinding",
  "sec-static-semantics-hascallintailposition|AssignmentExpression|AsyncArrowFunction" : "[HasCallInTailPosition] AssignmentExpression : AsyncArrowFunction",
  "sec-getwaiterlist" : "GetWaiterList",
  "sec-logical-not-operator-runtime-semantics-evaluation|UnaryExpression|!|UnaryExpression" : "[Evaluation] UnaryExpression : ! UnaryExpression",
  "sec-enqueueresolveinagentjob" : "EnqueueResolveInAgentJob",
  "sec-touint8clamp" : "ToUint8Clamp",
  "sec-isnan-number" : "isNaN",
  "sec-regexpexec" : "RegExpExec",
  "sec-compiletocharset|ClassStringDisjunctionContents|ClassString" : "[CompileToCharSet] ClassStringDisjunctionContents : ClassString",
  "sec-static-semantics-containsexpression|ArrowParameters|BindingIdentifier" : "[ContainsExpression] ArrowParameters : BindingIdentifier",
  "sec-global-environment-records-createmutablebinding-n-d" : "CreateMutableBinding",
  "sec-math.acos" : "Math.acos",
  "sec-%typedarray%.prototype.map" : "TypedArray.prototype.map",
  "sec-runtime-semantics-iteratorbindinginitialization|FormalParameterList|FormalParameterList|,|FormalParameter" : "[IteratorBindingInitialization] FormalParameterList : FormalParameterList , FormalParameter",
  "sec-date.prototype.setutcmonth" : "Date.prototype.setUTCMonth",
  "sec-setfunctionlength" : "SetFunctionLength",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|;|Expression|;|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( ; Expression ; ) Statement",
  "sec-atomics.store" : "Atomics.store",
  "sec-static-semantics-hascallintailposition|AssignmentExpression|LeftHandSideExpression|??=|AssignmentExpression" : "[HasCallInTailPosition] AssignmentExpression : LeftHandSideExpression ??= AssignmentExpression",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|Expression|;|;|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( Expression ; ; ) Statement",
  "sec-runtime-semantics-arrayaccumulation|ElementList|ElementList|,|Elision|SpreadElement" : "[ArrayAccumulation] ElementList : ElementList , Elision SpreadElement",
  "sec-static-semantics-boundnames|BindingElement|BindingPattern|Initializer" : "[BoundNames] BindingElement : BindingPattern Initializer",
  "sec-getviewbytelength" : "GetViewByteLength",
  "sec-weakset.prototype.has" : "WeakSet.prototype.has",
  "sec-runtime-semantics-classdefinitionevaluation" : "ClassTail[0,3].ClassDefinitionEvaluation:clo0",
  "sec-static-semantics-issimpleparameterlist|BindingElement|BindingPattern|Initializer" : "[IsSimpleParameterList] BindingElement : BindingPattern Initializer",
  "sec-promise.race" : "Promise.race",
  "sec-static-semantics-declarationpart|HoistableDeclaration|AsyncFunctionDeclaration" : "[DeclarationPart] HoistableDeclaration : AsyncFunctionDeclaration",
  "sec-static-semantics-hascallintailposition|CallExpression|CallExpression|Arguments" : "[HasCallInTailPosition] CallExpression : CallExpression Arguments",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( var VariableDeclarationList ; Expression ; Expression ) Statement",
  "sec-%typedarray%.prototype.copywithin" : "TypedArray.prototype.copyWithin",
  "sec-runtime-semantics-repeatmatcher-abstract-operation" : "RepeatMatcher",
  "sec-thisstringvalue" : "ThisStringValue",
  "sec-newpromisecapability" : "NewPromiseCapability",
  "sec-global-environment-records-deletebinding-n" : "DeleteBinding",
  "sec-proxy.revocable" : "Proxy.revocable",
  "sec-runtime-semantics-stringnumericvalue|StrUnsignedDecimalLiteral|DecimalDigits|.|DecimalDigits" : "[StringNumericValue] StrUnsignedDecimalLiteral : DecimalDigits . DecimalDigits",
  "sec-evaluatecall" : "EvaluateCall",
  "sec-comparetypedarrayelements" : "CompareTypedArrayElements",
  "sec-static-semantics-hascallintailposition|CallExpression|CoverCallExpressionAndAsyncArrowHead" : "[HasCallInTailPosition] CallExpression : CoverCallExpressionAndAsyncArrowHead",
  "sec-groupby" : "GroupBy",
  "sec-serializejsonarray" : "SerializeJSONArray",
  "sec-static-semantics-toplevelvarscopeddeclarations|StatementListItem|Statement" : "[TopLevelVarScopedDeclarations] StatementListItem : Statement",
  "sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v" : "[[SetPrototypeOf]]",
  "sec-static-semantics-isstatic|ClassElement|;" : "[IsStatic] ClassElement : ;",
  "sec-static-semantics-allprivateidentifiersvalid|ClassBody|ClassElementList" : "[AllPrivateIdentifiersValid] ClassBody : ClassElementList",
  "sec-object.hasown" : "Object.hasOwn",
  "sec-static-semantics-specialmethod|MethodDefinition|ClassElementName|(|UniqueFormalParameters|)|{|FunctionBody|}" : "[SpecialMethod] MethodDefinition : ClassElementName ( UniqueFormalParameters ) { FunctionBody }",
  "sec-static-semantics-containsduplicatelabels|ForInOfStatement|for|await|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[ContainsDuplicateLabels] ForInOfStatement : for await ( var ForBinding of AssignmentExpression ) Statement",
  "sec-lengthofarraylike" : "LengthOfArrayLike",
  "sec-LoadRequestedModules" : "LoadRequestedModules",
  "sec-get-object.prototype.__proto__" : "get Object.prototype.__proto__",
  "sec-createdynamicfunction" : "CreateDynamicFunction",
  "sec-static-semantics-containsexpression|ObjectBindingPattern|{|}" : "[ContainsExpression] ObjectBindingPattern : { }",
  "sec-async-arrow-function-definitions-runtime-semantics-evaluation|AsyncArrowFunction|async|AsyncArrowBindingIdentifier|=>|AsyncConciseBody" : "[Evaluation] AsyncArrowFunction : async AsyncArrowBindingIdentifier => AsyncConciseBody",
  "sec-runtime-semantics-instantiateordinaryfunctionobject|FunctionDeclaration|function|(|FormalParameters|)|{|FunctionBody|}" : "[InstantiateOrdinaryFunctionObject] FunctionDeclaration : function ( FormalParameters ) { FunctionBody }",
  "sec-atomics.wait" : "Atomics.wait",
  "sec-runtime-semantics-arrayaccumulation|Elision|Elision|," : "[ArrayAccumulation] Elision : Elision ,",
  "sec-static-semantics-assignmenttargettype|NewTarget|new|.|target" : "[AssignmentTargetType] NewTarget : new . target",
  "sec-static-semantics-containsarguments|AsyncGeneratorExpression|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[ContainsArguments] AsyncGeneratorExpression : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-isnotearconfiguration" : "IsNoTearConfiguration",
  "sec-static-semantics-assignmenttargettype|MemberExpression|MemberExpression|.|IdentifierName" : "[AssignmentTargetType] MemberExpression : MemberExpression . IdentifierName",
  "sec-static-semantics-vardeclarednames|DefaultClause|default|:|StatementList" : "[VarDeclaredNames] DefaultClause : default : StatementList",
  "sec-static-semantics-boundnames|ExportDeclaration|export|NamedExports|;" : "[BoundNames] ExportDeclaration : export NamedExports ;",
  "sec-postfix-increment-operator-runtime-semantics-evaluation|UpdateExpression|LeftHandSideExpression|++" : "[Evaluation] UpdateExpression : LeftHandSideExpression ++",
  "sec-static-semantics-hasname|AsyncFunctionExpression|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[HasName] AsyncFunctionExpression : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-runtime-semantics-evaluatebody|ClassStaticBlockBody|ClassStaticBlockStatementList" : "[EvaluateBody] ClassStaticBlockBody : ClassStaticBlockStatementList",
  "sec-promise.resolve" : "Promise.resolve",
  "sec-static-semantics-templatestrings|TemplateSpans|TemplateTail" : "[TemplateStrings] TemplateSpans : TemplateTail",
  "sec-declarative-environment-records-withbaseobject" : "WithBaseObject",
  "sec-static-semantics-exportednames|ExportSpecifier|ModuleExportName|as|ModuleExportName" : "[ExportedNames] ExportSpecifier : ModuleExportName as ModuleExportName",
  "sec-static-semantics-exportednames|ModuleItem|StatementListItem" : "[ExportedNames] ModuleItem : StatementListItem",
  "sec-runtime-semantics-iteratorbindinginitialization|FormalParameters" : "[IteratorBindingInitialization] FormalParameters :",
  "sec-typedarray-defineownproperty" : "[[DefineOwnProperty]]",
  "sec-static-semantics-varscopeddeclarations|AsyncConciseBody|ExpressionBody" : "[VarScopedDeclarations] AsyncConciseBody : ExpressionBody",
  "sec-initializehostdefinedrealm" : "InitializeHostDefinedRealm",
  "sec-try-statement-runtime-semantics-evaluation|TryStatement|try|Block|Catch" : "[Evaluation] TryStatement : try Block Catch",
  "sec-template-literals-runtime-semantics-evaluation|TemplateSpans|TemplateTail" : "[Evaluation] TemplateSpans : TemplateTail",
  "sec-patterns-static-semantics-character-value|ClassEscape|-" : "[CharacterValue] ClassEscape : -",
  "sec-static-semantics-containsexpression|AsyncArrowBindingIdentifier|BindingIdentifier" : "[ContainsExpression] AsyncArrowBindingIdentifier : BindingIdentifier",
  "sec-typedarraycreatefromconstructor" : "TypedArrayCreateFromConstructor",
  "sec-regexp.prototype.test" : "RegExp.prototype.test",
  "sec-runtime-semantics-iteratordestructuringassignmentevaluation|AssignmentElementList|AssignmentElisionElement" : "[IteratorDestructuringAssignmentEvaluation] AssignmentElementList : AssignmentElisionElement",
  "sec-variable-statement-runtime-semantics-evaluation|VariableStatement|var|VariableDeclarationList|;" : "[Evaluation] VariableStatement : var VariableDeclarationList ;",
  "sec-static-semantics-containsundefinedcontinuetarget|StatementList|StatementList|StatementListItem" : "[ContainsUndefinedContinueTarget] StatementList : StatementList StatementListItem",
  "sec-try-statement-runtime-semantics-evaluation|TryStatement|try|Block|Finally" : "[Evaluation] TryStatement : try Block Finally",
  "sec-static-semantics-assignmenttargettype|CallExpression|SuperCall" : "[AssignmentTargetType] CallExpression : SuperCall",
  "sec-static-semantics-issimpleparameterlist|FormalParameter|BindingElement" : "[IsSimpleParameterList] FormalParameter : BindingElement",
  "sec-static-semantics-lexicallydeclarednames|CaseBlock|{|CaseClauses|DefaultClause|CaseClauses|}" : "[LexicallyDeclaredNames] CaseBlock : { CaseClauses DefaultClause CaseClauses }",
  "sec-setdefaultglobalbindings" : "SetDefaultGlobalBindings",
  "sec-generatorresume" : "GeneratorResume",
  "sec-static-semantics-isfunctiondefinition|PrimaryExpression|CoverParenthesizedExpressionAndArrowParameterList" : "[IsFunctionDefinition] PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-asyncgeneratorvalidate" : "AsyncGeneratorValidate",
  "sec-typedarrayelementtype" : "TypedArrayElementType",
  "sec-static-semantics-modulerequests|ModuleItemList|ModuleItem" : "[ModuleRequests] ModuleItemList : ModuleItem",
  "sec-binary-logical-operators-runtime-semantics-evaluation|LogicalANDExpression|LogicalANDExpression|&&|BitwiseORExpression" : "[Evaluation] LogicalANDExpression : LogicalANDExpression && BitwiseORExpression",
  "sec-array.prototype.values" : "Array.prototype.values",
  "sec-dataview.prototype.setfloat32" : "DataView.prototype.setFloat32",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|Expression|;|;|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( Expression ; ; ) Statement",
  "sec-runtime-semantics-propertydestructuringassignmentevaluation|AssignmentPropertyList|AssignmentPropertyList|,|AssignmentProperty" : "[PropertyDestructuringAssignmentEvaluation] AssignmentPropertyList : AssignmentPropertyList , AssignmentProperty",
  "sec-static-semantics-contains|AsyncFunctionDeclaration|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[Contains] AsyncFunctionDeclaration : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-timestring" : "TimeString",
  "sec-static-semantics-isfunctiondefinition|AssignmentExpression|LeftHandSideExpression|AssignmentOperator|AssignmentExpression" : "[IsFunctionDefinition] AssignmentExpression : LeftHandSideExpression AssignmentOperator AssignmentExpression",
  "sec-exports-runtime-semantics-evaluation|ExportDeclaration|export|default|HoistableDeclaration" : "[Evaluation] ExportDeclaration : export default HoistableDeclaration",
  "sec-static-semantics-containsarguments|MethodDefinition|ClassElementName|(|UniqueFormalParameters|)|{|FunctionBody|}" : "[ContainsArguments] MethodDefinition : ClassElementName ( UniqueFormalParameters ) { FunctionBody }",
  "sec-static-semantics-constructormethod|ClassElementList|ClassElementList|ClassElement" : "[ConstructorMethod] ClassElementList : ClassElementList ClassElement",
  "sec-symbol.prototype-@@toprimitive" : "Symbol.prototype[@@toPrimitive]",
  "sec-static-semantics-assignmenttargettype|ShiftExpression|ShiftExpression|>>|AdditiveExpression" : "[AssignmentTargetType] ShiftExpression : ShiftExpression >> AdditiveExpression",
  "sec-string.prototype.replace" : "String.prototype.replace",
  "sec-declarative-environment-records-deletebinding-n" : "DeleteBinding",
  "sec-codepointstostring" : "CodePointsToString",
  "sec-runtime-semantics-propertydefinitionevaluation|PropertyDefinition|...|AssignmentExpression" : "[PropertyDefinitionEvaluation] PropertyDefinition : ... AssignmentExpression",
  "sec-static-semantics-hascallintailposition|FunctionStatementList" : "[HasCallInTailPosition] FunctionStatementList :",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|TemplateLiteral" : "[AssignmentTargetType] PrimaryExpression : TemplateLiteral",
  "sec-static-semantics-exportedbindings|ExportDeclaration|export|Declaration" : "[ExportedBindings] ExportDeclaration : export Declaration",
  "sec-static-semantics-boundnames|BindingList|BindingList|,|LexicalBinding" : "[BoundNames] BindingList : BindingList , LexicalBinding",
  "sec-compiletocharset|NonemptyClassRanges|ClassAtom|NonemptyClassRangesNoDash" : "[CompileToCharSet] NonemptyClassRanges : ClassAtom NonemptyClassRangesNoDash",
  "sec-newpromiseresolvethenablejob" : "NewPromiseResolveThenableJob",
  "sec-switch-statement-runtime-semantics-evaluation|DefaultClause|default|:|StatementList" : "[Evaluation] DefaultClause : default : StatementList",
  "sec-promise.prototype.catch" : "Promise.prototype.catch",
  "sec-function.prototype.call" : "Function.prototype.call",
  "sec-assignment-operators-runtime-semantics-evaluation|AssignmentExpression|LeftHandSideExpression|??=|AssignmentExpression" : "[Evaluation] AssignmentExpression : LeftHandSideExpression ??= AssignmentExpression",
  "sec-promise.prototype.finally" : "Promise.prototype.finally",
  "sec-atomics.notify" : "Atomics.notify",
  "sec-static-semantics-maycontainstrings|ClassString|NonEmptyClassString" : "[MayContainStrings] ClassString : NonEmptyClassString",
  "sec-regexpcreate" : "RegExpCreate",
  "sec-static-semantics-containsduplicatelabels|LabelledItem|FunctionDeclaration" : "[ContainsDuplicateLabels] LabelledItem : FunctionDeclaration",
  "sec-compileassertion|Assertion|(?<!|Disjunction|)" : "[CompileAssertion] Assertion : (?<! Disjunction )",
  "sec-static-semantics-containsundefinedbreaktarget|ModuleItem|ExportDeclaration" : "[ContainsUndefinedBreakTarget] ModuleItem : ExportDeclaration",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|;|;|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( ; ; Expression ) Statement",
  "sec-runtime-semantics-labelledevaluation|Statement|WithStatement" : "[LabelledEvaluation] Statement : WithStatement",
  "sec-typedarray-create-same-type" : "TypedArrayCreateSameType",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|LexicalDeclaration|;|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( LexicalDeclaration ; ) Statement",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|var|VariableDeclarationList|;|;|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( var VariableDeclarationList ; ; ) Statement",
  "sec-getsuperbase" : "GetSuperBase",
  "sec-runtime-semantics-iteratorbindinginitialization|ArrowParameters|CoverParenthesizedExpressionAndArrowParameterList" : "[IteratorBindingInitialization] ArrowParameters : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-static-semantics-modulerequests|ExportDeclaration|export|default|AssignmentExpression|;" : "[ModuleRequests] ExportDeclaration : export default AssignmentExpression ;",
  "sec-runtime-semantics-iteratorbindinginitialization|ArrayBindingPattern|[|Elision|]" : "[IteratorBindingInitialization] ArrayBindingPattern : [ Elision ]",
  "sec-static-semantics-containsundefinedcontinuetarget|ForInOfStatement|for|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedContinueTarget] ForInOfStatement : for ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-static-semantics-isfunctiondefinition|FunctionExpression|function|(|FormalParameters|)|{|FunctionBody|}" : "[IsFunctionDefinition] FunctionExpression : function ( FormalParameters ) { FunctionBody }",
  "sec-patterns-static-semantics-character-value|ClassAtom|-" : "[CharacterValue] ClassAtom : -",
  "sec-getprototypefromconstructor" : "GetPrototypeFromConstructor",
  "sec-proxycreate" : "ProxyCreate",
  "sec-finalization-registry-cleanup-callback" : "FinalizationRegistry",
  "sec-static-semantics-boundnames|ForDeclaration|LetOrConst|ForBinding" : "[BoundNames] ForDeclaration : LetOrConst ForBinding",
  "sec-date.prototype-@@toprimitive" : "Date.prototype[@@toPrimitive]",
  "sec-static-semantics-containsundefinedcontinuetarget|ModuleItem|ExportDeclaration" : "[ContainsUndefinedContinueTarget] ModuleItem : ExportDeclaration",
  "sec-static-semantics-hascallintailposition|ForInOfStatement|for|(|LeftHandSideExpression|in|Expression|)|Statement" : "[HasCallInTailPosition] ForInOfStatement : for ( LeftHandSideExpression in Expression ) Statement",
  "sec-static-semantics-containsundefinedbreaktarget|DoWhileStatement|do|Statement|while|(|Expression|)|;" : "[ContainsUndefinedBreakTarget] DoWhileStatement : do Statement while ( Expression ) ;",
  "sec-map.prototype.get" : "Map.prototype.get",
  "sec-static-semantics-expectedargumentcount|ArrowParameters|CoverParenthesizedExpressionAndArrowParameterList" : "[ExpectedArgumentCount] ArrowParameters : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-static-semantics-stringvalue|BindingIdentifier|await" : "[StringValue] BindingIdentifier : await",
  "sec-static-semantics-maycontainstrings|UnicodePropertyValueExpression|UnicodePropertyName|=|UnicodePropertyValue" : "[MayContainStrings] UnicodePropertyValueExpression : UnicodePropertyName = UnicodePropertyValue",
  "sec-optional-chaining-evaluation|OptionalExpression|MemberExpression|OptionalChain" : "[Evaluation] OptionalExpression : MemberExpression OptionalChain",
  "sec-static-semantics-containsduplicatelabels|CaseClause|case|Expression|:|StatementList" : "[ContainsDuplicateLabels] CaseClause : case Expression : StatementList",
  "sec-static-semantics-boundnames|ArrayBindingPattern|[|BindingElementList|,|]" : "[BoundNames] ArrayBindingPattern : [ BindingElementList , ]",
  "sec-%typedarray%.prototype.every" : "TypedArray.prototype.every",
  "sec-numeric-types-number-lessThan" : "Number::lessThan",
  "sec-static-semantics-assignmenttargettype|EqualityExpression|EqualityExpression|===|RelationalExpression" : "[AssignmentTargetType] EqualityExpression : EqualityExpression === RelationalExpression",
  "sec-static-semantics-varscopeddeclarations|ForInOfStatement|for|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[VarScopedDeclarations] ForInOfStatement : for ( var ForBinding of AssignmentExpression ) Statement",
  "sec-runtime-semantics-namedevaluation|ParenthesizedExpression|(|Expression|)" : "[NamedEvaluation] ParenthesizedExpression : ( Expression )",
  "sec-static-semantics-boundnames|ExportDeclaration|export|default|AssignmentExpression|;" : "[BoundNames] ExportDeclaration : export default AssignmentExpression ;",
  "sec-static-semantics-boundnames|AsyncFunctionDeclaration|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[BoundNames] AsyncFunctionDeclaration : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-date.prototype.gettime" : "Date.prototype.getTime",
  "sec-static-semantics-isdestructuring|ForDeclaration|LetOrConst|ForBinding" : "[IsDestructuring] ForDeclaration : LetOrConst ForBinding",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|;|Expression|;|Expression|)|Statement" : "[VarDeclaredNames] ForStatement : for ( ; Expression ; Expression ) Statement",
  "sec-numeric-types-number-unsignedRightShift" : "Number::unsignedRightShift",
  "sec-symbol.for" : "Symbol.for",
  "sec-static-semantics-lexicallydeclarednames|AsyncConciseBody|ExpressionBody" : "[LexicallyDeclaredNames] AsyncConciseBody : ExpressionBody",
  "sec-static-semantics-isdestructuring|NewExpression|new|NewExpression" : "[IsDestructuring] NewExpression : new NewExpression",
  "sec-object-initializer-runtime-semantics-evaluation|LiteralPropertyName|IdentifierName" : "[Evaluation] LiteralPropertyName : IdentifierName",
  "sec-definemethodproperty" : "DefineMethodProperty",
  "sec-static-semantics-isfunctiondefinition|BitwiseORExpression|BitwiseORExpression|||BitwiseXORExpression" : "[IsFunctionDefinition] BitwiseORExpression : BitwiseORExpression | BitwiseXORExpression",
  "sec-static-semantics-asyncconcisebodycontainsusestrict|AsyncConciseBody|{|AsyncFunctionBody|}" : "[AsyncConciseBodyContainsUseStrict] AsyncConciseBody : { AsyncFunctionBody }",
  "sec-%setiteratorprototype%.next" : "SetIteratorPrototype.next",
  "typedarray-species-create" : "TypedArraySpeciesCreate",
  "sec-hourfromtime" : "HourFromTime",
  "sec-static-semantics-boundnames|SingleNameBinding|BindingIdentifier" : "[BoundNames] SingleNameBinding : BindingIdentifier",
  "sec-static-semantics-declarationpart|HoistableDeclaration|FunctionDeclaration" : "[DeclarationPart] HoistableDeclaration : FunctionDeclaration",
  "sec-generator-function-definitions-runtime-semantics-evaluation|YieldExpression|yield" : "[Evaluation] YieldExpression : yield",
  "sec-getrawbytesfromsharedblock" : "GetRawBytesFromSharedBlock",
  "sec-static-semantics-lexicallyscopeddeclarations|CaseBlock|{|DefaultClause|CaseClauses|}" : "[LexicallyScopedDeclarations] CaseBlock : { DefaultClause CaseClauses }",
  "sec-static-semantics-contains|ClassTail|{|ClassBody|}" : "[Contains] ClassTail : { ClassBody }",
  "sec-runtime-semantics-instantiategeneratorfunctionexpression|GeneratorExpression|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[InstantiateGeneratorFunctionExpression] GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-lexicallydeclarednames|ModuleItem|ImportDeclaration" : "[LexicallyDeclaredNames] ModuleItem : ImportDeclaration",
  "sec-string.prototype.valueof" : "String.prototype.valueOf",
  "sec-date.prototype.getmonth" : "Date.prototype.getMonth",
  "sec-static-semantics-hascallintailposition|OptionalExpression|OptionalExpression|OptionalChain" : "[HasCallInTailPosition] OptionalExpression : OptionalExpression OptionalChain",
  "sec-reflect.getownpropertydescriptor" : "Reflect.getOwnPropertyDescriptor",
  "sec-static-semantics-hascallintailposition|CaseClauses|CaseClauses|CaseClause" : "[HasCallInTailPosition] CaseClauses : CaseClauses CaseClause",
  "sec-date.prototype.getutcday" : "Date.prototype.getUTCDay",
  "sec-getmodulenamespace" : "GetModuleNamespace",
  "sec-instanceofoperator" : "InstanceofOperator",
  "sec-if-statement-runtime-semantics-evaluation|IfStatement|if|(|Expression|)|Statement" : "[Evaluation] IfStatement : if ( Expression ) Statement",
  "sec-template-literals-runtime-semantics-evaluation|TemplateMiddleList|TemplateMiddle|Expression" : "[Evaluation] TemplateMiddleList : TemplateMiddle Expression",
  "sec-void-operator-runtime-semantics-evaluation|UnaryExpression|void|UnaryExpression" : "[Evaluation] UnaryExpression : void UnaryExpression",
  "sec-static-semantics-containsduplicatelabels|Statement|ThrowStatement" : "[ContainsDuplicateLabels] Statement : ThrowStatement",
  "sec-runtime-semantics-iteratorbindinginitialization|ArrayBindingPattern|[|Elision|BindingRestElement|]" : "[IteratorBindingInitialization] ArrayBindingPattern : [ Elision BindingRestElement ]",
  "sec-static-semantics-hascallintailposition|RelationalExpression|RelationalExpression|>=|ShiftExpression" : "[HasCallInTailPosition] RelationalExpression : RelationalExpression >= ShiftExpression",
  "sec-static-semantics-isdestructuring|MemberExpression|PrimaryExpression" : "[IsDestructuring] MemberExpression : PrimaryExpression",
  "sec-static-semantics-hasdirectsuper|AsyncMethod|async|ClassElementName|(|UniqueFormalParameters|)|{|AsyncFunctionBody|}" : "[HasDirectSuper] AsyncMethod : async ClassElementName ( UniqueFormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-hascallintailposition|StatementListItem|Declaration" : "[HasCallInTailPosition] StatementListItem : Declaration",
  "sec-runtime-semantics-argumentlistevaluation|ArgumentList|ArgumentList|,|AssignmentExpression" : "[ArgumentListEvaluation] ArgumentList : ArgumentList , AssignmentExpression",
  "sec-array.prototype.some" : "Array.prototype.some",
  "sec-dataview.prototype.setint16" : "DataView.prototype.setInt16",
  "sec-set.prototype.delete" : "Set.prototype.delete",
  "sec-static-semantics-containsundefinedbreaktarget|CaseBlock|{|DefaultClause|}" : "[ContainsUndefinedBreakTarget] CaseBlock : { DefaultClause }",
  "sec-static-semantics-hascallintailposition|CaseBlock|{|DefaultClause|}" : "[HasCallInTailPosition] CaseBlock : { DefaultClause }",
  "sec-runtime-semantics-evaluatebody|AsyncFunctionBody|FunctionBody" : "[EvaluateBody] AsyncFunctionBody : FunctionBody",
  "sec-block-runtime-semantics-evaluation|StatementList|StatementList|StatementListItem" : "[Evaluation] StatementList : StatementList StatementListItem",
  "sec-throw-statement-runtime-semantics-evaluation|ThrowStatement|throw|Expression|;" : "[Evaluation] ThrowStatement : throw Expression ;",
  "sec-runtime-semantics-propertydestructuringassignmentevaluation|AssignmentProperty|PropertyName|:|AssignmentElement" : "[PropertyDestructuringAssignmentEvaluation] AssignmentProperty : PropertyName : AssignmentElement",
  "sec-dataview.prototype.setint32" : "DataView.prototype.setInt32",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|Literal" : "[AssignmentTargetType] PrimaryExpression : Literal",
  "sec-stringindexof" : "StringIndexOf",
  "sec-static-semantics-varscopeddeclarations|CaseBlock|{|CaseClauses|DefaultClause|}" : "[VarScopedDeclarations] CaseBlock : { CaseClauses DefaultClause }",
  "sec-static-semantics-assignmenttargettype|CallExpression|CallExpression|.|IdentifierName" : "[AssignmentTargetType] CallExpression : CallExpression . IdentifierName",
  "sec-static-semantics-isfunctiondefinition|MemberExpression|MetaProperty" : "[IsFunctionDefinition] MemberExpression : MetaProperty",
  "sec-object.prototype.isprototypeof" : "Object.prototype.isPrototypeOf",
  "sec-static-semantics-assignmenttargettype|CallExpression|CallExpression|TemplateLiteral" : "[AssignmentTargetType] CallExpression : CallExpression TemplateLiteral",
  "sec-performpromisethen" : "PerformPromiseThen",
  "sec-compiletocharset|ClassSetOperand|ClassStringDisjunction" : "[CompileToCharSet] ClassSetOperand : ClassStringDisjunction",
  "sec-postfix-decrement-operator-runtime-semantics-evaluation|UpdateExpression|LeftHandSideExpression|--" : "[Evaluation] UpdateExpression : LeftHandSideExpression --",
  "sec-dataview.prototype.setfloat64" : "DataView.prototype.setFloat64",
  "sec-runtime-semantics-iteratordestructuringassignmentevaluation|AssignmentElement|DestructuringAssignmentTarget|Initializer" : "[IteratorDestructuringAssignmentEvaluation] AssignmentElement : DestructuringAssignmentTarget Initializer",
  "sec-global-environment-records-setmutablebinding-n-v-s" : "SetMutableBinding",
  "sec-ordinarygetprototypeof" : "OrdinaryGetPrototypeOf",
  "sec-regexpinitialize" : "RegExpInitialize",
  "sec-datestring" : "DateString",
  "sec-static-semantics-hascallintailposition|UpdateExpression|LeftHandSideExpression|++" : "[HasCallInTailPosition] UpdateExpression : LeftHandSideExpression ++",
  "sec-runtime-semantics-destructuringassignmentevaluation|ArrayAssignmentPattern|[|]" : "[DestructuringAssignmentEvaluation] ArrayAssignmentPattern : [ ]",
  "sec-static-semantics-classelementevaluation|ClassElement|ClassStaticBlock" : "[ClassElementEvaluation] ClassElement : ClassStaticBlock",
  "sec-function-definitions-runtime-semantics-evaluation|FunctionStatementList" : "[Evaluation] FunctionStatementList :",
  "sec-notifywaiter" : "NotifyWaiter",
  "sec-initializetypedarrayfromarraybuffer" : "InitializeTypedArrayFromArrayBuffer",
  "sec-performeval" : "PerformEval",
  "sec-groupspecifiersthatmatch" : "GroupSpecifiersThatMatch",
  "sec-ordinary-object-internal-methods-and-internal-slots-setprototypeof-v" : "[[SetPrototypeOf]]",
  "sec-date.prototype.getutcmonth" : "Date.prototype.getUTCMonth",
  "sec-relational-operators-runtime-semantics-evaluation|RelationalExpression|RelationalExpression|<|ShiftExpression" : "[Evaluation] RelationalExpression : RelationalExpression < ShiftExpression",
  "sec-static-semantics-contains|FunctionDeclaration|function|(|FormalParameters|)|{|FunctionBody|}" : "[Contains] FunctionDeclaration : function ( FormalParameters ) { FunctionBody }",
  "sec-math.asin" : "Math.asin",
  "sec-static-semantics-vardeclarednames|CaseBlock|{|}" : "[VarDeclaredNames] CaseBlock : { }",
  "sec-math.clz32" : "Math.clz32",
  "sec-runtime-semantics-destructuringassignmentevaluation|ArrayAssignmentPattern|[|Elision|]" : "[DestructuringAssignmentEvaluation] ArrayAssignmentPattern : [ Elision ]",
  "sec-identifiercodepoint|IdentifierPart|IdentifierPartChar" : "[IdentifierCodePoint] IdentifierPart : IdentifierPartChar",
  "sec-encodeuricomponent-uricomponent" : "encodeURIComponent",
  "sec-static-semantics-isfunctiondefinition|AdditiveExpression|AdditiveExpression|-|MultiplicativeExpression" : "[IsFunctionDefinition] AdditiveExpression : AdditiveExpression - MultiplicativeExpression",
  "sec-string.prototype-@@iterator" : "String.prototype[@@iterator]",
  "sec-date.prototype.tostring" : "Date.prototype.toString",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( var VariableDeclarationList ; Expression ; ) Statement",
  "sec-symbol.keyfor" : "Symbol.keyFor",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|var|VariableDeclarationList|;|;|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( var VariableDeclarationList ; ; Expression ) Statement",
  "sec-static-semantics-vardeclarednames|ForInOfStatement|for|(|var|ForBinding|in|Expression|)|Statement" : "[VarDeclaredNames] ForInOfStatement : for ( var ForBinding in Expression ) Statement",
  "sec-static-semantics-lexicallyscopeddeclarations|CaseClauses|CaseClauses|CaseClause" : "[LexicallyScopedDeclarations] CaseClauses : CaseClauses CaseClause",
  "sec-numeric-types-bigint-subtract" : "BigInt::subtract",
  "sec-compiletocharset|NonemptyClassRangesNoDash|ClassAtomNoDash|NonemptyClassRangesNoDash" : "[CompileToCharSet] NonemptyClassRangesNoDash : ClassAtomNoDash NonemptyClassRangesNoDash",
  "sec-class-definitions-runtime-semantics-evaluation|ClassStaticBlockStatementList" : "[Evaluation] ClassStaticBlockStatementList :",
  "sec-allocatetypedarraybuffer" : "AllocateTypedArrayBuffer",
  "sec-static-semantics-hascallintailposition|OptionalChain|?.|Arguments" : "[HasCallInTailPosition] OptionalChain : ?. Arguments",
  "sec-static-semantics-isconstantdeclaration|AsyncGeneratorDeclaration|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[IsConstantDeclaration] AsyncGeneratorDeclaration : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-math.tanh" : "Math.tanh",
  "sec-runtime-semantics-instantiatefunctionobject|GeneratorDeclaration|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[InstantiateFunctionObject] GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-containsundefinedcontinuetarget|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[ContainsUndefinedContinueTarget] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-runtime-semantics-forinofloopevaluation|ForInOfStatement|for|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[ForInOfLoopEvaluation] ForInOfStatement : for ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|Expression|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( var VariableDeclarationList ; Expression ; Expression ) Statement",
  "sec-static-semantics-propname|MethodDefinition|ClassElementName|(|UniqueFormalParameters|)|{|FunctionBody|}" : "[PropName] MethodDefinition : ClassElementName ( UniqueFormalParameters ) { FunctionBody }",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|Expression|;|;|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( Expression ; ; Expression ) Statement",
  "sec-hosteventset" : "HostEventSet",
  "sec-object.getownpropertysymbols" : "Object.getOwnPropertySymbols",
  "sec-static-semantics-containsundefinedcontinuetarget|Block|{|}" : "[ContainsUndefinedContinueTarget] Block : { }",
  "sec-static-semantics-computedpropertycontains|PropertyName|LiteralPropertyName" : "[ComputedPropertyContains] PropertyName : LiteralPropertyName",
  "sec-runtime-semantics-destructuringassignmentevaluation|ObjectAssignmentPattern|{|AssignmentRestProperty|}" : "[DestructuringAssignmentEvaluation] ObjectAssignmentPattern : { AssignmentRestProperty }",
  "sec-array.prototype.tosorted" : "Array.prototype.toSorted",
  "sec-%arrayiteratorprototype%.next" : "ArrayIteratorPrototype.next",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|;|;|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( ; ; ) Statement",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|Expression|;|;|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( Expression ; ; ) Statement",
  "sec-declarative-environment-records-createimmutablebinding-n-s" : "CreateImmutableBinding",
  "sec-static-semantics-hascallintailposition|UpdateExpression|LeftHandSideExpression|--" : "[HasCallInTailPosition] UpdateExpression : LeftHandSideExpression --",
  "sec-asyncgenerator-definitions-evaluation|AsyncGeneratorExpression|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[Evaluation] AsyncGeneratorExpression : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-exportentries|ModuleItem|ImportDeclaration" : "[ExportEntries] ModuleItem : ImportDeclaration",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|CoverParenthesizedExpressionAndArrowParameterList" : "[HasCallInTailPosition] PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-numeric-types-bigint-divide" : "BigInt::divide",
  "sec-statement-semantics-runtime-semantics-evaluation|HoistableDeclaration|AsyncGeneratorDeclaration" : "[Evaluation] HoistableDeclaration : AsyncGeneratorDeclaration",
  "sec-runtime-semantics-charactersetmatcher-abstract-operation" : "CharacterSetMatcher",
  "sec-dowait" : "DoWait",
  "sec-signed-right-shift-operator-runtime-semantics-evaluation|ShiftExpression|ShiftExpression|>>|AdditiveExpression" : "[Evaluation] ShiftExpression : ShiftExpression >> AdditiveExpression",
  "sec-static-semantics-containsarguments|AsyncGeneratorMethod|async|*|ClassElementName|(|UniqueFormalParameters|)|{|AsyncGeneratorBody|}" : "[ContainsArguments] AsyncGeneratorMethod : async * ClassElementName ( UniqueFormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-containsundefinedbreaktarget|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[ContainsUndefinedBreakTarget] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-static-semantics-containsduplicatelabels|CaseBlock|{|DefaultClause|}" : "[ContainsDuplicateLabels] CaseBlock : { DefaultClause }",
  "sec-map.groupby" : "Map.groupBy",
  "sec-static-semantics-hascallintailposition|NewExpression|new|NewExpression" : "[HasCallInTailPosition] NewExpression : new NewExpression",
  "sec-static-semantics-containsundefinedbreaktarget|DefaultClause|default|:|StatementList" : "[ContainsUndefinedBreakTarget] DefaultClause : default : StatementList",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|Expression|;|Expression|;|Expression|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( Expression ; Expression ; Expression ) Statement",
  "sec-patterns-static-semantics-capturing-group-number|DecimalEscape|NonZeroDigit|DecimalDigits" : "[CapturingGroupNumber] DecimalEscape : NonZeroDigit DecimalDigits",
  "sec-isarray" : "IsArray",
  "sec-static-semantics-importentries|ModuleItemList|ModuleItemList|ModuleItem" : "[ImportEntries] ModuleItemList : ModuleItemList ModuleItem",
  "sec-static-semantics-lexicallyscopeddeclarations|Module" : "[LexicallyScopedDeclarations] Module :",
  "sec-runtime-semantics-destructuringassignmentevaluation|ArrayAssignmentPattern|[|AssignmentElementList|,|Elision|]" : "[DestructuringAssignmentEvaluation] ArrayAssignmentPattern : [ AssignmentElementList , Elision ]",
  "sec-reflect.preventextensions" : "Reflect.preventExtensions",
  "sec-identifiers-runtime-semantics-evaluation|IdentifierReference|yield" : "[Evaluation] IdentifierReference : yield",
  "sec-date.prototype.getutcdate" : "Date.prototype.getUTCDate",
  "sec-static-semantics-exportedbindings|ModuleItem|ImportDeclaration" : "[ExportedBindings] ModuleItem : ImportDeclaration",
  "sec-runtime-semantics-arrayaccumulation|SpreadElement|...|AssignmentExpression" : "[ArrayAccumulation] SpreadElement : ... AssignmentExpression",
  "sec-static-semantics-containsarguments|GeneratorDeclaration|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[ContainsArguments] GeneratorDeclaration : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-ordinaryset" : "OrdinarySet",
  "sec-static-semantics-expectedargumentcount|PropertySetParameterList|FormalParameter" : "[ExpectedArgumentCount] PropertySetParameterList : FormalParameter",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|LexicalDeclaration|Expression|;|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( LexicalDeclaration Expression ; ) Statement",
  "sec-static-semantics-toplevellexicallydeclarednames|StatementListItem|Statement" : "[TopLevelLexicallyDeclaredNames] StatementListItem : Statement",
  "sec-runtime-semantics-classdefinitionevaluation|ClassTail|{|ClassBody|}" : "[ClassDefinitionEvaluation] ClassTail : { ClassBody }",
  "sec-static-semantics-contains|FunctionExpression|function|(|FormalParameters|)|{|FunctionBody|}" : "[Contains] FunctionExpression : function ( FormalParameters ) { FunctionBody }",
  "sec-runtime-semantics-bindinginitialization|BindingPattern|ObjectBindingPattern" : "[BindingInitialization] BindingPattern : ObjectBindingPattern",
  "sec-static-semantics-isidentifierref|LeftHandSideExpression|CallExpression" : "[IsIdentifierRef] LeftHandSideExpression : CallExpression",
  "sec-static-semantics-contains|GeneratorExpression|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[Contains] GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-%typedarray%.prototype.filter" : "TypedArray.prototype.filter",
  "sec-static-semantics-boundnames|CoverCallExpressionAndAsyncArrowHead|MemberExpression|Arguments" : "[BoundNames] CoverCallExpressionAndAsyncArrowHead : MemberExpression Arguments",
  "sec-empty-statement-runtime-semantics-evaluation|EmptyStatement|;" : "[Evaluation] EmptyStatement : ;",
  "sec-symbol.prototype.description" : "get Symbol.prototype.description",
  "sec-numeric-types-number-signedRightShift" : "Number::signedRightShift",
  "sec-createregexpstringiterator" : "CreateRegExpStringIterator",
  "sec-%typedarray%.prototype.entries" : "TypedArray.prototype.entries",
  "sec-triggerpromisereactions" : "TriggerPromiseReactions",
  "sec-reflect.construct" : "Reflect.construct",
  "sec-compiletocharset|NonemptyClassRangesNoDash|ClassAtomNoDash|-|ClassAtom|ClassContents" : "[CompileToCharSet] NonemptyClassRangesNoDash : ClassAtomNoDash - ClassAtom ClassContents",
  "sec-static-semantics-hascallintailposition|ShiftExpression|ShiftExpression|<<|AdditiveExpression" : "[HasCallInTailPosition] ShiftExpression : ShiftExpression << AdditiveExpression",
  "sec-bigintbitwiseop" : "BigIntBitwiseOp",
  "sec-date.prototype.setdate" : "Date.prototype.setDate",
  "sec-isanonymousfunctiondefinition" : "IsAnonymousFunctionDefinition",
  "sec-static-semantics-exportedbindings|ExportDeclaration|export|default|HoistableDeclaration" : "[ExportedBindings] ExportDeclaration : export default HoistableDeclaration",
  "sec-static-semantics-lexicallyscopeddeclarations|LabelledItem|Statement" : "[LexicallyScopedDeclarations] LabelledItem : Statement",
  "sec-static-semantics-isfunctiondefinition|AssignmentExpression|LeftHandSideExpression|=|AssignmentExpression" : "[IsFunctionDefinition] AssignmentExpression : LeftHandSideExpression = AssignmentExpression",
  "sec-static-semantics-isfunctiondefinition|PrimaryExpression|Literal" : "[IsFunctionDefinition] PrimaryExpression : Literal",
  "sec-block-runtime-semantics-evaluation|Block|{|}" : "[Evaluation] Block : { }",
  "sec-%throwtypeerror%" : "ThrowTypeError",
  "sec-date.prototype.setfullyear" : "Date.prototype.setFullYear",
  "sec-runtime-semantics-labelledevaluation|Statement|ContinueStatement" : "[LabelledEvaluation] Statement : ContinueStatement",
  "sec-createresolvingfunctions" : "CreateResolvingFunctions",
  "sec-static-semantics-containsduplicatelabels|Statement|DebuggerStatement" : "[ContainsDuplicateLabels] Statement : DebuggerStatement",
  "sec-static-semantics-hasname|AsyncArrowFunction|async|AsyncArrowBindingIdentifier|=>|AsyncConciseBody" : "[HasName] AsyncArrowFunction : async AsyncArrowBindingIdentifier => AsyncConciseBody",
  "sec-static-semantics-isidentifierref|PrimaryExpression|TemplateLiteral" : "[IsIdentifierRef] PrimaryExpression : TemplateLiteral",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|LexicalDeclaration|Expression|;|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( LexicalDeclaration Expression ; ) Statement",
  "sec-static-semantics-classelementkind|ClassElement|static|FieldDefinition|;" : "[ClassElementKind] ClassElement : static FieldDefinition ;",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|this" : "[AssignmentTargetType] PrimaryExpression : this",
  "sec-parsefloat-string" : "parseFloat",
  "sec-compiletocharset|NestedClass|\\|CharacterClassEscape" : "[CompileToCharSet] NestedClass : \\ CharacterClassEscape",
  "sec-unicodeescape" : "UnicodeEscape",
  "sec-static-semantics-issimpleparameterlist|FormalParameters" : "[IsSimpleParameterList] FormalParameters :",
  "sec-static-semantics-vardeclarednames|WhileStatement|while|(|Expression|)|Statement" : "[VarDeclaredNames] WhileStatement : while ( Expression ) Statement",
  "sec-static-semantics-containsduplicatelabels|ForInOfStatement|for|(|LeftHandSideExpression|in|Expression|)|Statement" : "[ContainsDuplicateLabels] ForInOfStatement : for ( LeftHandSideExpression in Expression ) Statement",
  "sec-isintailposition" : "IsInTailPosition",
  "sec-bigint.prototype.tostring" : "BigInt.prototype.toString",
  "sec-static-semantics-exportedbindings|ExportDeclaration|export|default|AssignmentExpression|;" : "[ExportedBindings] ExportDeclaration : export default AssignmentExpression ;",
  "sec-runtime-semantics-fordeclarationbindinginitialization|ForDeclaration|LetOrConst|ForBinding" : "[ForDeclarationBindingInitialization] ForDeclaration : LetOrConst ForBinding",
  "sec-if-statement-runtime-semantics-evaluation|IfStatement|if|(|Expression|)|Statement|else|Statement" : "[Evaluation] IfStatement : if ( Expression ) Statement else Statement",
  "sec-weak-ref-target" : "WeakRef",
  "sec-static-semantics-vardeclarednames|CaseBlock|{|CaseClauses|DefaultClause|CaseClauses|}" : "[VarDeclaredNames] CaseBlock : { CaseClauses DefaultClause CaseClauses }",
  "sec-static-semantics-maycontainstrings|ClassUnion|ClassSetRange|ClassUnion" : "[MayContainStrings] ClassUnion : ClassSetRange ClassUnion",
  "sec-static-semantics-hascallintailposition|OptionalExpression|MemberExpression|OptionalChain" : "[HasCallInTailPosition] OptionalExpression : MemberExpression OptionalChain",
  "sec-math.exp" : "Math.exp",
  "sec-static-semantics-hascallintailposition|RelationalExpression|RelationalExpression|<|ShiftExpression" : "[HasCallInTailPosition] RelationalExpression : RelationalExpression < ShiftExpression",
  "sec-static-semantics-isfunctiondefinition|UpdateExpression|++|UnaryExpression" : "[IsFunctionDefinition] UpdateExpression : ++ UnaryExpression",
  "sec-static-semantics-hascallintailposition|BitwiseORExpression|BitwiseORExpression|||BitwiseXORExpression" : "[HasCallInTailPosition] BitwiseORExpression : BitwiseORExpression | BitwiseXORExpression",
  "sec-static-semantics-vardeclarednames|Statement|ExpressionStatement" : "[VarDeclaredNames] Statement : ExpressionStatement",
  "sec-break-statement-runtime-semantics-evaluation|BreakStatement|break|LabelIdentifier|;" : "[Evaluation] BreakStatement : break LabelIdentifier ;",
  "sec-candeclareglobalvar" : "CanDeclareGlobalVar",
  "sec-numeric-types-bigint-unaryMinus" : "BigInt::unaryMinus",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|;|Expression|;|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( ; Expression ; ) Statement",
  "sec-expression-statement-runtime-semantics-evaluation|ExpressionStatement|Expression|;" : "[Evaluation] ExpressionStatement : Expression ;",
  "sec-runtime-semantics-loopevaluation|IterationStatement|DoWhileStatement" : "[LoopEvaluation] IterationStatement : DoWhileStatement",
  "sec-regexpidentifiercodepoints|RegExpIdentifierName|RegExpIdentifierName|RegExpIdentifierPart" : "[RegExpIdentifierCodePoints] RegExpIdentifierName : RegExpIdentifierName RegExpIdentifierPart",
  "sec-static-semantics-vardeclarednames|FunctionStatementList|StatementList" : "[VarDeclaredNames] FunctionStatementList : StatementList",
  "sec-canonicalnumericindexstring" : "CanonicalNumericIndexString",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|;|;|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( ; ; ) Statement",
  "sec-meta-properties-runtime-semantics-evaluation|ImportMeta|import|.|meta" : "[Evaluation] ImportMeta : import . meta",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|var|VariableDeclarationList|;|;|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( var VariableDeclarationList ; ; ) Statement",
  "sec-static-semantics-isidentifierref|PrimaryExpression|Literal" : "[IsIdentifierRef] PrimaryExpression : Literal",
  "sec-static-semantics-vardeclarednames|SwitchStatement|switch|(|Expression|)|CaseBlock" : "[VarDeclaredNames] SwitchStatement : switch ( Expression ) CaseBlock",
  "sec-runtime-semantics-substitutionevaluation|TemplateSpans|TemplateTail" : "[SubstitutionEvaluation] TemplateSpans : TemplateTail",
  "sec-static-semantics-stringvalue|LabelIdentifier|yield" : "[StringValue] LabelIdentifier : yield",
  "sec-validatetypedarray" : "ValidateTypedArray",
  "sec-super-keyword-runtime-semantics-evaluation|SuperProperty|super|[|Expression|]" : "[Evaluation] SuperProperty : super [ Expression ]",
  "sec-declarative-environment-records-hassuperbinding" : "HasSuperBinding",
  "sec-static-semantics-containsduplicatelabels|ForInOfStatement|for|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[ContainsDuplicateLabels] ForInOfStatement : for ( var ForBinding of AssignmentExpression ) Statement",
  "sec-timewithinday" : "TimeWithinDay",
  "sec-static-semantics-issimpleparameterlist|FormalParameterList|FormalParameterList|,|FormalParameter" : "[IsSimpleParameterList] FormalParameterList : FormalParameterList , FormalParameter",
  "sec-runtime-semantics-caseblockevaluation|CaseBlock|{|DefaultClause|}" : "[CaseBlockEvaluation] CaseBlock : { DefaultClause }",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( var VariableDeclarationList ; Expression ; ) Statement",
  "sec-static-semantics-vardeclarednames|ScriptBody|StatementList" : "[VarDeclaredNames] ScriptBody : StatementList",
  "sec-static-semantics-varscopeddeclarations|Statement|ExpressionStatement" : "[VarScopedDeclarations] Statement : ExpressionStatement",
  "sec-static-semantics-lexicallyscopeddeclarations|ExportDeclaration|export|VariableStatement" : "[LexicallyScopedDeclarations] ExportDeclaration : export VariableStatement",
  "sec-string-exotic-objects-defineownproperty-p-desc" : "[[DefineOwnProperty]]",
  "sec-makeargsetter" : "MakeArgSetter",
  "sec-static-semantics-containsduplicatelabels|CaseBlock|{|CaseClauses|DefaultClause|}" : "[ContainsDuplicateLabels] CaseBlock : { CaseClauses DefaultClause }",
  "sec-static-semantics-lexicallydeclarednames|CaseClause|case|Expression|:|StatementList" : "[LexicallyDeclaredNames] CaseClause : case Expression : StatementList",
  "sec-definepropertyorthrow" : "DefinePropertyOrThrow",
  "sec-static-semantics-assignmenttargettype|EqualityExpression|EqualityExpression|!==|RelationalExpression" : "[AssignmentTargetType] EqualityExpression : EqualityExpression !== RelationalExpression",
  "sec-evaluatenew" : "EvaluateNew",
  "sec-asyncgeneratorresume" : "AsyncGeneratorResume",
  "sec-regexp.prototype.tostring" : "RegExp.prototype.toString",
  "sec-static-semantics-assignmenttargettype|LogicalORExpression|LogicalORExpression||||LogicalANDExpression" : "[AssignmentTargetType] LogicalORExpression : LogicalORExpression || LogicalANDExpression",
  "sec-numericvalue|DecimalBigIntegerLiteral|NonZeroDigit|NumericLiteralSeparator|DecimalDigits|BigIntLiteralSuffix" : "[NumericValue] DecimalBigIntegerLiteral : NonZeroDigit NumericLiteralSeparator DecimalDigits BigIntLiteralSuffix",
  "sec-runtime-semantics-stringnumericvalue|StringNumericLiteral|StrWhiteSpace|StrNumericLiteral" : "[StringNumericValue] StringNumericLiteral : StrWhiteSpace StrNumericLiteral",
  "sec-sharedarraybuffer-length" : "SharedArrayBuffer",
  "sec-numeric-types-number-leftShift" : "Number::leftShift",
  "sec-left-shift-operator-runtime-semantics-evaluation|ShiftExpression|ShiftExpression|<<|AdditiveExpression" : "[Evaluation] ShiftExpression : ShiftExpression << AdditiveExpression",
  "sec-static-semantics-containsundefinedbreaktarget|ForInOfStatement|for|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedBreakTarget] ForInOfStatement : for ( var ForBinding of AssignmentExpression ) Statement",
  "sec-get-sharedarraybuffer.prototype.maxbytelength" : "get SharedArrayBuffer.prototype.maxByteLength",
  "sec-inleapyear" : "InLeapYear",
  "sec-createbuiltinfunction" : "CreateBuiltinFunction",
  "sec-built-in-function-objects-call-thisargument-argumentslist" : "[[Call]]",
  "sec-static-semantics-boundnames|LexicalBinding|BindingPattern|Initializer" : "[BoundNames] LexicalBinding : BindingPattern Initializer",
  "sec-static-semantics-isfunctiondefinition|UnaryExpression|AwaitExpression" : "[IsFunctionDefinition] UnaryExpression : AwaitExpression",
  "sec-static-semantics-maycontainstrings|CharacterClassEscape|s" : "[MayContainStrings] CharacterClassEscape : s",
  "sec-toindex" : "ToIndex",
  "sec-runtime-semantics-stringnumericvalue|StringNumericLiteral|StrWhiteSpace|StrNumericLiteral|StrWhiteSpace" : "[StringNumericValue] StringNumericLiteral : StrWhiteSpace StrNumericLiteral StrWhiteSpace",
  "sec-string.prototype.at" : "String.prototype.at",
  "sec-string.prototype.search" : "String.prototype.search",
  "sec-static-semantics-containsundefinedcontinuetarget|ForInOfStatement|for|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedContinueTarget] ForInOfStatement : for ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-module-namespace-exotic-objects-preventextensions" : "[[PreventExtensions]]",
  "sec-static-semantics-assignmenttargettype|RelationalExpression|RelationalExpression|>|ShiftExpression" : "[AssignmentTargetType] RelationalExpression : RelationalExpression > ShiftExpression",
  "sec-static-semantics-maycontainstrings|CharacterClassEscape|w" : "[MayContainStrings] CharacterClassEscape : w",
  "sec-resolvebinding" : "ResolveBinding",
  "sec-static-semantics-vardeclarednames|IfStatement|if|(|Expression|)|Statement" : "[VarDeclaredNames] IfStatement : if ( Expression ) Statement",
  "sec-set-iterable" : "Set",
  "sec-declarative-environment-records-createmutablebinding-n-d" : "CreateMutableBinding",
  "sec-static-semantics-lexicallyscopeddeclarations|ScriptBody|StatementList" : "[LexicallyScopedDeclarations] ScriptBody : StatementList",
  "sec-object.prototype.propertyisenumerable" : "Object.prototype.propertyIsEnumerable",
  "sec-static-semantics-varscopeddeclarations|Module" : "[VarScopedDeclarations] Module :",
  "sec-array.prototype.lastindexof" : "Array.prototype.lastIndexOf",
  "sec-allocatearraybuffer" : "AllocateArrayBuffer",
  "sec-static-semantics-maycontainstrings|CharacterClassEscape|d" : "[MayContainStrings] CharacterClassEscape : d",
  "sec-array.prototype.find" : "Array.prototype.find",
  "sec-compiletocharset|ClassUnion|ClassSetRange" : "[CompileToCharSet] ClassUnion : ClassSetRange",
  "sec-compilequantifierprefix|QuantifierPrefix|?" : "[CompileQuantifierPrefix] QuantifierPrefix : ?",
  "sec-flattenintoarray" : "FlattenIntoArray",
  "sec-compilequantifierprefix|QuantifierPrefix|+" : "[CompileQuantifierPrefix] QuantifierPrefix : +",
  "sec-array.prototype.fill" : "Array.prototype.fill",
  "sec-static-semantics-hascallintailposition|SwitchStatement|switch|(|Expression|)|CaseBlock" : "[HasCallInTailPosition] SwitchStatement : switch ( Expression ) CaseBlock",
  "sec-static-semantics-maycontainstrings|CharacterClassEscape|S" : "[MayContainStrings] CharacterClassEscape : S",
  "sec-static-semantics-vardeclarednames|ForInOfStatement|for|await|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[VarDeclaredNames] ForInOfStatement : for await ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-static-semantics-hascallintailposition|OptionalChain|?.|IdentifierName" : "[HasCallInTailPosition] OptionalChain : ?. IdentifierName",
  "sec-static-semantics-containsarguments|AsyncFunctionExpression|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[ContainsArguments] AsyncFunctionExpression : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-dataview.prototype.getuint8" : "DataView.prototype.getUint8",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|LexicalDeclaration|Expression|;|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( LexicalDeclaration Expression ; ) Statement",
  "sec-static-semantics-maycontainstrings|CharacterClassEscape|W" : "[MayContainStrings] CharacterClassEscape : W",
  "sec-normalcompletion" : "NormalCompletion",
  "sec-isaccessordescriptor" : "IsAccessorDescriptor",
  "sec-compilequantifierprefix|QuantifierPrefix|*" : "[CompileQuantifierPrefix] QuantifierPrefix : *",
  "sec-tobigint64" : "ToBigInt64",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|FunctionExpression" : "[HasCallInTailPosition] PrimaryExpression : FunctionExpression",
  "sec-switch-statement-runtime-semantics-evaluation|CaseClause|case|Expression|:|StatementList" : "[Evaluation] CaseClause : case Expression : StatementList",
  "sec-meta-properties-runtime-semantics-evaluation|NewTarget|new|.|target" : "[Evaluation] NewTarget : new . target",
  "sec-compiletocharset|ClassIntersection|ClassIntersection|&&|ClassSetOperand" : "[CompileToCharSet] ClassIntersection : ClassIntersection && ClassSetOperand",
  "sec-runtime-semantics-stringnumericvalue|StrUnsignedDecimalLiteral|DecimalDigits|." : "[StringNumericValue] StrUnsignedDecimalLiteral : DecimalDigits .",
  "sec-minfromtime" : "MinFromTime",
  "sec-multiplicative-operators-runtime-semantics-evaluation|MultiplicativeExpression|MultiplicativeExpression|MultiplicativeOperator|ExponentiationExpression" : "[Evaluation] MultiplicativeExpression : MultiplicativeExpression MultiplicativeOperator ExponentiationExpression",
  "sec-static-semantics-maycontainstrings|CharacterClassEscape|D" : "[MayContainStrings] CharacterClassEscape : D",
  "sec-static-semantics-containsduplicatelabels|Statement|ExpressionStatement" : "[ContainsDuplicateLabels] Statement : ExpressionStatement",
  "sec-static-semantics-hascallintailposition|CaseBlock|{|CaseClauses|DefaultClause|}" : "[HasCallInTailPosition] CaseBlock : { CaseClauses DefaultClause }",
  "sec-array.prototype.sort" : "Array.prototype.sort",
  "sec-generatorstart" : "GeneratorStart",
  "sec-static-semantics-hasinitializer|BindingElement|BindingPattern|Initializer" : "[HasInitializer] BindingElement : BindingPattern Initializer",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|ObjectLiteral" : "[HasCallInTailPosition] PrimaryExpression : ObjectLiteral",
  "sec-createglobalfunctionbinding" : "CreateGlobalFunctionBinding",
  "sec-static-semantics-vardeclarednames|IfStatement|if|(|Expression|)|Statement|else|Statement" : "[VarDeclaredNames] IfStatement : if ( Expression ) Statement else Statement",
  "sec-runtime-semantics-evaluateasyncgeneratorbody|AsyncGeneratorBody|FunctionBody" : "[EvaluateAsyncGeneratorBody] AsyncGeneratorBody : FunctionBody",
  "sec-static-semantics-hascallintailposition|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[HasCallInTailPosition] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-runtime-semantics-bindingclassdeclarationevaluation|ClassDeclaration|class|ClassTail" : "[BindingClassDeclarationEvaluation] ClassDeclaration : class ClassTail",
  "sec-decode" : "Decode",
  "sec-compileatom|AtomEscape|DecimalEscape" : "[CompileAtom] AtomEscape : DecimalEscape",
  "sec-runtime-semantics-instantiateasyncfunctionexpression|AsyncFunctionExpression|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[InstantiateAsyncFunctionExpression] AsyncFunctionExpression : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-map.prototype.entries" : "Map.prototype.entries",
  "sec-static-semantics-lexicallyscopeddeclarations|DefaultClause|default|:|StatementList" : "[LexicallyScopedDeclarations] DefaultClause : default : StatementList",
  "sec-static-semantics-isfunctiondefinition|AsyncGeneratorExpression|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[IsFunctionDefinition] AsyncGeneratorExpression : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-dataview.prototype.getfloat32" : "DataView.prototype.getFloat32",
  "sec-switch-statement-runtime-semantics-evaluation|DefaultClause|default|:" : "[Evaluation] DefaultClause : default :",
  "sec-%typedarray%.prototype.slice" : "TypedArray.prototype.slice",
  "sec-static-semantics-isfunctiondefinition|LogicalORExpression|LogicalORExpression||||LogicalANDExpression" : "[IsFunctionDefinition] LogicalORExpression : LogicalORExpression || LogicalANDExpression",
  "sec-countleftcapturingparensbefore" : "CountLeftCapturingParensBefore",
  "sec-static-semantics-hasname|AsyncGeneratorExpression|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[HasName] AsyncGeneratorExpression : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-array.prototype.tostring" : "Array.prototype.toString",
  "sec-patterns-static-semantics-is-character-class|ClassEscape|b" : "[IsCharacterClass] ClassEscape : b",
  "sec-static-semantics-stringvalue|IdentifierName|IdentifierName|IdentifierPart" : "[StringValue] IdentifierName : IdentifierName IdentifierPart",
  "sec-%typedarray%.prototype.lastindexof" : "TypedArray.prototype.lastIndexOf",
  "sec-static-semantics-assignmenttargettype|LogicalANDExpression|LogicalANDExpression|&&|BitwiseORExpression" : "[AssignmentTargetType] LogicalANDExpression : LogicalANDExpression && BitwiseORExpression",
  "sec-static-semantics-hascallintailposition|OptionalExpression|CallExpression|OptionalChain" : "[HasCallInTailPosition] OptionalExpression : CallExpression OptionalChain",
  "sec-static-semantics-exportentries|Module" : "[ExportEntries] Module :",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|LexicalDeclaration|;|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( LexicalDeclaration ; ) Statement",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|this" : "[HasCallInTailPosition] PrimaryExpression : this",
  "sec-static-semantics-containsundefinedbreaktarget|Statement|ThrowStatement" : "[ContainsUndefinedBreakTarget] Statement : ThrowStatement",
  "sec-math.atan2" : "Math.atan2",
  "sec-static-semantics-containsduplicatelabels|FunctionStatementList" : "[ContainsDuplicateLabels] FunctionStatementList :",
  "sec-runtime-semantics-arrayaccumulation|ElementList|Elision|AssignmentExpression" : "[ArrayAccumulation] ElementList : Elision AssignmentExpression",
  "sec-todatestring" : "ToDateString",
  "sec-static-semantics-isfunctiondefinition|Expression|Expression|,|AssignmentExpression" : "[IsFunctionDefinition] Expression : Expression , AssignmentExpression",
  "sec-static-semantics-vardeclarednames|CaseBlock|{|DefaultClause|}" : "[VarDeclaredNames] CaseBlock : { DefaultClause }",
  "sec-get-o-p" : "Get",
  "sec-static-semantics-classelementevaluation|ClassElement|static|FieldDefinition|;" : "[ClassElementEvaluation] ClassElement : static FieldDefinition ;",
  "sec-stringtonumber" : "StringToNumber",
  "sec-string.fromcharcode" : "String.fromCharCode",
  "sec-module-namespace-exotic-objects-setprototypeof-v" : "[[SetPrototypeOf]]",
  "sec-static-semantics-isfunctiondefinition|RelationalExpression|RelationalExpression|in|ShiftExpression" : "[IsFunctionDefinition] RelationalExpression : RelationalExpression in ShiftExpression",
  "sec-switch-statement-runtime-semantics-evaluation|CaseClause|case|Expression|:" : "[Evaluation] CaseClause : case Expression :",
  "sec-static-semantics-isidentifierref|MemberExpression|MemberExpression|[|Expression|]" : "[IsIdentifierRef] MemberExpression : MemberExpression [ Expression ]",
  "sec-cleanup-finalization-registry" : "CleanupFinalizationRegistry",
  "sec-timeclip" : "TimeClip",
  "sec-static-semantics-modulerequests|ModuleItem|StatementListItem" : "[ModuleRequests] ModuleItem : StatementListItem",
  "sec-asyncgenerator-prototype-return" : "AsyncGeneratorFunction.prototype.prototype.return",
  "sec-super-keyword-runtime-semantics-evaluation|SuperCall|super|Arguments" : "[Evaluation] SuperCall : super Arguments",
  "sec-static-semantics-vardeclarednames|ForInOfStatement|for|(|LeftHandSideExpression|in|Expression|)|Statement" : "[VarDeclaredNames] ForInOfStatement : for ( LeftHandSideExpression in Expression ) Statement",
  "sec-relational-operators-runtime-semantics-evaluation|RelationalExpression|PrivateIdentifier|in|ShiftExpression" : "[Evaluation] RelationalExpression : PrivateIdentifier in ShiftExpression",
  "sec-reflect.getprototypeof" : "Reflect.getPrototypeOf",
  "sec-newprivateenvironment" : "NewPrivateEnvironment",
  "sec-static-semantics-containsexpression|BindingElement|BindingPattern|Initializer" : "[ContainsExpression] BindingElement : BindingPattern Initializer",
  "sec-static-semantics-toplevelvardeclarednames|StatementListItem|Declaration" : "[TopLevelVarDeclaredNames] StatementListItem : Declaration",
  "sec-static-semantics-templatestrings|TemplateLiteral|NoSubstitutionTemplate" : "[TemplateStrings] TemplateLiteral : NoSubstitutionTemplate",
  "sec-static-semantics-isfunctiondefinition|RelationalExpression|RelationalExpression|>=|ShiftExpression" : "[IsFunctionDefinition] RelationalExpression : RelationalExpression >= ShiftExpression",
  "sec-numeric-types-bigint-equal" : "BigInt::equal",
  "sec-static-semantics-containsundefinedbreaktarget|StatementList|StatementList|StatementListItem" : "[ContainsUndefinedBreakTarget] StatementList : StatementList StatementListItem",
  "sec-static-semantics-containsduplicatelabels|ForInOfStatement|for|await|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[ContainsDuplicateLabels] ForInOfStatement : for await ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p" : "[[GetOwnProperty]]",
  "sec-patterns-static-semantics-is-character-class|ClassEscape|-" : "[IsCharacterClass] ClassEscape : -",
  "sec-string.prototype.iswellformed" : "String.prototype.isWellFormed",
  "sec-runtime-semantics-labelledevaluation|Statement|TryStatement" : "[LabelledEvaluation] Statement : TryStatement",
  "sec-identifiercodepoints|IdentifierName|IdentifierStart" : "[IdentifierCodePoints] IdentifierName : IdentifierStart",
  "sec-static-semantics-varscopeddeclarations|ForInOfStatement|for|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[VarScopedDeclarations] ForInOfStatement : for ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-static-semantics-containsexpression|ArrowParameters|CoverParenthesizedExpressionAndArrowParameterList" : "[ContainsExpression] ArrowParameters : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-static-semantics-exportednames|ModuleItem|ExportDeclaration" : "[ExportedNames] ModuleItem : ExportDeclaration",
  "sec-decodeuri-encodeduri" : "decodeURI",
  "sec-math.atanh" : "Math.atanh",
  "sec-definefield" : "DefineField",
  "sec-static-semantics-isfunctiondefinition|RelationalExpression|RelationalExpression|>|ShiftExpression" : "[IsFunctionDefinition] RelationalExpression : RelationalExpression > ShiftExpression",
  "sec-static-semantics-isconstantdeclaration|ExportDeclaration|export|ExportFromClause|FromClause|;" : "[IsConstantDeclaration] ExportDeclaration : export ExportFromClause FromClause ;",
  "sec-static-semantics-privateboundidentifiers|AsyncGeneratorMethod|async|*|ClassElementName|(|UniqueFormalParameters|)|{|AsyncGeneratorBody|}" : "[PrivateBoundIdentifiers] AsyncGeneratorMethod : async * ClassElementName ( UniqueFormalParameters ) { AsyncGeneratorBody }",
  "sec-runtime-semantics-destructuringassignmentevaluation|ObjectAssignmentPattern|{|AssignmentPropertyList|}" : "[DestructuringAssignmentEvaluation] ObjectAssignmentPattern : { AssignmentPropertyList }",
  "sec-runtime-semantics-dowhileloopevaluation|DoWhileStatement|do|Statement|while|(|Expression|)|;" : "[DoWhileLoopEvaluation] DoWhileStatement : do Statement while ( Expression ) ;",
  "sec-optional-chaining-chain-evaluation|OptionalChain|OptionalChain|.|PrivateIdentifier" : "[ChainEvaluation] OptionalChain : OptionalChain . PrivateIdentifier",
  "sec-runtime-semantics-bindinginitialization|ObjectBindingPattern|{|BindingPropertyList|}" : "[BindingInitialization] ObjectBindingPattern : { BindingPropertyList }",
  "sec-numeric-types-bigint-add" : "BigInt::add",
  "sec-runtime-semantics-iteratorbindinginitialization|ArrayBindingPattern|[|]" : "[IteratorBindingInitialization] ArrayBindingPattern : [ ]",
  "sec-runtime-semantics-iteratordestructuringassignmentevaluation|Elision|Elision|," : "[IteratorDestructuringAssignmentEvaluation] Elision : Elision ,",
  "sec-arraybuffer.isview" : "ArrayBuffer.isView",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|LexicalDeclaration|;|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( LexicalDeclaration ; ) Statement",
  "sec-ordinaryget" : "OrdinaryGet",
  "sec-runtime-semantics-namedevaluation|ClassExpression|class|ClassTail" : "[NamedEvaluation] ClassExpression : class ClassTail",
  "sec-object-environment-records-hasthisbinding" : "HasThisBinding",
  "sec-string.prototype.match" : "String.prototype.match",
  "sec-static-semantics-containsduplicatelabels|TryStatement|try|Block|Catch|Finally" : "[ContainsDuplicateLabels] TryStatement : try Block Catch Finally",
  "sec-bound-function-exotic-objects-construct-argumentslist-newtarget" : "[[Construct]]",
  "sec-object.setprototypeof" : "Object.setPrototypeOf",
  "sec-putvalue" : "PutValue",
  "sec-array.prototype.findindex" : "Array.prototype.findIndex",
  "sec-static-semantics-isstatic|ClassElement|static|FieldDefinition|;" : "[IsStatic] ClassElement : static FieldDefinition ;",
  "sec-static-semantics-hasinitializer|SingleNameBinding|BindingIdentifier" : "[HasInitializer] SingleNameBinding : BindingIdentifier",
  "sec-static-semantics-declarationpart|Declaration|ClassDeclaration" : "[DeclarationPart] Declaration : ClassDeclaration",
  "sec-static-semantics-toplevelvarscopeddeclarations|StatementListItem|Declaration" : "[TopLevelVarScopedDeclarations] StatementListItem : Declaration",
  "sec-static-semantics-containsundefinedcontinuetarget|ModuleItem|ImportDeclaration" : "[ContainsUndefinedContinueTarget] ModuleItem : ImportDeclaration",
  "sec-static-semantics-hascallintailposition|ConditionalExpression|ShortCircuitExpression|?|AssignmentExpression|:|AssignmentExpression" : "[HasCallInTailPosition] ConditionalExpression : ShortCircuitExpression ? AssignmentExpression : AssignmentExpression",
  "sec-numeric-types-bigint-bitwiseOR" : "BigInt::bitwiseOR",
  "sec-with-statement-runtime-semantics-evaluation|WithStatement|with|(|Expression|)|Statement" : "[Evaluation] WithStatement : with ( Expression ) Statement",
  "sec-static-semantics-vardeclarednames|ModuleItemList|ModuleItemList|ModuleItem" : "[VarDeclaredNames] ModuleItemList : ModuleItemList ModuleItem",
  "sec-reflect.set" : "Reflect.set",
  "sec-runtime-semantics-forinofloopevaluation|ForInOfStatement|for|(|ForDeclaration|in|Expression|)|Statement" : "[ForInOfLoopEvaluation] ForInOfStatement : for ( ForDeclaration in Expression ) Statement",
  "sec-static-semantics-vardeclarednames|Block|{|}" : "[VarDeclaredNames] Block : { }",
  "sec-object.create" : "Object.create",
  "sec-static-semantics-vardeclarednames|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[VarDeclaredNames] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-get-map-@@species" : "get Map[@@species]",
  "sec-get-%typedarray%.prototype.buffer" : "get TypedArray.prototype.buffer",
  "sec-optional-chaining-chain-evaluation|OptionalChain|OptionalChain|Arguments" : "[ChainEvaluation] OptionalChain : OptionalChain Arguments",
  "sec-static-semantics-hascallintailposition|AssignmentExpression|LeftHandSideExpression|AssignmentOperator|AssignmentExpression" : "[HasCallInTailPosition] AssignmentExpression : LeftHandSideExpression AssignmentOperator AssignmentExpression",
  "sec-runtime-semantics-keyedbindinginitialization|SingleNameBinding|BindingIdentifier" : "[KeyedBindingInitialization] SingleNameBinding : BindingIdentifier",
  "sec-iteratortolist" : "IteratorToList",
  "sec-thisbigintvalue" : "ThisBigIntValue",
  "sec-static-semantics-containsundefinedbreaktarget|CaseClause|case|Expression|:|StatementList" : "[ContainsUndefinedBreakTarget] CaseClause : case Expression : StatementList",
  "sec-maketypedarraywithbufferwitnessrecord" : "MakeTypedArrayWithBufferWitnessRecord",
  "sec-static-semantics-containsundefinedcontinuetarget|DefaultClause|default|:|StatementList" : "[ContainsUndefinedContinueTarget] DefaultClause : default : StatementList",
  "sec-static-semantics-isstatic|ClassElement|MethodDefinition" : "[IsStatic] ClassElement : MethodDefinition",
  "sec-static-semantics-containsarguments|FunctionExpression|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[ContainsArguments] FunctionExpression : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-hascallintailposition|CoalesceExpression|CoalesceExpressionHead|??|BitwiseORExpression" : "[HasCallInTailPosition] CoalesceExpression : CoalesceExpressionHead ?? BitwiseORExpression",
  "sec-typedarraycreate" : "TypedArrayCreate",
  "sec-static-semantics-privateboundidentifiers|AsyncMethod|async|ClassElementName|(|UniqueFormalParameters|)|{|AsyncFunctionBody|}" : "[PrivateBoundIdentifiers] AsyncMethod : async ClassElementName ( UniqueFormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-isfunctiondefinition|AsyncGeneratorExpression|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[IsFunctionDefinition] AsyncGeneratorExpression : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|LexicalDeclaration|;|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( LexicalDeclaration ; Expression ) Statement",
  "sec-static-semantics-hascallintailposition|CaseClause|case|Expression|:|StatementList" : "[HasCallInTailPosition] CaseClause : case Expression : StatementList",
  "sec-static-semantics-lexicallydeclarednames|ModuleItem|ExportDeclaration" : "[LexicallyDeclaredNames] ModuleItem : ExportDeclaration",
  "sec-module-namespace-exotic-objects-delete-p" : "[[Delete]]",
  "sec-static-semantics-vardeclarednames|CaseClause|case|Expression|:|StatementList" : "[VarDeclaredNames] CaseClause : case Expression : StatementList",
  "sec-static-semantics-containsundefinedbreaktarget|BreakStatement|break|;" : "[ContainsUndefinedBreakTarget] BreakStatement : break ;",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|GeneratorExpression" : "[HasCallInTailPosition] PrimaryExpression : GeneratorExpression",
  "sec-atomics.exchange" : "Atomics.exchange",
  "sec-static-semantics-containsduplicatelabels|WithStatement|with|(|Expression|)|Statement" : "[ContainsDuplicateLabels] WithStatement : with ( Expression ) Statement",
  "sec-object.prototype.__defineGetter__" : "Object.prototype.__defineGetter__",
  "sec-static-semantics-hascallintailposition|RelationalExpression|RelationalExpression|<=|ShiftExpression" : "[HasCallInTailPosition] RelationalExpression : RelationalExpression <= ShiftExpression",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|LexicalDeclaration|Expression|;|Expression|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( LexicalDeclaration Expression ; Expression ) Statement",
  "sec-isbigintelementtype" : "IsBigIntElementType",
  "sec-statement-semantics-runtime-semantics-evaluation|HoistableDeclaration|AsyncFunctionDeclaration" : "[Evaluation] HoistableDeclaration : AsyncFunctionDeclaration",
  "sec-static-semantics-isstatic|ClassElement|static|MethodDefinition" : "[IsStatic] ClassElement : static MethodDefinition",
  "sec-static-semantics-containsundefinedbreaktarget|CaseClauses|CaseClauses|CaseClause" : "[ContainsUndefinedBreakTarget] CaseClauses : CaseClauses CaseClause",
  "sec-static-semantics-contains|ClassTail|ClassHeritage|{|ClassBody|}" : "[Contains] ClassTail : ClassHeritage { ClassBody }",
  "sec-static-semantics-hascallintailposition|DefaultClause|default|:|StatementList" : "[HasCallInTailPosition] DefaultClause : default : StatementList",
  "sec-static-semantics-vardeclarednames|StatementListItem|Declaration" : "[VarDeclaredNames] StatementListItem : Declaration",
  "sec-patterns-static-semantics-character-value|HexNonSurrogate|Hex4Digits" : "[CharacterValue] HexNonSurrogate : Hex4Digits",
  "sec-runtime-semantics-labelledevaluation|Statement|EmptyStatement" : "[LabelledEvaluation] Statement : EmptyStatement",
  "sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist" : "[[Call]]",
  "sec-runtime-semantics-iteratorbindinginitialization|SingleNameBinding|BindingIdentifier|Initializer" : "[IteratorBindingInitialization] SingleNameBinding : BindingIdentifier Initializer",
  "sec-static-semantics-varscopeddeclarations|CaseBlock|{|CaseClauses|DefaultClause|CaseClauses|}" : "[VarScopedDeclarations] CaseBlock : { CaseClauses DefaultClause CaseClauses }",
  "sec-detacharraybuffer" : "DetachArrayBuffer",
  "sec-static-semantics-exportedbindings|ExportDeclaration|export|default|ClassDeclaration" : "[ExportedBindings] ExportDeclaration : export default ClassDeclaration",
  "sec-static-semantics-vardeclarednames|Statement|ContinueStatement" : "[VarDeclaredNames] Statement : ContinueStatement",
  "sec-islooselyequal" : "IsLooselyEqual",
  "sec-getmatchindexpair" : "GetMatchIndexPair",
  "sec-utf16encodecodepoint" : "UTF16EncodeCodePoint",
  "sec-regexp-pattern-flags" : "RegExp",
  "sec-parsetimezoneoffsetstring" : "ParseTimeZoneOffsetString",
  "sec-regexpidentifiercodepoint|RegExpIdentifierPart|\\|RegExpUnicodeEscapeSequence" : "[RegExpIdentifierCodePoint] RegExpIdentifierPart : \\ RegExpUnicodeEscapeSequence",
  "sec-static-semantics-isfunctiondefinition|AsyncFunctionExpression|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[IsFunctionDefinition] AsyncFunctionExpression : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-runtime-semantics-destructuringassignmentevaluation|ArrayAssignmentPattern|[|AssignmentRestElement|]" : "[DestructuringAssignmentEvaluation] ArrayAssignmentPattern : [ AssignmentRestElement ]",
  "sec-static-semantics-hascallintailposition|ForInOfStatement|for|(|var|ForBinding|in|Expression|)|Statement" : "[HasCallInTailPosition] ForInOfStatement : for ( var ForBinding in Expression ) Statement",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|LexicalDeclaration|;|Expression|)|Statement" : "[VarDeclaredNames] ForStatement : for ( LexicalDeclaration ; Expression ) Statement",
  "sec-static-semantics-templatestrings|SubstitutionTemplate|TemplateHead|Expression|TemplateSpans" : "[TemplateStrings] SubstitutionTemplate : TemplateHead Expression TemplateSpans",
  "sec-static-semantics-hascallintailposition|Statement|EmptyStatement" : "[HasCallInTailPosition] Statement : EmptyStatement",
  "sec-static-semantics-containsundefinedbreaktarget|ModuleItem|ImportDeclaration" : "[ContainsUndefinedBreakTarget] ModuleItem : ImportDeclaration",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|;|Expression|;|Expression|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( ; Expression ; Expression ) Statement",
  "sec-isgenericdescriptor" : "IsGenericDescriptor",
  "sec-initializetypedarrayfromlist" : "InitializeTypedArrayFromList",
  "sec-static-semantics-classelementkind|ClassElement|FieldDefinition|;" : "[ClassElementKind] ClassElement : FieldDefinition ;",
  "sec-runtime-semantics-substitutionevaluation|TemplateSpans|TemplateMiddleList|TemplateTail" : "[SubstitutionEvaluation] TemplateSpans : TemplateMiddleList TemplateTail",
  "sec-isfinite-number" : "isFinite",
  "sec-patterns-static-semantics-character-value|ClassSetCharacter|\\|ClassSetReservedPunctuator" : "[CharacterValue] ClassSetCharacter : \\ ClassSetReservedPunctuator",
  "sec-static-semantics-assignmenttargettype|AdditiveExpression|AdditiveExpression|+|MultiplicativeExpression" : "[AssignmentTargetType] AdditiveExpression : AdditiveExpression + MultiplicativeExpression",
  "sec-bigint-constructor-number-value" : "BigInt",
  "sec-static-semantics-hascallintailposition|CallExpression|CallExpression|.|PrivateIdentifier" : "[HasCallInTailPosition] CallExpression : CallExpression . PrivateIdentifier",
  "sec-static-semantics-vardeclarednames|CaseBlock|{|DefaultClause|CaseClauses|}" : "[VarDeclaredNames] CaseBlock : { DefaultClause CaseClauses }",
  "sec-static-semantics-assignmenttargettype|UnaryExpression|void|UnaryExpression" : "[AssignmentTargetType] UnaryExpression : void UnaryExpression",
  "sec-array.prototype.map" : "Array.prototype.map",
  "sec-compilesubpattern|Term|Atom" : "[CompileSubpattern] Term : Atom",
  "sec-composewriteeventbytes" : "ComposeWriteEventBytes",
  "sec-static-semantics-hascallintailposition|MemberExpression|MemberExpression|.|PrivateIdentifier" : "[HasCallInTailPosition] MemberExpression : MemberExpression . PrivateIdentifier",
  "sec-runtime-semantics-stringnumericvalue|StrUnsignedDecimalLiteral|DecimalDigits|.|DecimalDigits|ExponentPart" : "[StringNumericValue] StrUnsignedDecimalLiteral : DecimalDigits . DecimalDigits ExponentPart",
  "sec-new-operator-runtime-semantics-evaluation|NewExpression|new|NewExpression" : "[Evaluation] NewExpression : new NewExpression",
  "sec-static-semantics-lexicallyscopeddeclarations|DefaultClause|default|:" : "[LexicallyScopedDeclarations] DefaultClause : default :",
  "sec-runtime-semantics-bindinginitialization|ObjectBindingPattern|{|}" : "[BindingInitialization] ObjectBindingPattern : { }",
  "sec-static-semantics-containsexpression|SingleNameBinding|BindingIdentifier|Initializer" : "[ContainsExpression] SingleNameBinding : BindingIdentifier Initializer",
  "sec-runtime-semantics-unicodematchpropertyvalue-p-v" : "UnicodeMatchPropertyValue",
  "sec-static-semantics-hasname|FunctionExpression|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[HasName] FunctionExpression : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-lexicallyscopeddeclarations|StatementListItem|Statement" : "[LexicallyScopedDeclarations] StatementListItem : Statement",
  "sec-createrealm" : "CreateRealm",
  "sec-runtime-semantics-evaluateasyncconcisebody|AsyncConciseBody|ExpressionBody" : "[EvaluateAsyncConciseBody] AsyncConciseBody : ExpressionBody",
  "sec-static-semantics-stringvalue|IdentifierReference|yield" : "[StringValue] IdentifierReference : yield",
  "sec-eval-x" : "eval",
  "sec-static-semantics-boundnames|BindingElisionElement|Elision|BindingElement" : "[BoundNames] BindingElisionElement : Elision BindingElement",
  "sec-static-semantics-varscopeddeclarations|DefaultClause|default|:|StatementList" : "[VarScopedDeclarations] DefaultClause : default : StatementList",
  "sec-static-semantics-containsexpression|ObjectBindingPattern|{|BindingRestProperty|}" : "[ContainsExpression] ObjectBindingPattern : { BindingRestProperty }",
  "sec-static-semantics-propname|AsyncMethod|async|ClassElementName|(|UniqueFormalParameters|)|{|AsyncFunctionBody|}" : "[PropName] AsyncMethod : async ClassElementName ( UniqueFormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|var|VariableDeclarationList|;|;|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( var VariableDeclarationList ; ; ) Statement",
  "sec-static-semantics-hascallintailposition|WhileStatement|while|(|Expression|)|Statement" : "[HasCallInTailPosition] WhileStatement : while ( Expression ) Statement",
  "sec-static-semantics-referencedbindings|ExportSpecifier|ModuleExportName|as|ModuleExportName" : "[ReferencedBindings] ExportSpecifier : ModuleExportName as ModuleExportName",
  "sec-compiletocharset|UnicodePropertyValueExpression|UnicodePropertyName|=|UnicodePropertyValue" : "[CompileToCharSet] UnicodePropertyValueExpression : UnicodePropertyName = UnicodePropertyValue",
  "sec-static-semantics-contains|OptionalChain|?.|IdentifierName" : "[Contains] OptionalChain : ?. IdentifierName",
  "sec-dataview.prototype.getint8" : "DataView.prototype.getInt8",
  "sec-static-semantics-isdestructuring|MemberExpression|MetaProperty" : "[IsDestructuring] MemberExpression : MetaProperty",
  "sec-validateatomicaccessonintegertypedarray" : "ValidateAtomicAccessOnIntegerTypedArray",
  "sec-dataview.prototype.getbigint64" : "DataView.prototype.getBigInt64",
  "sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc" : "[[DefineOwnProperty]]",
  "sec-static-semantics-classelementkind|ClassElement|static|MethodDefinition" : "[ClassElementKind] ClassElement : static MethodDefinition",
  "sec-reflect.apply" : "Reflect.apply",
  "sec-ordinarydelete" : "OrdinaryDelete",
  "sec-unary-minus-operator-runtime-semantics-evaluation|UnaryExpression|-|UnaryExpression" : "[Evaluation] UnaryExpression : - UnaryExpression",
  "sec-static-semantics-isfunctiondefinition|PrimaryExpression|IdentifierReference" : "[IsFunctionDefinition] PrimaryExpression : IdentifierReference",
  "sec-static-semantics-allprivateidentifiersvalid|ToDo" : "AllPrivateIdentifiersValid",
  "sec-compilequantifierprefix|QuantifierPrefix|{|DecimalDigits|,|DecimalDigits|}" : "[CompileQuantifierPrefix] QuantifierPrefix : { DecimalDigits , DecimalDigits }",
  "sec-static-semantics-varscopeddeclarations|ForInOfStatement|for|(|ForDeclaration|in|Expression|)|Statement" : "[VarScopedDeclarations] ForInOfStatement : for ( ForDeclaration in Expression ) Statement",
  "sec-runtime-semantics-iteratorbindinginitialization|FormalParameters|FormalParameterList|,|FunctionRestParameter" : "[IteratorBindingInitialization] FormalParameters : FormalParameterList , FunctionRestParameter",
  "sec-static-semantics-containsduplicatelabels|Statement|EmptyStatement" : "[ContainsDuplicateLabels] Statement : EmptyStatement",
  "sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc" : "[[DefineOwnProperty]]",
  "sec-bigint.asintn" : "BigInt.asIntN",
  "sec-static-semantics-containsundefinedbreaktarget|CaseBlock|{|CaseClauses|DefaultClause|}" : "[ContainsUndefinedBreakTarget] CaseBlock : { CaseClauses DefaultClause }",
  "sec-static-semantics-exportednames|ExportFromClause|NamedExports" : "[ExportedNames] ExportFromClause : NamedExports",
  "sec-asyncgeneratorcompletestep" : "AsyncGeneratorCompleteStep",
  "sec-static-semantics-containsexpression|BindingElementList|BindingElementList|,|BindingElisionElement" : "[ContainsExpression] BindingElementList : BindingElementList , BindingElisionElement",
  "sec-getiteratorfrommethod" : "GetIteratorFromMethod",
  "sec-static-semantics-varscopeddeclarations|StatementListItem|Declaration" : "[VarScopedDeclarations] StatementListItem : Declaration",
  "sec-runtime-semantics-stringnumericvalue|StringNumericLiteral|StrNumericLiteral" : "[StringNumericValue] StringNumericLiteral : StrNumericLiteral",
  "sec-issuperreference" : "IsSuperReference",
  "sec-string.prototype.towellformed" : "String.prototype.toWellFormed",
  "sec-patterns-static-semantics-character-value|RegExpUnicodeEscapeSequence|u|HexLeadSurrogate|\\u|HexTrailSurrogate" : "[CharacterValue] RegExpUnicodeEscapeSequence : u HexLeadSurrogate \\u HexTrailSurrogate",
  "sec-static-semantics-modulerequests|ExportDeclaration|export|VariableStatement" : "[ModuleRequests] ExportDeclaration : export VariableStatement",
  "sec-static-semantics-hascallintailposition|TryStatement|try|Block|Catch|Finally" : "[HasCallInTailPosition] TryStatement : try Block Catch Finally",
  "sec-ordinarysetwithowndescriptor" : "OrdinarySetWithOwnDescriptor",
  "sec-date.prototype.valueof" : "Date.prototype.valueOf",
  "sec-compiletocharset|ClassAtomNoDash|SourceCharacter" : "[CompileToCharSet] ClassAtomNoDash : SourceCharacter",
  "sec-ordinaryisextensible" : "OrdinaryIsExtensible",
  "sec-ordinaryownpropertykeys" : "OrdinaryOwnPropertyKeys",
  "sec-math.log2" : "Math.log2",
  "sec-compileassertion|Assertion|(?<=|Disjunction|)" : "[CompileAssertion] Assertion : (?<= Disjunction )",
  "sec-static-semantics-toplevelvardeclarednames|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[TopLevelVarDeclaredNames] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-static-semantics-exportedbindings|ModuleItem|StatementListItem" : "[ExportedBindings] ModuleItem : StatementListItem",
  "sec-runtime-semantics-bindinginitialization|BindingIdentifier|Identifier" : "[BindingInitialization] BindingIdentifier : Identifier",
  "sec-static-semantics-toplevellexicallyscopeddeclarations|StatementListItem|Statement" : "[TopLevelLexicallyScopedDeclarations] StatementListItem : Statement",
  "sec-static-semantics-containsexpression|ArrayBindingPattern|[|BindingElementList|,|]" : "[ContainsExpression] ArrayBindingPattern : [ BindingElementList , ]",
  "sec-bigint.prototype.valueof" : "BigInt.prototype.valueOf",
  "sec-ordinarydefineownproperty" : "OrdinaryDefineOwnProperty",
  "sec-module-namespace-exotic-objects-getprototypeof" : "[[GetPrototypeOf]]",
  "sec-compiletocharset|NonemptyClassRanges|ClassAtom|-|ClassAtom|ClassContents" : "[CompileToCharSet] NonemptyClassRanges : ClassAtom - ClassAtom ClassContents",
  "sec-static-semantics-lexicallydeclarednames|FunctionStatementList" : "[LexicallyDeclaredNames] FunctionStatementList :",
  "sec-%asyncfromsynciteratorprototype%.throw" : "AsyncFromSyncIteratorPrototype.throw",
  "sec-static-semantics-lexicallydeclarednames|Script" : "[LexicallyDeclaredNames] Script :",
  "sec-compilepattern" : "Pattern[0,0].CompilePattern:clo0",
  "sec-numeric-types-bigint-multiply" : "BigInt::multiply",
  "sec-static-semantics-vardeclarednames|WithStatement|with|(|Expression|)|Statement" : "[VarDeclaredNames] WithStatement : with ( Expression ) Statement",
  "sec-getpromiseresolve" : "GetPromiseResolve",
  "sec-weakmap.prototype.set" : "WeakMap.prototype.set",
  "sec-compiletocharset|ClassEscape|CharacterEscape" : "[CompileToCharSet] ClassEscape : CharacterEscape",
  "sec-static-semantics-hascallintailposition|MemberExpression|MemberExpression|.|IdentifierName" : "[HasCallInTailPosition] MemberExpression : MemberExpression . IdentifierName",
  "sec-static-semantics-containsduplicatelabels|WhileStatement|while|(|Expression|)|Statement" : "[ContainsDuplicateLabels] WhileStatement : while ( Expression ) Statement",
  "sec-patterns-static-semantics-is-character-class|ClassAtom|-" : "[IsCharacterClass] ClassAtom : -",
  "sec-createperiterationenvironment" : "CreatePerIterationEnvironment",
  "sec-numeric-types-bigint-exponentiate" : "BigInt::exponentiate",
  "sec-static-semantics-isconstantdeclaration|LetOrConst|let" : "[IsConstantDeclaration] LetOrConst : let",
  "sec-runtime-semantics-forinofheadevaluation" : "ForIn/OfHeadEvaluation",
  "sec-static-semantics-assignmenttargettype|IdentifierReference|yield" : "[AssignmentTargetType] IdentifierReference : yield",
  "sec-static-semantics-boundnames|FormalParameters|FormalParameterList|,|FunctionRestParameter" : "[BoundNames] FormalParameters : FormalParameterList , FunctionRestParameter",
  "sec-dataview.prototype.getbiguint64" : "DataView.prototype.getBigUint64",
  "sec-static-semantics-isfunctiondefinition|LeftHandSideExpression|OptionalExpression" : "[IsFunctionDefinition] LeftHandSideExpression : OptionalExpression",
  "sec-static-semantics-assignmenttargettype|CallExpression|CallExpression|[|Expression|]" : "[AssignmentTargetType] CallExpression : CallExpression [ Expression ]",
  "sec-numeric-types-bigint-unsignedRightShift" : "BigInt::unsignedRightShift",
  "sec-static-semantics-containsduplicatelabels|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[ContainsDuplicateLabels] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-iteratorvalue" : "IteratorValue",
  "sec-addition-operator-plus-runtime-semantics-evaluation|AdditiveExpression|AdditiveExpression|+|MultiplicativeExpression" : "[Evaluation] AdditiveExpression : AdditiveExpression + MultiplicativeExpression",
  "sec-static-semantics-containsduplicatelabels|Catch|catch|(|CatchParameter|)|Block" : "[ContainsDuplicateLabels] Catch : catch ( CatchParameter ) Block",
  "sec-importedlocalnames" : "ImportedLocalNames",
  "sec-runtime-semantics-destructuringassignmentevaluation|ObjectAssignmentPattern|{|AssignmentPropertyList|,|AssignmentRestProperty|}" : "[DestructuringAssignmentEvaluation] ObjectAssignmentPattern : { AssignmentPropertyList , AssignmentRestProperty }",
  "sec-static-semantics-importentries|ModuleItem|ExportDeclaration" : "[ImportEntries] ModuleItem : ExportDeclaration",
  "sec-symboldescriptivestring" : "SymbolDescriptiveString",
  "sec-createmappedargumentsobject" : "CreateMappedArgumentsObject",
  "sec-static-semantics-contains|GeneratorDeclaration|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[Contains] GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }",
  "sec-dataview.prototype.getfloat64" : "DataView.prototype.getFloat64",
  "sec-proxy-object-internal-methods-and-internal-slots-preventextensions" : "[[PreventExtensions]]",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|LexicalDeclaration|Expression|;|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( LexicalDeclaration Expression ; Expression ) Statement",
  "sec-object.prototype.tostring" : "Object.prototype.toString",
  "sec-static-semantics-containsexpression|FormalParameterList|FormalParameterList|,|FormalParameter" : "[ContainsExpression] FormalParameterList : FormalParameterList , FormalParameter",
  "sec-createintrinsics" : "CreateIntrinsics",
  "sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver" : "[[Get]]",
  "sec-static-semantics-isconstantdeclaration|FunctionDeclaration|function|(|FormalParameters|)|{|FunctionBody|}" : "[IsConstantDeclaration] FunctionDeclaration : function ( FormalParameters ) { FunctionBody }",
  "sec-date.prototype.toisostring" : "Date.prototype.toISOString",
  "sec-relational-operators-runtime-semantics-evaluation|RelationalExpression|RelationalExpression|>|ShiftExpression" : "[Evaluation] RelationalExpression : RelationalExpression > ShiftExpression",
  "sec-static-semantics-classelementevaluation|ClassElement|static|MethodDefinition" : "[ClassElementEvaluation] ClassElement : static MethodDefinition",
  "sec-optional-chaining-evaluation|OptionalExpression|CallExpression|OptionalChain" : "[Evaluation] OptionalExpression : CallExpression OptionalChain",
  "sec-math.sin" : "Math.sin",
  "sec-object.isfrozen" : "Object.isFrozen",
  "sec-date.prototype.setutcseconds" : "Date.prototype.setUTCSeconds",
  "sec-static-semantics-containsduplicatelabels|ModuleItemList|ModuleItemList|ModuleItem" : "[ContainsDuplicateLabels] ModuleItemList : ModuleItemList ModuleItem",
  "sec-regexpidentifiercodepoint|RegExpIdentifierStart|\\|RegExpUnicodeEscapeSequence" : "[RegExpIdentifierCodePoint] RegExpIdentifierStart : \\ RegExpUnicodeEscapeSequence",
  "sec-addtokeptobjects" : "AddToKeptObjects",
  "sec-copydataproperties" : "CopyDataProperties",
  "sec-static-semantics-isconstantdeclaration|FunctionDeclaration|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[IsConstantDeclaration] FunctionDeclaration : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-lexicallyscopeddeclarations|ModuleItem|ImportDeclaration" : "[LexicallyScopedDeclarations] ModuleItem : ImportDeclaration",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|Expression|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( var VariableDeclarationList ; Expression ; Expression ) Statement",
  "sec-statement-semantics-runtime-semantics-evaluation|HoistableDeclaration|GeneratorDeclaration" : "[Evaluation] HoistableDeclaration : GeneratorDeclaration",
  "sec-static-semantics-contains|AsyncFunctionDeclaration|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[Contains] AsyncFunctionDeclaration : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-modulerequests|ExportDeclaration|export|ExportFromClause|FromClause|;" : "[ModuleRequests] ExportDeclaration : export ExportFromClause FromClause ;",
  "sec-getnamedtimezoneepochnanoseconds" : "GetNamedTimeZoneEpochNanoseconds",
  "sec-static-semantics-computedpropertycontains|AsyncMethod|async|ClassElementName|(|UniqueFormalParameters|)|{|AsyncFunctionBody|}" : "[ComputedPropertyContains] AsyncMethod : async ClassElementName ( UniqueFormalParameters ) { AsyncFunctionBody }",
  "sec-daysinyear" : "DaysInYear",
  "sec-switch-statement-runtime-semantics-evaluation|SwitchStatement|switch|(|Expression|)|CaseBlock" : "[Evaluation] SwitchStatement : switch ( Expression ) CaseBlock",
  "sec-static-semantics-isidentifierref|PrimaryExpression|GeneratorExpression" : "[IsIdentifierRef] PrimaryExpression : GeneratorExpression",
  "sec-static-semantics-assignmenttargettype|RelationalExpression|PrivateIdentifier|in|ShiftExpression" : "[AssignmentTargetType] RelationalExpression : PrivateIdentifier in ShiftExpression",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|Expression|;|Expression|;|Expression|)|Statement" : "[VarDeclaredNames] ForStatement : for ( Expression ; Expression ; Expression ) Statement",
  "sec-static-semantics-containsundefinedbreaktarget|CaseBlock|{|}" : "[ContainsUndefinedBreakTarget] CaseBlock : { }",
  "sec-static-semantics-containsundefinedcontinuetarget|ForInOfStatement|for|await|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedContinueTarget] ForInOfStatement : for await ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-static-semantics-assignmenttargettype|AssignmentExpression|YieldExpression" : "[AssignmentTargetType] AssignmentExpression : YieldExpression",
  "sec-makeconstructor" : "MakeConstructor",
  "sec-static-semantics-exportednames|ModuleItemList|ModuleItemList|ModuleItem" : "[ExportedNames] ModuleItemList : ModuleItemList ModuleItem",
  "sec-static-semantics-boundnames|ArrayBindingPattern|[|Elision|BindingRestElement|]" : "[BoundNames] ArrayBindingPattern : [ Elision BindingRestElement ]",
  "sec-static-semantics-isconstantdeclaration|ExportDeclaration|export|default|AssignmentExpression|;" : "[IsConstantDeclaration] ExportDeclaration : export default AssignmentExpression ;",
  "sec-runtime-semantics-destructuringassignmentevaluation|ArrayAssignmentPattern|[|Elision|AssignmentRestElement|]" : "[DestructuringAssignmentEvaluation] ArrayAssignmentPattern : [ Elision AssignmentRestElement ]",
  "sec-static-semantics-privateboundidentifiers|ClassElement|;" : "[PrivateBoundIdentifiers] ClassElement : ;",
  "sec-compileatom|AtomEscape|CharacterClassEscape" : "[CompileAtom] AtomEscape : CharacterClassEscape",
  "sec-regexp.prototype.exec" : "RegExp.prototype.exec",
  "sec-regexpalloc" : "RegExpAlloc",
  "sec-atomicreadmodifywrite" : "AtomicReadModifyWrite",
  "sec-runtime-semantics-iteratordestructuringassignmentevaluation|AssignmentElisionElement|AssignmentElement" : "[IteratorDestructuringAssignmentEvaluation] AssignmentElisionElement : AssignmentElement",
  "sec-compilesubpattern|Alternative" : "[CompileSubpattern] Alternative :",
  "sec-static-semantics-isfunctiondefinition|FunctionExpression|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[IsFunctionDefinition] FunctionExpression : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-computedpropertycontains|AsyncGeneratorMethod|async|*|ClassElementName|(|UniqueFormalParameters|)|{|AsyncGeneratorBody|}" : "[ComputedPropertyContains] AsyncGeneratorMethod : async * ClassElementName ( UniqueFormalParameters ) { AsyncGeneratorBody }",
  "sec-runtime-semantics-loopevaluation|IterationStatement|ForInOfStatement" : "[LoopEvaluation] IterationStatement : ForInOfStatement",
  "sec-static-semantics-isfunctiondefinition|UnaryExpression|~|UnaryExpression" : "[IsFunctionDefinition] UnaryExpression : ~ UnaryExpression",
  "sec-let-and-const-declarations-runtime-semantics-evaluation|LexicalBinding|BindingIdentifier|Initializer" : "[Evaluation] LexicalBinding : BindingIdentifier Initializer",
  "sec-runtime-semantics-iteratorbindinginitialization|BindingElement|BindingPattern|Initializer" : "[IteratorBindingInitialization] BindingElement : BindingPattern Initializer",
  "sec-allocatetypedarray" : "AllocateTypedArray",
  "sec-date.prototype.getutcminutes" : "Date.prototype.getUTCMinutes",
  "sec-static-semantics-stringvalue|PrivateIdentifier|#|IdentifierName" : "[StringValue] PrivateIdentifier : # IdentifierName",
  "sec-class-definitions-runtime-semantics-evaluation|ClassExpression|class|ClassTail" : "[Evaluation] ClassExpression : class ClassTail",
  "sec-static-semantics-hascallintailposition|Catch|catch|(|CatchParameter|)|Block" : "[HasCallInTailPosition] Catch : catch ( CatchParameter ) Block",
  "sec-binary-bitwise-operators-runtime-semantics-evaluation|BitwiseORExpression|BitwiseORExpression|||BitwiseXORExpression" : "[Evaluation] BitwiseORExpression : BitwiseORExpression | BitwiseXORExpression",
  "sec-static-semantics-containsduplicatelabels|StatementList|StatementList|StatementListItem" : "[ContainsDuplicateLabels] StatementList : StatementList StatementListItem",
  "sec-static-semantics-hascallintailposition|OptionalChain|OptionalChain|.|PrivateIdentifier" : "[HasCallInTailPosition] OptionalChain : OptionalChain . PrivateIdentifier",
  "sec-static-semantics-exportednames|ExportDeclaration|export|VariableStatement" : "[ExportedNames] ExportDeclaration : export VariableStatement",
  "sec-FinishLoadingImportedModule" : "FinishLoadingImportedModule",
  "sec-static-semantics-lexicallydeclarednames|CaseBlock|{|}" : "[LexicallyDeclaredNames] CaseBlock : { }",
  "sec-static-semantics-iscomputedpropertykey|PropertyName|LiteralPropertyName" : "[IsComputedPropertyKey] PropertyName : LiteralPropertyName",
  "sec-static-semantics-importentries|Module" : "[ImportEntries] Module :",
  "sec-runtime-semantics-bindinginitialization|ObjectBindingPattern|{|BindingPropertyList|,|BindingRestProperty|}" : "[BindingInitialization] ObjectBindingPattern : { BindingPropertyList , BindingRestProperty }",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|AsyncGeneratorExpression" : "[HasCallInTailPosition] PrimaryExpression : AsyncGeneratorExpression",
  "sec-number.isfinite" : "Number.isFinite",
  "sec-createlistiteratorRecord" : "CreateListIteratorRecord",
  "sec-static-semantics-hascallintailposition|ExponentiationExpression|UpdateExpression|**|ExponentiationExpression" : "[HasCallInTailPosition] ExponentiationExpression : UpdateExpression ** ExponentiationExpression",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|Expression|;|;|Expression|)|Statement" : "[VarDeclaredNames] ForStatement : for ( Expression ; ; Expression ) Statement",
  "sec-static-semantics-hascallintailposition|AssignmentExpression|LeftHandSideExpression|||=|AssignmentExpression" : "[HasCallInTailPosition] AssignmentExpression : LeftHandSideExpression ||= AssignmentExpression",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( var VariableDeclarationList ; Expression ; Expression ) Statement",
  "sec-static-semantics-vardeclarednames|Statement|DebuggerStatement" : "[VarDeclaredNames] Statement : DebuggerStatement",
  "sec-finalization-registry.prototype.unregister" : "FinalizationRegistry.prototype.unregister",
  "sec-static-semantics-assignmenttargettype|CallExpression|CallExpression|.|PrivateIdentifier" : "[AssignmentTargetType] CallExpression : CallExpression . PrivateIdentifier",
  "sec-proxy-object-internal-methods-and-internal-slots-delete-p" : "[[Delete]]",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|var|VariableDeclarationList|;|;|Expression|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( var VariableDeclarationList ; ; Expression ) Statement",
  "sec-static-semantics-containsexpression|ArrayBindingPattern|[|Elision|BindingRestElement|]" : "[ContainsExpression] ArrayBindingPattern : [ Elision BindingRestElement ]",
  "sec-regexp.prototype-@@search" : "RegExp.prototype[@@search]",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|var|VariableDeclarationList|;|;|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( var VariableDeclarationList ; ; Expression ) Statement",
  "sec-array.prototype.every" : "Array.prototype.every",
  "sec-iteratorclose" : "IteratorClose",
  "sec-immutable-prototype-exotic-objects-setprototypeof-v" : "[[SetPrototypeOf]]",
  "sec-static-semantics-containsundefinedcontinuetarget|ClassStaticBlockStatementList" : "[ContainsUndefinedContinueTarget] ClassStaticBlockStatementList :",
  "sec-runtime-semantics-labelledevaluation|Statement|VariableStatement" : "[LabelledEvaluation] Statement : VariableStatement",
  "sec-static-semantics-assignmenttargettype|AdditiveExpression|AdditiveExpression|-|MultiplicativeExpression" : "[AssignmentTargetType] AdditiveExpression : AdditiveExpression - MultiplicativeExpression",
  "sec-static-semantics-isfunctiondefinition|RelationalExpression|PrivateIdentifier|in|ShiftExpression" : "[IsFunctionDefinition] RelationalExpression : PrivateIdentifier in ShiftExpression",
  "sec-static-semantics-hascallintailposition|Statement|ExpressionStatement" : "[HasCallInTailPosition] Statement : ExpressionStatement",
  "sec-getarraybuffermaxbytelengthoption" : "GetArrayBufferMaxByteLengthOption",
  "sec-static-semantics-referencedbindings|NamedExports|{|}" : "[ReferencedBindings] NamedExports : { }",
  "sec-asyncgenerator-prototype-next" : "AsyncGeneratorFunction.prototype.prototype.next",
  "sec-static-semantics-assignmenttargettype|UnaryExpression|typeof|UnaryExpression" : "[AssignmentTargetType] UnaryExpression : typeof UnaryExpression",
  "sec-super-keyword-runtime-semantics-evaluation|SuperProperty|super|.|IdentifierName" : "[Evaluation] SuperProperty : super . IdentifierName",
  "sec-rawbytestonumeric" : "RawBytesToNumeric",
  "sec-numericvalue|NumericLiteral|LegacyOctalIntegerLiteral" : "[NumericValue] NumericLiteral : LegacyOctalIntegerLiteral",
  "sec-static-semantics-hascallintailposition|BitwiseANDExpression|BitwiseANDExpression|&|EqualityExpression" : "[HasCallInTailPosition] BitwiseANDExpression : BitwiseANDExpression & EqualityExpression",
  "sec-regexphasflag" : "RegExpHasFlag",
  "sec-getthisenvironment" : "GetThisEnvironment",
  "sec-static-semantics-containsexpression|FormalParameters" : "[ContainsExpression] FormalParameters :",
  "sec-atomics.and" : "Atomics.and",
  "sec-new-operator-runtime-semantics-evaluation|MemberExpression|new|MemberExpression|Arguments" : "[Evaluation] MemberExpression : new MemberExpression Arguments",
  "sec-runtime-semantics-iteratordestructuringassignmentevaluation|AssignmentRestElement|...|DestructuringAssignmentTarget" : "[IteratorDestructuringAssignmentEvaluation] AssignmentRestElement : ... DestructuringAssignmentTarget",
  "sec-numeric-types-number-subtract" : "Number::subtract",
  "sec-static-semantics-contains|MemberExpression|MemberExpression|.|IdentifierName" : "[Contains] MemberExpression : MemberExpression . IdentifierName",
  "sec-static-semantics-exportentriesformodule|ExportFromClause|*|as|ModuleExportName" : "[ExportEntriesForModule] ExportFromClause : * as ModuleExportName",
  "sec-%typedarray%.prototype.some" : "TypedArray.prototype.some",
  "sec-encode" : "Encode",
  "sec-stringtocodepoints" : "StringToCodePoints",
  "sec-async-arrow-function-definitions-runtime-semantics-evaluation|AsyncArrowFunction|CoverCallExpressionAndAsyncArrowHead|=>|AsyncConciseBody" : "[Evaluation] AsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead => AsyncConciseBody",
  "sec-static-semantics-hascallintailposition|ParenthesizedExpression|(|Expression|)" : "[HasCallInTailPosition] ParenthesizedExpression : ( Expression )",
  "sec-runtime-semantics-instantiategeneratorfunctionobject|GeneratorDeclaration|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[InstantiateGeneratorFunctionObject] GeneratorDeclaration : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-assignmenttargettype|UpdateExpression|--|UnaryExpression" : "[AssignmentTargetType] UpdateExpression : -- UnaryExpression",
  "sec-static-semantics-boundnames|ExportDeclaration|export|default|HoistableDeclaration" : "[BoundNames] ExportDeclaration : export default HoistableDeclaration",
  "sec-static-semantics-boundnames|BindingIdentifier|yield" : "[BoundNames] BindingIdentifier : yield",
  "sec-isunsignedelementtype" : "IsUnsignedElementType",
  "sec-string.prototype.normalize" : "String.prototype.normalize",
  "sec-quotejsonstring" : "QuoteJSONString",
  "sec-runtime-semantics-evaluateconcisebody|ConciseBody|ExpressionBody" : "[EvaluateConciseBody] ConciseBody : ExpressionBody",
  "sec-runtime-semantics-fordeclarationbindinginstantiation|ForDeclaration|LetOrConst|ForBinding" : "[ForDeclarationBindingInstantiation] ForDeclaration : LetOrConst ForBinding",
  "sec-runtime-semantics-stringnumericvalue|StrNumericLiteral|NonDecimalIntegerLiteral" : "[StringNumericValue] StrNumericLiteral : NonDecimalIntegerLiteral",
  "sec-static-semantics-importentriesformodule|NameSpaceImport|*|as|ImportedBinding" : "[ImportEntriesForModule] NameSpaceImport : * as ImportedBinding",
  "sec-patterns-static-semantics-character-value|CharacterEscape|ControlEscape" : "[CharacterValue] CharacterEscape : ControlEscape",
  "sec-codepointat" : "CodePointAt",
  "sec-static-semantics-assignmenttargettype|NewExpression|new|NewExpression" : "[AssignmentTargetType] NewExpression : new NewExpression",
  "sec-get-set-@@species" : "get Set[@@species]",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|AsyncFunctionExpression" : "[AssignmentTargetType] PrimaryExpression : AsyncFunctionExpression",
  "sec-weekday" : "WeekDay",
  "sec-static-semantics-maycontainstrings|ClassContents" : "[MayContainStrings] ClassContents :",
  "sec-finalization-registry.prototype.register" : "FinalizationRegistry.prototype.register",
  "sec-static-semantics-privateboundidentifiers|ClassElementName|PropertyName" : "[PrivateBoundIdentifiers] ClassElementName : PropertyName",
  "sec-static-semantics-propname|LiteralPropertyName|IdentifierName" : "[PropName] LiteralPropertyName : IdentifierName",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|;|Expression|;|Expression|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( ; Expression ; Expression ) Statement",
  "sec-resolvethisbinding" : "ResolveThisBinding",
  "sec-string.prototype.trimstart" : "String.prototype.trimStart",
  "sec-source-text-module-record-initialize-environment" : "InitializeEnvironment",
  "sec-runtime-semantics-argumentlistevaluation|ArgumentList|AssignmentExpression" : "[ArgumentListEvaluation] ArgumentList : AssignmentExpression",
  "sec-static-semantics-containsundefinedcontinuetarget|ContinueStatement|continue|;" : "[ContainsUndefinedContinueTarget] ContinueStatement : continue ;",
  "sec-static-semantics-toplevelvarscopeddeclarations|StatementList|StatementList|StatementListItem" : "[TopLevelVarScopedDeclarations] StatementList : StatementList StatementListItem",
  "sec-static-semantics-lexicallyscopeddeclarations|FunctionStatementList" : "[LexicallyScopedDeclarations] FunctionStatementList :",
  "sec-module-semantics-runtime-semantics-evaluation|Module" : "[Evaluation] Module :",
  "sec-static-semantics-exportednames|ModuleItem|ImportDeclaration" : "[ExportedNames] ModuleItem : ImportDeclaration",
  "sec-static-semantics-lexicallydeclarednames|CaseBlock|{|DefaultClause|CaseClauses|}" : "[LexicallyDeclaredNames] CaseBlock : { DefaultClause CaseClauses }",
  "sec-binary-logical-operators-runtime-semantics-evaluation|LogicalORExpression|LogicalORExpression||||LogicalANDExpression" : "[Evaluation] LogicalORExpression : LogicalORExpression || LogicalANDExpression",
  "sec-date.prototype.setmonth" : "Date.prototype.setMonth",
  "sec-runtime-semantics-namedevaluation|AsyncArrowFunction|async|AsyncArrowBindingIdentifier|=>|AsyncConciseBody" : "[NamedEvaluation] AsyncArrowFunction : async AsyncArrowBindingIdentifier => AsyncConciseBody",
  "sec-static-semantics-containsduplicatelabels|CaseClauses|CaseClauses|CaseClause" : "[ContainsDuplicateLabels] CaseClauses : CaseClauses CaseClause",
  "sec-%typedarray%.prototype.set" : "TypedArray.prototype.set",
  "sec-map-iterable" : "Map",
  "sec-static-semantics-varscopeddeclarations|SwitchStatement|switch|(|Expression|)|CaseBlock" : "[VarScopedDeclarations] SwitchStatement : switch ( Expression ) CaseBlock",
  "sec-statement-semantics-runtime-semantics-evaluation|HoistableDeclaration|FunctionDeclaration" : "[Evaluation] HoistableDeclaration : FunctionDeclaration",
  "sec-static-semantics-hasdirectsuper|MethodDefinition|set|ClassElementName|(|PropertySetParameterList|)|{|FunctionBody|}" : "[HasDirectSuper] MethodDefinition : set ClassElementName ( PropertySetParameterList ) { FunctionBody }",
  "sec-static-semantics-containsundefinedbreaktarget|WithStatement|with|(|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] WithStatement : with ( Expression ) Statement",
  "sec-static-semantics-isconstantdeclaration|AsyncFunctionDeclaration|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[IsConstantDeclaration] AsyncFunctionDeclaration : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-specialmethod|MethodDefinition|AsyncMethod" : "[SpecialMethod] MethodDefinition : AsyncMethod",
  "sec-binaryand" : "BinaryAnd",
  "sec-static-semantics-boundnames|AsyncGeneratorDeclaration|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[BoundNames] AsyncGeneratorDeclaration : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-object.prototype.tolocalestring" : "Object.prototype.toLocaleString",
  "sec-object.entries" : "Object.entries",
  "sec-patterns-static-semantics-character-value|CharacterEscape|HexEscapeSequence" : "[CharacterValue] CharacterEscape : HexEscapeSequence",
  "sec-static-semantics-isfunctiondefinition|MemberExpression|new|MemberExpression|Arguments" : "[IsFunctionDefinition] MemberExpression : new MemberExpression Arguments",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|RegularExpressionLiteral" : "[HasCallInTailPosition] PrimaryExpression : RegularExpressionLiteral",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|AsyncFunctionExpression" : "[HasCallInTailPosition] PrimaryExpression : AsyncFunctionExpression",
  "sec-static-semantics-containsundefinedcontinuetarget|ForInOfStatement|for|(|var|ForBinding|in|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForInOfStatement : for ( var ForBinding in Expression ) Statement",
  "sec-tolength" : "ToLength",
  "sec-initializetypedarrayfromtypedarray" : "InitializeTypedArrayFromTypedArray",
  "sec-static-semantics-modulerequests|ImportDeclaration|import|ImportClause|FromClause|;" : "[ModuleRequests] ImportDeclaration : import ImportClause FromClause ;",
  "sec-%stringiteratorprototype%.next" : "StringIteratorPrototype.next",
  "sec-frompropertydescriptor" : "FromPropertyDescriptor",
  "sec-date.prototype.getseconds" : "Date.prototype.getSeconds",
  "sec-newobjectenvironment" : "NewObjectEnvironment",
  "sec-runtime-semantics-propertydestructuringassignmentevaluation|AssignmentProperty|IdentifierReference|Initializer" : "[PropertyDestructuringAssignmentEvaluation] AssignmentProperty : IdentifierReference Initializer",
  "sec-invoke" : "Invoke",
  "sec-static-semantics-boundnames|ExportDeclaration|export|ExportFromClause|FromClause|;" : "[BoundNames] ExportDeclaration : export ExportFromClause FromClause ;",
  "sec-createunmappedargumentsobject" : "CreateUnmappedArgumentsObject",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|Expression|;|Expression|;|Expression|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( Expression ; Expression ; Expression ) Statement",
  "sec-compileatom|AtomEscape|k|GroupName" : "[CompileAtom] AtomEscape : k GroupName",
  "sec-setrealmglobalobject" : "SetRealmGlobalObject",
  "sec-static-semantics-isfunctiondefinition|BitwiseANDExpression|BitwiseANDExpression|&|EqualityExpression" : "[IsFunctionDefinition] BitwiseANDExpression : BitwiseANDExpression & EqualityExpression",
  "sec-object-environment-records-getbindingvalue-n-s" : "GetBindingValue",
  "sec-runtime-semantics-instantiateasyncarrowfunctionexpression|AsyncArrowFunction|CoverCallExpressionAndAsyncArrowHead|=>|AsyncConciseBody" : "[InstantiateAsyncArrowFunctionExpression] AsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead => AsyncConciseBody",
  "sec-generator.prototype.throw" : "GeneratorFunction.prototype.prototype.throw",
  "sec-static-semantics-exportentriesformodule|ExportSpecifier|ModuleExportName|as|ModuleExportName" : "[ExportEntriesForModule] ExportSpecifier : ModuleExportName as ModuleExportName",
  "sec-string.prototype.includes" : "String.prototype.includes",
  "sec-decodeuricomponent-encodeduricomponent" : "decodeURIComponent",
  "sec-throwcompletion" : "ThrowCompletion",
  "sec-sortindexedproperties" : "SortIndexedProperties",
  "sec-module-namespace-exotic-objects-hasproperty-p" : "[[HasProperty]]",
  "sec-static-semantics-templatestrings|TemplateMiddleList|TemplateMiddleList|TemplateMiddle|Expression" : "[TemplateStrings] TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression",
  "sec-string.prototype.concat" : "String.prototype.concat",
  "sec-static-semantics-assignmenttargettype|ImportMeta|import|.|meta" : "[AssignmentTargetType] ImportMeta : import . meta",
  "sec-runtime-semantics-instantiateasyncfunctionobject|AsyncFunctionDeclaration|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[InstantiateAsyncFunctionObject] AsyncFunctionDeclaration : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-typedarray-hasproperty" : "[[HasProperty]]",
  "sec-static-semantics-computedpropertycontains|PropertyName|ComputedPropertyName" : "[ComputedPropertyContains] PropertyName : ComputedPropertyName",
  "sec-static-semantics-isidentifierref|MemberExpression|MetaProperty" : "[IsIdentifierRef] MemberExpression : MetaProperty",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|;|;|Expression|)|Statement" : "[VarDeclaredNames] ForStatement : for ( ; ; Expression ) Statement",
  "sec-number.isinteger" : "Number.isInteger",
  "sec-tagged-templates-runtime-semantics-evaluation|CallExpression|CallExpression|TemplateLiteral" : "[Evaluation] CallExpression : CallExpression TemplateLiteral",
  "sec-utf16decodesurrogatepair" : "UTF16SurrogatePairToCodePoint",
  "sec-static-semantics-modulerequests|ModuleSpecifier|StringLiteral" : "[ModuleRequests] ModuleSpecifier : StringLiteral",
  "sec-static-semantics-isfunctiondefinition|MemberExpression|MemberExpression|[|Expression|]" : "[IsFunctionDefinition] MemberExpression : MemberExpression [ Expression ]",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|Expression|;|Expression|;|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( Expression ; Expression ; ) Statement",
  "sec-json.stringify" : "JSON.stringify",
  "sec-date.prototype.setutchours" : "Date.prototype.setUTCHours",
  "sec-static-semantics-assignmenttargettype|Expression|Expression|,|AssignmentExpression" : "[AssignmentTargetType] Expression : Expression , AssignmentExpression",
  "sec-array.prototype.findlastindex" : "Array.prototype.findLastIndex",
  "sec-runtime-semantics-stringnumericvalue|StringNumericLiteral|StrNumericLiteral|StrWhiteSpace" : "[StringNumericValue] StringNumericLiteral : StrNumericLiteral StrWhiteSpace",
  "sec-static-semantics-lexicallydeclarednames|CaseBlock|{|DefaultClause|}" : "[LexicallyDeclaredNames] CaseBlock : { DefaultClause }",
  "sec-istimezoneoffsetstring" : "IsTimeZoneOffsetString",
  "sec-static-semantics-containsundefinedcontinuetarget|CaseBlock|{|CaseClauses|DefaultClause|CaseClauses|}" : "[ContainsUndefinedContinueTarget] CaseBlock : { CaseClauses DefaultClause CaseClauses }",
  "sec-static-semantics-maycontainstrings|ClassIntersection|ClassSetOperand|&&|ClassSetOperand" : "[MayContainStrings] ClassIntersection : ClassSetOperand && ClassSetOperand",
  "sec-runtime-semantics-namedevaluation|AsyncGeneratorExpression|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[NamedEvaluation] AsyncGeneratorExpression : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-hascallintailposition|OptionalChain|OptionalChain|Arguments" : "[HasCallInTailPosition] OptionalChain : OptionalChain Arguments",
  "sec-static-semantics-issimpleparameterlist|SingleNameBinding|BindingIdentifier" : "[IsSimpleParameterList] SingleNameBinding : BindingIdentifier",
  "sec-agentsignifier" : "AgentSignifier",
  "sec-map.prototype.keys" : "Map.prototype.keys",
  "sec-runtime-semantics-stringnumericvalue|StrUnsignedDecimalLiteral|DecimalDigits|ExponentPart" : "[StringNumericValue] StrUnsignedDecimalLiteral : DecimalDigits ExponentPart",
  "sec-static-semantics-hascallintailposition|CaseBlock|{|}" : "[HasCallInTailPosition] CaseBlock : { }",
  "sec-runtime-semantics-methoddefinitionevaluation|MethodDefinition|set|ClassElementName|(|PropertySetParameterList|)|{|FunctionBody|}" : "[MethodDefinitionEvaluation] MethodDefinition : set ClassElementName ( PropertySetParameterList ) { FunctionBody }",
  "sec-static-semantics-containsundefinedbreaktarget|WhileStatement|while|(|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] WhileStatement : while ( Expression ) Statement",
  "sec-suspendthisagent" : "SuspendThisAgent",
  "sec-property-accessors-runtime-semantics-evaluation|MemberExpression|MemberExpression|.|PrivateIdentifier" : "[Evaluation] MemberExpression : MemberExpression . PrivateIdentifier",
  "sec-runtime-semantics-namedevaluation|AsyncFunctionExpression|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[NamedEvaluation] AsyncFunctionExpression : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-%asyncfromsynciteratorprototype%.next" : "AsyncFromSyncIteratorPrototype.next",
  "sec-static-semantics-lexicallydeclarednames|DefaultClause|default|:" : "[LexicallyDeclaredNames] DefaultClause : default :",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( var VariableDeclarationList ; Expression ; ) Statement",
  "sec-reflect.setprototypeof" : "Reflect.setPrototypeOf",
  "sec-static-semantics-privateboundidentifiers|MethodDefinition|ClassElementName|(|UniqueFormalParameters|)|{|FunctionBody|}" : "[PrivateBoundIdentifiers] MethodDefinition : ClassElementName ( UniqueFormalParameters ) { FunctionBody }",
  "sec-module-semantics-runtime-semantics-evaluation|ModuleItem|ImportDeclaration" : "[Evaluation] ModuleItem : ImportDeclaration",
  "sec-runtime-semantics-argumentlistevaluation|Arguments|(|)" : "[ArgumentListEvaluation] Arguments : ( )",
  "sec-runtime-semantics-argumentlistevaluation|TemplateLiteral|SubstitutionTemplate" : "[ArgumentListEvaluation] TemplateLiteral : SubstitutionTemplate",
  "sec-settypedarrayfromarraylike" : "SetTypedArrayFromArrayLike",
  "sec-number.prototype.toprecision" : "Number.prototype.toPrecision",
  "sec-ordinarycreatefromconstructor" : "OrdinaryCreateFromConstructor",
  "sec-static-semantics-containsexpression|ArrayBindingPattern|[|Elision|]" : "[ContainsExpression] ArrayBindingPattern : [ Elision ]",
  "sec-static-semantics-maycontainstrings|UnicodePropertyValueExpression|LoneUnicodePropertyNameOrValue" : "[MayContainStrings] UnicodePropertyValueExpression : LoneUnicodePropertyNameOrValue",
  "sec-static-semantics-isstatic|ClassElement|ClassStaticBlock" : "[IsStatic] ClassElement : ClassStaticBlock",
  "sec-static-semantics-computedpropertycontains|MethodDefinition|set|ClassElementName|(|PropertySetParameterList|)|{|FunctionBody|}" : "[ComputedPropertyContains] MethodDefinition : set ClassElementName ( PropertySetParameterList ) { FunctionBody }",
  "sec-get-arraybuffer.prototype.maxbytelength" : "get ArrayBuffer.prototype.maxByteLength",
  "sec-compiletocharset|ClassSetRange|ClassSetCharacter|-|ClassSetCharacter" : "[CompileToCharSet] ClassSetRange : ClassSetCharacter - ClassSetCharacter",
  "sec-ordinary-object-internal-methods-and-internal-slots-set-p-v-receiver" : "[[Set]]",
  "sec-proxy-object-internal-methods-and-internal-slots-getprototypeof" : "[[GetPrototypeOf]]",
  "sec-runtime-semantics-evaluatebody|FunctionBody|FunctionStatementList" : "[EvaluateBody] FunctionBody : FunctionStatementList",
  "sec-runtime-semantics-forinofloopevaluation|ForInOfStatement|for|await|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[ForInOfLoopEvaluation] ForInOfStatement : for await ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-asynciteratorprototype-asynciterator" : "AsyncIteratorPrototype[@@asyncIterator]",
  "sec-static-semantics-isfunctiondefinition|ShiftExpression|ShiftExpression|>>|AdditiveExpression" : "[IsFunctionDefinition] ShiftExpression : ShiftExpression >> AdditiveExpression",
  "sec-static-semantics-hascallintailposition|IfStatement|if|(|Expression|)|Statement|else|Statement" : "[HasCallInTailPosition] IfStatement : if ( Expression ) Statement else Statement",
  "sec-static-semantics-isfunctiondefinition|MemberExpression|MemberExpression|.|PrivateIdentifier" : "[IsFunctionDefinition] MemberExpression : MemberExpression . PrivateIdentifier",
  "sec-json.parse" : "JSON.parse",
  "sec-relational-operators-runtime-semantics-evaluation|RelationalExpression|RelationalExpression|>=|ShiftExpression" : "[Evaluation] RelationalExpression : RelationalExpression >= ShiftExpression",
  "sec-static-semantics-containsundefinedbreaktarget|TryStatement|try|Block|Finally" : "[ContainsUndefinedBreakTarget] TryStatement : try Block Finally",
  "sec-fulfillpromise" : "FulfillPromise",
  "sec-template-literals-runtime-semantics-evaluation|SubstitutionTemplate|TemplateHead|Expression|TemplateSpans" : "[Evaluation] SubstitutionTemplate : TemplateHead Expression TemplateSpans",
  "sec-static-semantics-varscopeddeclarations|WhileStatement|while|(|Expression|)|Statement" : "[VarScopedDeclarations] WhileStatement : while ( Expression ) Statement",
  "sec-map.prototype.has" : "Map.prototype.has",
  "sec-maybesimplecasefolding" : "MaybeSimpleCaseFolding",
  "sec-static-semantics-computedpropertycontains|MethodDefinition|ClassElementName|(|UniqueFormalParameters|)|{|FunctionBody|}" : "[ComputedPropertyContains] MethodDefinition : ClassElementName ( UniqueFormalParameters ) { FunctionBody }",
  "sec-runtime-semantics-keyedbindinginitialization|BindingElement|BindingPattern|Initializer" : "[KeyedBindingInitialization] BindingElement : BindingPattern Initializer",
  "sec-asyncgenerator-definitions-evaluation|AsyncGeneratorExpression|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[Evaluation] AsyncGeneratorExpression : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-propname|AsyncGeneratorMethod|async|*|ClassElementName|(|UniqueFormalParameters|)|{|AsyncGeneratorBody|}" : "[PropName] AsyncGeneratorMethod : async * ClassElementName ( UniqueFormalParameters ) { AsyncGeneratorBody }",
  "sec-compileatom|Atom|PatternCharacter" : "[CompileAtom] Atom : PatternCharacter",
  "sec-makebasicobject" : "MakeBasicObject",
  "sec-performpromiseall" : "PerformPromiseAll",
  "sec-static-semantics-boundnames|FormalParameters" : "[BoundNames] FormalParameters :",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|;|Expression|;|Expression|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( ; Expression ; Expression ) Statement",
  "sec-runtime-semantics-restdestructuringassignmentevaluation|AssignmentRestProperty|...|DestructuringAssignmentTarget" : "[RestDestructuringAssignmentEvaluation] AssignmentRestProperty : ... DestructuringAssignmentTarget",
  "sec-sharedarraybuffer-@@species" : "get SharedArrayBuffer[@@species]",
  "sec-arraybuffer-length" : "ArrayBuffer",
  "sec-removewaiter" : "RemoveWaiter",
  "sec-module-namespace-exotic-objects-isextensible" : "[[IsExtensible]]",
  "sec-static-semantics-vardeclarednames|TryStatement|try|Block|Catch|Finally" : "[VarDeclaredNames] TryStatement : try Block Catch Finally",
  "sec-get-arraybuffer-@@species" : "get ArrayBuffer[@@species]",
  "sec-string.prototype.codepointat" : "String.prototype.codePointAt",
  "sec-static-semantics-boundnames|ImportClause|ImportedDefaultBinding|,|NameSpaceImport" : "[BoundNames] ImportClause : ImportedDefaultBinding , NameSpaceImport",
  "sec-static-semantics-containsundefinedcontinuetarget|ForInOfStatement|for|(|ForDeclaration|in|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForInOfStatement : for ( ForDeclaration in Expression ) Statement",
  "sec-static-semantics-containsexpression|BindingRestElement|...|BindingIdentifier" : "[ContainsExpression] BindingRestElement : ... BindingIdentifier",
  "sec-isarraybufferviewoutofbounds" : "IsArrayBufferViewOutOfBounds",
  "sec-date.prototype.setutcdate" : "Date.prototype.setUTCDate",
  "sec-static-semantics-exportedbindings|ExportsList|ExportsList|,|ExportSpecifier" : "[ExportedBindings] ExportsList : ExportsList , ExportSpecifier",
  "sec-asyncgeneratorenqueue" : "AsyncGeneratorEnqueue",
  "sec-advancestringindex" : "AdvanceStringIndex",
  "sec-static-semantics-lexicallyscopeddeclarations|StatementList|StatementList|StatementListItem" : "[LexicallyScopedDeclarations] StatementList : StatementList StatementListItem",
  "sec-static-semantics-containsundefinedbreaktarget|SwitchStatement|switch|(|Expression|)|CaseBlock" : "[ContainsUndefinedBreakTarget] SwitchStatement : switch ( Expression ) CaseBlock",
  "sec-static-semantics-vardeclarednames|TryStatement|try|Block|Finally" : "[VarDeclaredNames] TryStatement : try Block Finally",
  "sec-static-semantics-classelementkind|ClassElement|;" : "[ClassElementKind] ClassElement : ;",
  "sec-static-semantics-propname|ClassElement|;" : "[PropName] ClassElement : ;",
  "sec-numeric-types-number-exponentiate" : "Number::exponentiate",
  "sec-static-semantics-containsexpression|BindingElisionElement|BindingElement" : "[ContainsExpression] BindingElisionElement : BindingElement",
  "sec-static-semantics-lexicallyscopeddeclarations|AsyncConciseBody|ExpressionBody" : "[LexicallyScopedDeclarations] AsyncConciseBody : ExpressionBody",
  "sec-dataview.prototype.setint8" : "DataView.prototype.setInt8",
  "sec-optional-chaining-chain-evaluation|OptionalChain|?.|IdentifierName" : "[ChainEvaluation] OptionalChain : ?. IdentifierName",
  "sec-static-semantics-isfunctiondefinition|UpdateExpression|LeftHandSideExpression|++" : "[IsFunctionDefinition] UpdateExpression : LeftHandSideExpression ++",
  "sec-static-semantics-isfunctiondefinition|ShiftExpression|ShiftExpression|<<|AdditiveExpression" : "[IsFunctionDefinition] ShiftExpression : ShiftExpression << AdditiveExpression",
  "sec-map.prototype.clear" : "Map.prototype.clear",
  "sec-math.cosh" : "Math.cosh",
  "sec-sharedarraybuffer.prototype.grow" : "SharedArrayBuffer.prototype.grow",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|;|;|Expression|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( ; ; Expression ) Statement",
  "sec-static-semantics-isfunctiondefinition|AssignmentExpression|LeftHandSideExpression|||=|AssignmentExpression" : "[IsFunctionDefinition] AssignmentExpression : LeftHandSideExpression ||= AssignmentExpression",
  "sec-static-semantics-containsundefinedcontinuetarget|Catch|catch|(|CatchParameter|)|Block" : "[ContainsUndefinedContinueTarget] Catch : catch ( CatchParameter ) Block",
  "sec-regexpbuiltinexec" : "RegExpBuiltinExec",
  "sec-global-environment-records-initializebinding-n-v" : "InitializeBinding",
  "sec-static-semantics-containsundefinedcontinuetarget|CaseBlock|{|DefaultClause|}" : "[ContainsUndefinedContinueTarget] CaseBlock : { DefaultClause }",
  "sec-runtime-semantics-labelledevaluation|BreakableStatement|IterationStatement" : "[LabelledEvaluation] BreakableStatement : IterationStatement",
  "sec-regexpidentifiercodepoint|RegExpIdentifierStart|IdentifierStartChar" : "[RegExpIdentifierCodePoint] RegExpIdentifierStart : IdentifierStartChar",
  "sec-math.min" : "Math.min",
  "sec-runtime-semantics-namedevaluation|PrimaryExpression|CoverParenthesizedExpressionAndArrowParameterList" : "[NamedEvaluation] PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-static-semantics-containsarguments|MethodDefinition|get|ClassElementName|(|)|{|FunctionBody|}" : "[ContainsArguments] MethodDefinition : get ClassElementName ( ) { FunctionBody }",
  "sec-runtime-semantics-evaluatebody|GeneratorBody|FunctionBody" : "[EvaluateBody] GeneratorBody : FunctionBody",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|ArrayLiteral" : "[AssignmentTargetType] PrimaryExpression : ArrayLiteral",
  "sec-static-semantics-maycontainstrings|ClassStringDisjunctionContents|ClassString|||ClassStringDisjunctionContents" : "[MayContainStrings] ClassStringDisjunctionContents : ClassString | ClassStringDisjunctionContents",
  "sec-ordinaryhasproperty" : "OrdinaryHasProperty",
  "sec-static-semantics-vardeclarednames|Statement|EmptyStatement" : "[VarDeclaredNames] Statement : EmptyStatement",
  "sec-regexpidentifiercodepoints|RegExpIdentifierName|RegExpIdentifierStart" : "[RegExpIdentifierCodePoints] RegExpIdentifierName : RegExpIdentifierStart",
  "sec-literals-runtime-semantics-evaluation|Literal|BooleanLiteral" : "[Evaluation] Literal : BooleanLiteral",
  "sec-string.prototype.tostring" : "String.prototype.toString",
  "sec-static-semantics-varscopeddeclarations|ModuleItem|ImportDeclaration" : "[VarScopedDeclarations] ModuleItem : ImportDeclaration",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|var|VariableDeclarationList|;|;|)|Statement" : "[VarDeclaredNames] ForStatement : for ( var VariableDeclarationList ; ; ) Statement",
  "sec-runtime-semantics-instantiategeneratorfunctionobject|GeneratorDeclaration|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[InstantiateGeneratorFunctionObject] GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }",
  "sec-sharedatablockeventset" : "SharedDataBlockEventSet",
  "sec-static-semantics-privateboundidentifiers|ClassElementList|ClassElementList|ClassElement" : "[PrivateBoundIdentifiers] ClassElementList : ClassElementList ClassElement",
  "sec-static-semantics-privateboundidentifiers|ClassElementName|PrivateIdentifier" : "[PrivateBoundIdentifiers] ClassElementName : PrivateIdentifier",
  "sec-date.prototype.setutcfullyear" : "Date.prototype.setUTCFullYear",
  "sec-static-semantics-propname|FieldDefinition|ClassElementName|Initializer" : "[PropName] FieldDefinition : ClassElementName Initializer",
  "sec-compiletocharset|NestedClass|[|ClassContents|]" : "[CompileToCharSet] NestedClass : [ ClassContents ]",
  "sec-asyncblockstart" : "AsyncBlockStart",
  "sec-static-semantics-varscopeddeclarations|ClassStaticBlockStatementList|StatementList" : "[VarScopedDeclarations] ClassStaticBlockStatementList : StatementList",
  "sec-static-semantics-lexicallyscopeddeclarations|ModuleItemList|ModuleItemList|ModuleItem" : "[LexicallyScopedDeclarations] ModuleItemList : ModuleItemList ModuleItem",
  "sec-static-semantics-containsundefinedcontinuetarget|ForInOfStatement|for|(|LeftHandSideExpression|in|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForInOfStatement : for ( LeftHandSideExpression in Expression ) Statement",
  "sec-static-semantics-isfunctiondefinition|ClassExpression|class|ClassTail" : "[IsFunctionDefinition] ClassExpression : class ClassTail",
  "sec-static-semantics-classelementevaluation|ClassElement|MethodDefinition" : "[ClassElementEvaluation] ClassElement : MethodDefinition",
  "sec-runtime-semantics-catchclauseevaluation|Catch|catch|(|CatchParameter|)|Block" : "[CatchClauseEvaluation] Catch : catch ( CatchParameter ) Block",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|Expression|;|Expression|;|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( Expression ; Expression ; ) Statement",
  "sec-asyncgeneratorawaitreturn" : "AsyncGeneratorAwaitReturn",
  "sec-atomics.waitasync" : "Atomics.waitAsync",
  "sec-static-semantics-vardeclarednames|DefaultClause|default|:" : "[VarDeclaredNames] DefaultClause : default :",
  "sec-static-semantics-hascallintailposition|CallExpression|SuperCall" : "[HasCallInTailPosition] CallExpression : SuperCall",
  "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression|AsyncGeneratorExpression|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[InstantiateAsyncGeneratorFunctionExpression] AsyncGeneratorExpression : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-hascallintailposition|AssignmentExpression|YieldExpression" : "[HasCallInTailPosition] AssignmentExpression : YieldExpression",
  "sec-performpromiserace" : "PerformPromiseRace",
  "sec-static-semantics-assignmenttargettype|AssignmentExpression|LeftHandSideExpression|&&=|AssignmentExpression" : "[AssignmentTargetType] AssignmentExpression : LeftHandSideExpression &&= AssignmentExpression",
  "sec-static-semantics-declarationpart|Declaration|LexicalDeclaration" : "[DeclarationPart] Declaration : LexicalDeclaration",
  "sec-global-environment-records-hasthisbinding" : "HasThisBinding",
  "sec-static-semantics-varscopeddeclarations|TryStatement|try|Block|Catch" : "[VarScopedDeclarations] TryStatement : try Block Catch",
  "sec-ecmascript-function-objects-construct-argumentslist-newtarget" : "[[Construct]]",
  "sec-static-semantics-hasdirectsuper|MethodDefinition|ClassElementName|(|UniqueFormalParameters|)|{|FunctionBody|}" : "[HasDirectSuper] MethodDefinition : ClassElementName ( UniqueFormalParameters ) { FunctionBody }",
  "sec-compilesubpattern|Term|Assertion" : "[CompileSubpattern] Term : Assertion",
  "sec-static-semantics-containsundefinedbreaktarget|CaseBlock|{|CaseClauses|DefaultClause|CaseClauses|}" : "[ContainsUndefinedBreakTarget] CaseBlock : { CaseClauses DefaultClause CaseClauses }",
  "sec-continue-statement-runtime-semantics-evaluation|ContinueStatement|continue|;" : "[Evaluation] ContinueStatement : continue ;",
  "sec-async-function-constructor-arguments" : "AsyncFunction",
  "sec-bound-function-exotic-objects-call-thisargument-argumentslist" : "[[Call]]",
  "sec-static-semantics-boundnames|VariableDeclarationList|VariableDeclarationList|,|VariableDeclaration" : "[BoundNames] VariableDeclarationList : VariableDeclarationList , VariableDeclaration",
  "sec-static-semantics-isfunctiondefinition|PrimaryExpression|ArrayLiteral" : "[IsFunctionDefinition] PrimaryExpression : ArrayLiteral",
  "sec-static-semantics-contains|OptionalChain|OptionalChain|.|IdentifierName" : "[Contains] OptionalChain : OptionalChain . IdentifierName",
  "sec-keyforsymbol" : "KeyForSymbol",
  "sec-dataview-buffer-byteoffset-bytelength" : "DataView",
  "sec-backreference-matcher" : "BackreferenceMatcher",
  "sec-static-semantics-lexicallyscopeddeclarations|CaseBlock|{|}" : "[LexicallyScopedDeclarations] CaseBlock : { }",
  "sec-get-set.prototype.size" : "get Set.prototype.size",
  "sec-compiletocharset|ClassSubtraction|ClassSubtraction|--|ClassSetOperand" : "[CompileToCharSet] ClassSubtraction : ClassSubtraction -- ClassSetOperand",
  "sec-static-semantics-issimpleparameterlist|ArrowParameters|CoverParenthesizedExpressionAndArrowParameterList" : "[IsSimpleParameterList] ArrowParameters : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-static-semantics-isdestructuring|MemberExpression|MemberExpression|.|IdentifierName" : "[IsDestructuring] MemberExpression : MemberExpression . IdentifierName",
  "sec-compiletocharset|ClassStringDisjunctionContents|ClassString|||ClassStringDisjunctionContents" : "[CompileToCharSet] ClassStringDisjunctionContents : ClassString | ClassStringDisjunctionContents",
  "sec-static-semantics-hascallintailposition|Statement|ContinueStatement" : "[HasCallInTailPosition] Statement : ContinueStatement",
  "sec-typedarray-getownproperty" : "[[GetOwnProperty]]",
  "sec-static-semantics-hascallintailposition|UnaryExpression|-|UnaryExpression" : "[HasCallInTailPosition] UnaryExpression : - UnaryExpression",
  "sec-get-%typedarray%.prototype.bytelength" : "get TypedArray.prototype.byteLength",
  "sec-runtime-semantics-propertydefinitionevaluation|PropertyDefinitionList|PropertyDefinitionList|,|PropertyDefinition" : "[PropertyDefinitionEvaluation] PropertyDefinitionList : PropertyDefinitionList , PropertyDefinition",
  "sec-static-semantics-hascallintailposition|UnaryExpression|!|UnaryExpression" : "[HasCallInTailPosition] UnaryExpression : ! UnaryExpression",
  "sec-weakset.prototype.add" : "WeakSet.prototype.add",
  "sec-runtime-semantics-destructuringassignmentevaluation|ArrayAssignmentPattern|[|AssignmentElementList|]" : "[DestructuringAssignmentEvaluation] ArrayAssignmentPattern : [ AssignmentElementList ]",
  "sec-statement-semantics-runtime-semantics-evaluation|BreakableStatement|SwitchStatement" : "[Evaluation] BreakableStatement : SwitchStatement",
  "sec-string.prototype.split" : "String.prototype.split",
  "sec-tobigint" : "ToBigInt",
  "sec-static-semantics-propname|FieldDefinition|ClassElementName" : "[PropName] FieldDefinition : ClassElementName",
  "sec-numeric-types-bigint-lessThan" : "BigInt::lessThan",
  "sec-numericvalue|NumericLiteral|NonDecimalIntegerLiteral" : "[NumericValue] NumericLiteral : NonDecimalIntegerLiteral",
  "sec-modulenamespacecreate" : "ModuleNamespaceCreate",
  "sec-source-text-module-record-execute-module" : "ExecuteModule",
  "sec-stringcreate" : "StringCreate",
  "sec-static-semantics-hascallintailposition|ForInOfStatement|for|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[HasCallInTailPosition] ForInOfStatement : for ( var ForBinding of AssignmentExpression ) Statement",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|LexicalDeclaration|Expression|;|Expression|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( LexicalDeclaration Expression ; Expression ) Statement",
  "sec-static-semantics-isdestructuring|MemberExpression|SuperProperty" : "[IsDestructuring] MemberExpression : SuperProperty",
  "sec-runtime-semantics-iteratorbindinginitialization|BindingRestElement|...|BindingPattern" : "[IteratorBindingInitialization] BindingRestElement : ... BindingPattern",
  "sec-compileatom|AtomEscape|CharacterEscape" : "[CompileAtom] AtomEscape : CharacterEscape",
  "sec-get-regexp.prototype.ignorecase" : "get RegExp.prototype.ignoreCase",
  "sec-static-semantics-hasdirectsuper|AsyncGeneratorMethod|async|*|ClassElementName|(|UniqueFormalParameters|)|{|AsyncGeneratorBody|}" : "[HasDirectSuper] AsyncGeneratorMethod : async * ClassElementName ( UniqueFormalParameters ) { AsyncGeneratorBody }",
  "sec-localtime" : "LocalTime",
  "sec-getmodifysetvalueinbuffer" : "GetModifySetValueInBuffer",
  "sec-static-semantics-computedpropertycontains|ClassElementList|ClassElementList|ClassElement" : "[ComputedPropertyContains] ClassElementList : ClassElementList ClassElement",
  "sec-runtime-semantics-destructuringassignmentevaluation|ArrayAssignmentPattern|[|AssignmentElementList|,|AssignmentRestElement|]" : "[DestructuringAssignmentEvaluation] ArrayAssignmentPattern : [ AssignmentElementList , AssignmentRestElement ]",
  "sec-escaperegexppattern" : "EscapeRegExpPattern",
  "sec-let-and-const-declarations-runtime-semantics-evaluation|LexicalBinding|BindingPattern|Initializer" : "[Evaluation] LexicalBinding : BindingPattern Initializer",
  "sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver" : "[[Set]]",
  "sec-weakset-iterable" : "WeakSet",
  "sec-static-semantics-expectedargumentcount|FormalParameters|FunctionRestParameter" : "[ExpectedArgumentCount] FormalParameters : FunctionRestParameter",
  "sec-generatorvalidate" : "GeneratorValidate",
  "sec-static-semantics-varscopeddeclarations|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[VarScopedDeclarations] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-static-semantics-allprivateidentifiersvalid|OptionalChain|?.|PrivateIdentifier" : "[AllPrivateIdentifiersValid] OptionalChain : ?. PrivateIdentifier",
  "sec-string-constructor-string-value" : "String",
  "sec-static-semantics-vardeclarednames|StatementList|StatementList|StatementListItem" : "[VarDeclaredNames] StatementList : StatementList StatementListItem",
  "sec-static-semantics-exportednames|ExportFromClause|*" : "[ExportedNames] ExportFromClause : *",
  "sec-static-semantics-contains|GeneratorDeclaration|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[Contains] GeneratorDeclaration : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-lexicallydeclarednames|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[LexicallyDeclaredNames] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|LexicalDeclaration|;|Expression|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( LexicalDeclaration ; Expression ) Statement",
  "sec-grouping-operator-runtime-semantics-evaluation|PrimaryExpression|CoverParenthesizedExpressionAndArrowParameterList" : "[Evaluation] PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-tozeropaddeddecimalstring" : "ToZeroPaddedDecimalString",
  "sec-promise-reject-functions" : "yet:PromiseRejectFunction",
  "sec-math.round" : "Math.round",
  "sec-property-accessors-runtime-semantics-evaluation|MemberExpression|MemberExpression|.|IdentifierName" : "[Evaluation] MemberExpression : MemberExpression . IdentifierName",
  "sec-string.prototype.matchall" : "String.prototype.matchAll",
  "sec-runtime-semantics-unicodematchproperty-p" : "UnicodeMatchProperty",
  "sec-set-immutable-prototype" : "SetImmutablePrototype",
  "sec-candeclareglobalfunction" : "CanDeclareGlobalFunction",
  "sec-number.isnan" : "Number.isNaN",
  "sec-static-semantics-containsundefinedbreaktarget|Statement|ContinueStatement" : "[ContainsUndefinedBreakTarget] Statement : ContinueStatement",
  "sec-performpromiseany" : "PerformPromiseAny",
  "sec-static-semantics-importentriesformodule|ImportClause|ImportedDefaultBinding|,|NamedImports" : "[ImportEntriesForModule] ImportClause : ImportedDefaultBinding , NamedImports",
  "sec-static-semantics-contains|AsyncGeneratorExpression|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[Contains] AsyncGeneratorExpression : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-error-message" : "Error",
  "sec-arraybuffer.prototype.resize" : "ArrayBuffer.prototype.resize",
  "sec-getidentifierreference" : "GetIdentifierReference",
  "sec-static-semantics-isfunctiondefinition|UpdateExpression|LeftHandSideExpression|--" : "[IsFunctionDefinition] UpdateExpression : LeftHandSideExpression --",
  "sec-static-semantics-hascallintailposition|EqualityExpression|EqualityExpression|!=|RelationalExpression" : "[HasCallInTailPosition] EqualityExpression : EqualityExpression != RelationalExpression",
  "sec-generator.prototype.next" : "GeneratorFunction.prototype.prototype.next",
  "sec-get-regexp.prototype.unicodesets" : "get RegExp.prototype.unicodeSets",
  "sec-static-semantics-stringvalue|BindingIdentifier|yield" : "[StringValue] BindingIdentifier : yield",
  "sec-binary-logical-operators-runtime-semantics-evaluation|CoalesceExpression|CoalesceExpressionHead|??|BitwiseORExpression" : "[Evaluation] CoalesceExpression : CoalesceExpressionHead ?? BitwiseORExpression",
  "sec-static-semantics-containsexpression|BindingPropertyList|BindingPropertyList|,|BindingProperty" : "[ContainsExpression] BindingPropertyList : BindingPropertyList , BindingProperty",
  "sec-date.prototype.toutcstring" : "Date.prototype.toUTCString",
  "sec-getutcepochnanoseconds" : "GetUTCEpochNanoseconds",
  "sec-static-semantics-containsundefinedcontinuetarget|Statement|ExpressionStatement" : "[ContainsUndefinedContinueTarget] Statement : ExpressionStatement",
  "sec-validatenonrevokedproxy" : "ValidateNonRevokedProxy",
  "sec-object.prototype.__lookupGetter__" : "Object.prototype.__lookupGetter__",
  "sec-compiletocharset|ClassUnion|ClassSetOperand" : "[CompileToCharSet] ClassUnion : ClassSetOperand",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|;|Expression|;|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( ; Expression ; ) Statement",
  "sec-typedarraylength" : "TypedArrayLength",
  "sec-static-semantics-varscopeddeclarations|CaseClause|case|Expression|:" : "[VarScopedDeclarations] CaseClause : case Expression :",
  "sec-runtime-semantics-iteratorbindinginitialization|BindingRestElement|...|BindingIdentifier" : "[IteratorBindingInitialization] BindingRestElement : ... BindingIdentifier",
  "sec-runtime-semantics-evaluatebody|ConciseBody|ExpressionBody" : "[EvaluateBody] ConciseBody : ExpressionBody",
  "sec-static-semantics-containsarguments|GeneratorMethod|*|ClassElementName|(|UniqueFormalParameters|)|{|GeneratorBody|}" : "[ContainsArguments] GeneratorMethod : * ClassElementName ( UniqueFormalParameters ) { GeneratorBody }",
  "sec-promise.prototype.then" : "Promise.prototype.then",
  "sec-regexp.prototype-@@split" : "RegExp.prototype[@@split]",
  "sec-static-semantics-varscopeddeclarations|FunctionStatementList" : "[VarScopedDeclarations] FunctionStatementList :",
  "sec-static-semantics-isfunctiondefinition|MultiplicativeExpression|MultiplicativeExpression|MultiplicativeOperator|ExponentiationExpression" : "[IsFunctionDefinition] MultiplicativeExpression : MultiplicativeExpression MultiplicativeOperator ExponentiationExpression",
  "sec-msfromtime" : "msFromTime",
  "sec-static-semantics-isidentifierref|LeftHandSideExpression|OptionalExpression" : "[IsIdentifierRef] LeftHandSideExpression : OptionalExpression",
  "sec-static-semantics-hascallintailposition|UnaryExpression|typeof|UnaryExpression" : "[HasCallInTailPosition] UnaryExpression : typeof UnaryExpression",
  "sec-static-semantics-containsduplicatelabels|Statement|BreakStatement" : "[ContainsDuplicateLabels] Statement : BreakStatement",
  "sec-compileclasssetstring|NonEmptyClassString|ClassSetCharacter|NonEmptyClassString" : "[CompileClassSetString] NonEmptyClassString : ClassSetCharacter NonEmptyClassString",
  "sec-static-semantics-hascallintailposition|BitwiseXORExpression|BitwiseXORExpression|^|BitwiseANDExpression" : "[HasCallInTailPosition] BitwiseXORExpression : BitwiseXORExpression ^ BitwiseANDExpression",
  "sec-getsubstitution" : "GetSubstitution",
  "sec-runtime-semantics-namedevaluation|ArrowFunction|ArrowParameters|=>|ConciseBody" : "[NamedEvaluation] ArrowFunction : ArrowParameters => ConciseBody",
  "sec-static-semantics-containsundefinedcontinuetarget|Statement|ThrowStatement" : "[ContainsUndefinedContinueTarget] Statement : ThrowStatement",
  "sec-runtime-semantics-instantiateordinaryfunctionexpression|FunctionExpression|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[InstantiateOrdinaryFunctionExpression] FunctionExpression : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-runtime-semantics-labelledevaluation|Statement|DebuggerStatement" : "[LabelledEvaluation] Statement : DebuggerStatement",
  "sec-static-semantics-exportentries|ModuleItemList|ModuleItemList|ModuleItem" : "[ExportEntries] ModuleItemList : ModuleItemList ModuleItem",
  "sec-declarative-environment-records-hasthisbinding" : "HasThisBinding",
  "sec-static-semantics-isidentifierref|PrimaryExpression|CoverParenthesizedExpressionAndArrowParameterList" : "[IsIdentifierRef] PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|;|;|Expression|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( ; ; Expression ) Statement",
  "sec-static-semantics-containsundefinedcontinuetarget|ForInOfStatement|for|await|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedContinueTarget] ForInOfStatement : for await ( var ForBinding of AssignmentExpression ) Statement",
  "sec-addrestrictedfunctionproperties" : "AddRestrictedFunctionProperties",
  "sec-toboolean" : "ToBoolean",
  "sec-static-semantics-containsduplicatelabels|IfStatement|if|(|Expression|)|Statement|else|Statement" : "[ContainsDuplicateLabels] IfStatement : if ( Expression ) Statement else Statement",
  "sec-math.imul" : "Math.imul",
  "sec-runtime-semantics-keyeddestructuringassignmentevaluation|AssignmentElement|DestructuringAssignmentTarget|Initializer" : "[KeyedDestructuringAssignmentEvaluation] AssignmentElement : DestructuringAssignmentTarget Initializer",
  "sec-array.from" : "Array.from",
  "sec-optional-chaining-chain-evaluation|OptionalChain|?.|PrivateIdentifier" : "[ChainEvaluation] OptionalChain : ?. PrivateIdentifier",
  "sec-function-definitions-runtime-semantics-evaluation|FunctionDeclaration|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[Evaluation] FunctionDeclaration : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-leavecriticalsection" : "LeaveCriticalSection",
  "sec-typedarray-get" : "[[Get]]",
  "sec-runtime-semantics-methoddefinitionevaluation|MethodDefinition|ClassElementName|(|UniqueFormalParameters|)|{|FunctionBody|}" : "[MethodDefinitionEvaluation] MethodDefinition : ClassElementName ( UniqueFormalParameters ) { FunctionBody }",
  "sec-regexpidentifiercodepoint|RegExpIdentifierPart|IdentifierPartChar" : "[RegExpIdentifierCodePoint] RegExpIdentifierPart : IdentifierPartChar",
  "sec-static-semantics-lexicallyscopeddeclarations|FunctionStatementList|StatementList" : "[LexicallyScopedDeclarations] FunctionStatementList : StatementList",
  "sec-object-environment-records-deletebinding-n" : "DeleteBinding",
  "sec-iscompatiblepropertydescriptor" : "IsCompatiblePropertyDescriptor",
  "sec-runtime-semantics-haseitherunicodeflag-abstract-operation" : "HasEitherUnicodeFlag",
  "sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset" : "ForIn/OfBodyEvaluation",
  "sec-regexpidentifiercodepoint|RegExpIdentifierPart|UnicodeLeadSurrogate|UnicodeTrailSurrogate" : "[RegExpIdentifierCodePoint] RegExpIdentifierPart : UnicodeLeadSurrogate UnicodeTrailSurrogate",
  "sec-exports-runtime-semantics-evaluation|ExportDeclaration|export|ExportFromClause|FromClause|;" : "[Evaluation] ExportDeclaration : export ExportFromClause FromClause ;",
  "sec-typedarray-ownpropertykeys" : "[[OwnPropertyKeys]]",
  "sec-date.prototype.setminutes" : "Date.prototype.setMinutes",
  "sec-numeric-types-bigint-remainder" : "BigInt::remainder",
  "sec-static-semantics-boundnames|FunctionDeclaration|function|(|FormalParameters|)|{|FunctionBody|}" : "[BoundNames] FunctionDeclaration : function ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-isfunctiondefinition|ShiftExpression|ShiftExpression|>>>|AdditiveExpression" : "[IsFunctionDefinition] ShiftExpression : ShiftExpression >>> AdditiveExpression",
  "sec-function.prototype.tostring" : "Function.prototype.toString",
  "sec-runtime-semantics-stringnumericvalue|StrUnsignedDecimalLiteral|.|DecimalDigits" : "[StringNumericValue] StrUnsignedDecimalLiteral : . DecimalDigits",
  "sec-for-in-and-for-of-statements-runtime-semantics-evaluation|BindingIdentifier|await" : "[Evaluation] BindingIdentifier : await",
  "sec-static-semantics-exportentriesformodule|ExportsList|ExportsList|,|ExportSpecifier" : "[ExportEntriesForModule] ExportsList : ExportsList , ExportSpecifier",
  "sec-static-semantics-lexicallyscopeddeclarations|LabelledItem|FunctionDeclaration" : "[LexicallyScopedDeclarations] LabelledItem : FunctionDeclaration",
  "sec-runtime-semantics-instantiateasyncgeneratorfunctionobject|AsyncGeneratorDeclaration|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[InstantiateAsyncGeneratorFunctionObject] AsyncGeneratorDeclaration : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-hascallintailposition|AssignmentExpression|ArrowFunction" : "[HasCallInTailPosition] AssignmentExpression : ArrowFunction",
  "sec-newglobalenvironment" : "NewGlobalEnvironment",
  "sec-availablenamedtimezoneidentifiers" : "AvailableNamedTimeZoneIdentifiers",
  "sec-static-semantics-propname|MethodDefinition|get|ClassElementName|(|)|{|FunctionBody|}" : "[PropName] MethodDefinition : get ClassElementName ( ) { FunctionBody }",
  "sec-isdetachedbuffer" : "IsDetachedBuffer",
  "sec-static-semantics-vardeclarednames|ClassStaticBlockStatementList" : "[VarDeclaredNames] ClassStaticBlockStatementList :",
  "sec-static-semantics-exportednames|ExportsList|ExportsList|,|ExportSpecifier" : "[ExportedNames] ExportsList : ExportsList , ExportSpecifier",
  "sec-static-semantics-isdestructuring|MemberExpression|MemberExpression|TemplateLiteral" : "[IsDestructuring] MemberExpression : MemberExpression TemplateLiteral",
  "sec-compileatom|Atom|CharacterClass" : "[CompileAtom] Atom : CharacterClass",
  "sec-async-function-definitions-runtime-semantics-evaluation|AwaitExpression|await|UnaryExpression" : "[Evaluation] AwaitExpression : await UnaryExpression",
  "sec-ordinarypreventextensions" : "OrdinaryPreventExtensions",
  "sec-static-semantics-stringvalue|Identifier|IdentifierName" : "[StringValue] Identifier : IdentifierName",
  "sec-module-semantics-runtime-semantics-evaluation|ModuleBody|ModuleItemList" : "[Evaluation] ModuleBody : ModuleItemList",
  "sec-static-semantics-exportedbindings|NamedExports|{|}" : "[ExportedBindings] NamedExports : { }",
  "sec-static-semantics-isconstantdeclaration|AsyncFunctionDeclaration|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[IsConstantDeclaration] AsyncFunctionDeclaration : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-%regexpstringiteratorprototype%.next" : "RegExpStringIteratorPrototype.next",
  "sec-reflect.deleteproperty" : "Reflect.deleteProperty",
  "sec-matchtwoalternatives" : "MatchTwoAlternatives",
  "sec-string.prototype.padend" : "String.prototype.padEnd",
  "sec-static-semantics-prototypepropertynamelist|ClassElementList|ClassElementList|ClassElement" : "[PrototypePropertyNameList] ClassElementList : ClassElementList ClassElement",
  "sec-promise.any-reject-element-functions" : "yet:`Promise.any`RejectElementFunction",
  "sec-compiletocharset|ClassSetOperand|ClassSetCharacter" : "[CompileToCharSet] ClassSetOperand : ClassSetCharacter",
  "sec-%typedarray%.prototype.foreach" : "TypedArray.prototype.forEach",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|Expression|;|Expression|;|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( Expression ; Expression ; Expression ) Statement",
  "sec-static-semantics-propname|ClassElement|ClassStaticBlock" : "[PropName] ClassElement : ClassStaticBlock",
  "sec-%mapiteratorprototype%.next" : "MapIteratorPrototype.next",
  "sec-runtime-semantics-bindinginitialization|ObjectBindingPattern|{|BindingPropertyList|,|}" : "[BindingInitialization] ObjectBindingPattern : { BindingPropertyList , }",
  "sec-functiondeclarationinstantiation" : "FunctionDeclarationInstantiation",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|FunctionExpression" : "[AssignmentTargetType] PrimaryExpression : FunctionExpression",
  "sec-static-semantics-iscomputedpropertykey|PropertyName|ComputedPropertyName" : "[IsComputedPropertyKey] PropertyName : ComputedPropertyName",
  "sec-static-semantics-toplevellexicallyscopeddeclarations|StatementListItem|Declaration" : "[TopLevelLexicallyScopedDeclarations] StatementListItem : Declaration",
  "sec-async-module-execution-rejected" : "AsyncModuleExecutionRejected",
  "sec-function-definitions-runtime-semantics-evaluation|FunctionExpression|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[Evaluation] FunctionExpression : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-generatoryield" : "GeneratorYield",
  "sec-static-semantics-containsduplicatelabels|TryStatement|try|Block|Catch" : "[ContainsDuplicateLabels] TryStatement : try Block Catch",
  "sec-static-semantics-varscopeddeclarations|ClassStaticBlockStatementList" : "[VarScopedDeclarations] ClassStaticBlockStatementList :",
  "sec-static-semantics-containsexpression|ObjectBindingPattern|{|BindingPropertyList|,|BindingRestProperty|}" : "[ContainsExpression] ObjectBindingPattern : { BindingPropertyList , BindingRestProperty }",
  "sec-runtime-semantics-namedevaluation|AsyncArrowFunction|CoverCallExpressionAndAsyncArrowHead|=>|AsyncConciseBody" : "[NamedEvaluation] AsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead => AsyncConciseBody",
  "sec-static-semantics-propname|GeneratorMethod|*|ClassElementName|(|UniqueFormalParameters|)|{|GeneratorBody|}" : "[PropName] GeneratorMethod : * ClassElementName ( UniqueFormalParameters ) { GeneratorBody }",
  "sec-asyncfromsynciteratorcontinuation" : "AsyncFromSyncIteratorContinuation",
  "sec-static-semantics-stringvalue|ModuleExportName|StringLiteral" : "[StringValue] ModuleExportName : StringLiteral",
  "sec-date.prototype.setmilliseconds" : "Date.prototype.setMilliseconds",
  "sec-runtime-semantics-classdefinitionevaluation|ClassTail|{|}" : "[ClassDefinitionEvaluation] ClassTail : { }",
  "sec-static-semantics-hascallintailposition|CaseBlock|{|DefaultClause|CaseClauses|}" : "[HasCallInTailPosition] CaseBlock : { DefaultClause CaseClauses }",
  "sec-static-semantics-containsundefinedcontinuetarget|ForInOfStatement|for|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedContinueTarget] ForInOfStatement : for ( var ForBinding of AssignmentExpression ) Statement",
  "sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p" : "[[HasProperty]]",
  "sec-patterns-static-semantics-is-character-class|ClassEscape|CharacterEscape" : "[IsCharacterClass] ClassEscape : CharacterEscape",
  "sec-static-semantics-isdestructuring|LeftHandSideExpression|CallExpression" : "[IsDestructuring] LeftHandSideExpression : CallExpression",
  "sec-static-semantics-hascallintailposition|ForInOfStatement|for|(|ForDeclaration|in|Expression|)|Statement" : "[HasCallInTailPosition] ForInOfStatement : for ( ForDeclaration in Expression ) Statement",
  "sec-static-semantics-hascallintailposition|Block|{|}" : "[HasCallInTailPosition] Block : { }",
  "sec-static-semantics-maycontainstrings|ClassSubtraction|ClassSubtraction|--|ClassSetOperand" : "[MayContainStrings] ClassSubtraction : ClassSubtraction -- ClassSetOperand",
  "sec-static-semantics-isfunctiondefinition|UnaryExpression|typeof|UnaryExpression" : "[IsFunctionDefinition] UnaryExpression : typeof UnaryExpression",
  "sec-runtime-semantics-labelledevaluation|Statement|BlockStatement" : "[LabelledEvaluation] Statement : BlockStatement",
  "sec-get-dataview.prototype.bytelength" : "get DataView.prototype.byteLength",
  "sec-static-semantics-hascallintailposition|StatementList|StatementList|StatementListItem" : "[HasCallInTailPosition] StatementList : StatementList StatementListItem",
  "sec-static-semantics-isconstantdeclaration|LetOrConst|const" : "[IsConstantDeclaration] LetOrConst : const",
  "sec-static-semantics-containsduplicatelabels|ForInOfStatement|for|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[ContainsDuplicateLabels] ForInOfStatement : for ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-declarative-environment-records-getbindingvalue-n-s" : "GetBindingValue",
  "sec-runtime-semantics-loopevaluation|IterationStatement|ForStatement" : "[LoopEvaluation] IterationStatement : ForStatement",
  "sec-weakmap.prototype.get" : "WeakMap.prototype.get",
  "sec-map.prototype.values" : "Map.prototype.values",
  "sec-%typedarray%.prototype.reduce" : "TypedArray.prototype.reduce",
  "sec-static-semantics-vardeclarednames|ConciseBody|ExpressionBody" : "[VarDeclaredNames] ConciseBody : ExpressionBody",
  "sec-tointegerorinfinity" : "ToIntegerOrInfinity",
  "sec-static-semantics-varscopeddeclarations|Statement|ReturnStatement" : "[VarScopedDeclarations] Statement : ReturnStatement",
  "sec-static-semantics-contains|LiteralPropertyName|IdentifierName" : "[Contains] LiteralPropertyName : IdentifierName",
  "sec-static-semantics-hascallintailposition|ReturnStatement|return|;" : "[HasCallInTailPosition] ReturnStatement : return ;",
  "sec-compileassertion|Assertion|\\B" : "[CompileAssertion] Assertion : \\B",
  "sec-patterns-static-semantics-capturing-group-number|DecimalEscape|NonZeroDigit" : "[CapturingGroupNumber] DecimalEscape : NonZeroDigit",
  "sec-static-semantics-assignmenttargettype|AssignmentExpression|LeftHandSideExpression|=|AssignmentExpression" : "[AssignmentTargetType] AssignmentExpression : LeftHandSideExpression = AssignmentExpression",
  "sec-static-semantics-isfunctiondefinition|AssignmentExpression|AsyncArrowFunction" : "[IsFunctionDefinition] AssignmentExpression : AsyncArrowFunction",
  "sec-static-semantics-boundnames|BindingIdentifier|Identifier" : "[BoundNames] BindingIdentifier : Identifier",
  "sec-static-semantics-containsarguments|IdentifierReference|Identifier" : "[ContainsArguments] IdentifierReference : Identifier",
  "sec-static-semantics-varscopeddeclarations|VariableDeclarationList|VariableDeclarationList|,|VariableDeclaration" : "[VarScopedDeclarations] VariableDeclarationList : VariableDeclarationList , VariableDeclaration",
  "sec-set.prototype.entries" : "Set.prototype.entries",
  "sec-static-semantics-toplevellexicallydeclarednames|StatementList|StatementList|StatementListItem" : "[TopLevelLexicallyDeclaredNames] StatementList : StatementList StatementListItem",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|Expression|;|Expression|;|Expression|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( Expression ; Expression ; Expression ) Statement",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( var VariableDeclarationList ; Expression ; ) Statement",
  "sec-static-semantics-lexicallydeclarednames|ClassStaticBlockStatementList" : "[LexicallyDeclaredNames] ClassStaticBlockStatementList :",
  "sec-block-runtime-semantics-evaluation|Block|{|StatementList|}" : "[Evaluation] Block : { StatementList }",
  "sec-speciesconstructor" : "SpeciesConstructor",
  "sec-static-semantics-hascallintailposition|Statement|DebuggerStatement" : "[HasCallInTailPosition] Statement : DebuggerStatement",
  "sec-static-semantics-containsexpression|ArrayBindingPattern|[|BindingRestElement|]" : "[ContainsExpression] ArrayBindingPattern : [ BindingRestElement ]",
  "sec-static-semantics-containsundefinedbreaktarget|FunctionStatementList" : "[ContainsUndefinedBreakTarget] FunctionStatementList :",
  "sec-createbytedatablock" : "CreateByteDataBlock",
  "sec-compiletocharset|ClassSetOperand|NestedClass" : "[CompileToCharSet] ClassSetOperand : NestedClass",
  "sec-optional-chaining-chain-evaluation|OptionalChain|OptionalChain|[|Expression|]" : "[ChainEvaluation] OptionalChain : OptionalChain [ Expression ]",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|;|;|Expression|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( ; ; Expression ) Statement",
  "sec-static-semantics-exportentriesformodule|ExportSpecifier|ModuleExportName" : "[ExportEntriesForModule] ExportSpecifier : ModuleExportName",
  "sec-runtime-semantics-loopevaluation|IterationStatement|WhileStatement" : "[LoopEvaluation] IterationStatement : WhileStatement",
  "sec-static-semantics-issimpleparameterlist|FormalParameters|FunctionRestParameter" : "[IsSimpleParameterList] FormalParameters : FunctionRestParameter",
  "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys" : "[[OwnPropertyKeys]]",
  "sec-enqueueatomicswaitasynctimeoutjob" : "EnqueueAtomicsWaitAsyncTimeoutJob",
  "sec-static-semantics-vardeclarednames|VariableStatement|var|VariableDeclarationList|;" : "[VarDeclaredNames] VariableStatement : var VariableDeclarationList ;",
  "sec-stringgetownproperty" : "StringGetOwnProperty",
  "sec-static-semantics-lexicallyscopeddeclarations|ClassStaticBlockStatementList" : "[LexicallyScopedDeclarations] ClassStaticBlockStatementList :",
  "sec-static-semantics-isfunctiondefinition|RelationalExpression|RelationalExpression|<=|ShiftExpression" : "[IsFunctionDefinition] RelationalExpression : RelationalExpression <= ShiftExpression",
  "sec-static-semantics-varscopeddeclarations|Statement|ThrowStatement" : "[VarScopedDeclarations] Statement : ThrowStatement",
  "sec-static-semantics-declarationpart|HoistableDeclaration|AsyncGeneratorDeclaration" : "[DeclarationPart] HoistableDeclaration : AsyncGeneratorDeclaration",
  "sec-identifiercodepoint|UnicodeEscapeSequence|u{|CodePoint|}" : "[IdentifierCodePoint] UnicodeEscapeSequence : u{ CodePoint }",
  "sec-ordinarysetprototypeof" : "OrdinarySetPrototypeOf",
  "sec-atomics.add" : "Atomics.add",
  "sec-array.prototype.concat" : "Array.prototype.concat",
  "sec-string.prototype.padstart" : "String.prototype.padStart",
  "sec-entercriticalsection" : "EnterCriticalSection",
  "sec-static-semantics-hascallintailposition|AssignmentExpression|LeftHandSideExpression|=|AssignmentExpression" : "[HasCallInTailPosition] AssignmentExpression : LeftHandSideExpression = AssignmentExpression",
  "sec-%typedarray%.prototype.reduceright" : "TypedArray.prototype.reduceRight",
  "sec-runtime-semantics-stringnumericvalue|StringNumericLiteral" : "[StringNumericValue] StringNumericLiteral :",
  "sec-static-semantics-referencedbindings|ModuleExportName|IdentifierName" : "[ReferencedBindings] ModuleExportName : IdentifierName",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|LexicalDeclaration|;|Expression|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( LexicalDeclaration ; Expression ) Statement",
  "sec-static-semantics-containsundefinedbreaktarget|Statement|ReturnStatement" : "[ContainsUndefinedBreakTarget] Statement : ReturnStatement",
  "sec-static-semantics-assignmenttargettype|RelationalExpression|RelationalExpression|instanceof|ShiftExpression" : "[AssignmentTargetType] RelationalExpression : RelationalExpression instanceof ShiftExpression",
  "sec-static-semantics-toplevelvardeclarednames|StatementList|StatementList|StatementListItem" : "[TopLevelVarDeclaredNames] StatementList : StatementList StatementListItem",
  "sec-get-%typedarray%.prototype.byteoffset" : "get TypedArray.prototype.byteOffset",
  "sec-static-semantics-templatestrings|TemplateMiddleList|TemplateMiddle|Expression" : "[TemplateStrings] TemplateMiddleList : TemplateMiddle Expression",
  "sec-static-semantics-containsundefinedbreaktarget|TryStatement|try|Block|Catch|Finally" : "[ContainsUndefinedBreakTarget] TryStatement : try Block Catch Finally",
  "sec-asyncgeneratorstart" : "AsyncGeneratorStart",
  "sec-static-semantics-containsundefinedcontinuetarget|LabelledItem|FunctionDeclaration" : "[ContainsUndefinedContinueTarget] LabelledItem : FunctionDeclaration",
  "sec-bindthisvalue" : "BindThisValue",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|var|VariableDeclarationList|;|;|Expression|)|Statement" : "[VarDeclaredNames] ForStatement : for ( var VariableDeclarationList ; ; Expression ) Statement",
  "sec-let-and-const-declarations-runtime-semantics-evaluation|LexicalDeclaration|LetOrConst|BindingList|;" : "[Evaluation] LexicalDeclaration : LetOrConst BindingList ;",
  "sec-comparearrayelements" : "CompareArrayElements",
  "sec-validateandapplypropertydescriptor" : "ValidateAndApplyPropertyDescriptor",
  "sec-number.prototype.tofixed" : "Number.prototype.toFixed",
  "sec-runtime-semantics-caseblockevaluation|CaseBlock|{|}" : "[CaseBlockEvaluation] CaseBlock : { }",
  "sec-static-semantics-issimpleparameterlist|AsyncArrowBindingIdentifier|BindingIdentifier" : "[IsSimpleParameterList] AsyncArrowBindingIdentifier : BindingIdentifier",
  "sec-numbertobigint" : "NumberToBigInt",
  "sec-assignment-operators-runtime-semantics-evaluation|AssignmentExpression|LeftHandSideExpression|AssignmentOperator|AssignmentExpression" : "[Evaluation] AssignmentExpression : LeftHandSideExpression AssignmentOperator AssignmentExpression",
  "sec-static-semantics-exportentriesformodule|ExportFromClause|*" : "[ExportEntriesForModule] ExportFromClause : *",
  "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression|AsyncGeneratorExpression|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[InstantiateAsyncGeneratorFunctionExpression] AsyncGeneratorExpression : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-get-%typedarray%.prototype-@@tostringtag" : "get TypedArray.prototype[@@toStringTag]",
  "sec-static-semantics-lexicallydeclarednames|CaseClauses|CaseClauses|CaseClause" : "[LexicallyDeclaredNames] CaseClauses : CaseClauses CaseClause",
  "sec-toint32" : "ToInt32",
  "sec-createglobalvarbinding" : "CreateGlobalVarBinding",
  "sec-static-semantics-containsundefinedcontinuetarget|Statement|ReturnStatement" : "[ContainsUndefinedContinueTarget] Statement : ReturnStatement",
  "sec-ContinueDynamicImport" : "ContinueDynamicImport",
  "sec-static-semantics-assignmenttargettype|AssignmentExpression|LeftHandSideExpression|AssignmentOperator|AssignmentExpression" : "[AssignmentTargetType] AssignmentExpression : LeftHandSideExpression AssignmentOperator AssignmentExpression",
  "sec-removewaiters" : "RemoveWaiters",
  "sec-static-semantics-isfunctiondefinition|UnaryExpression|-|UnaryExpression" : "[IsFunctionDefinition] UnaryExpression : - UnaryExpression",
  "sec-matchsequence" : "MatchSequence",
  "sec-regexp.prototype-@@match" : "RegExp.prototype[@@match]",
  "sec-numericvalue|DecimalBigIntegerLiteral|0|BigIntLiteralSuffix" : "[NumericValue] DecimalBigIntegerLiteral : 0 BigIntLiteralSuffix",
  "sec-numeric-types-number-sameValueZero" : "Number::sameValueZero",
  "sec-array.prototype.reduce" : "Array.prototype.reduce",
  "sec-static-semantics-isfunctiondefinition|UnaryExpression|!|UnaryExpression" : "[IsFunctionDefinition] UnaryExpression : ! UnaryExpression",
  "sec-static-semantics-maycontainstrings|NestedClass|[^|ClassContents|]" : "[MayContainStrings] NestedClass : [^ ClassContents ]",
  "sec-static-semantics-concisebodycontainsusestrict|ConciseBody|ExpressionBody" : "[ConciseBodyContainsUseStrict] ConciseBody : ExpressionBody",
  "sec-typeof-operator-runtime-semantics-evaluation|UnaryExpression|typeof|UnaryExpression" : "[Evaluation] UnaryExpression : typeof UnaryExpression",
  "sec-runtime-semantics-labelledevaluation|Statement|ReturnStatement" : "[LabelledEvaluation] Statement : ReturnStatement",
  "sec-runtime-semantics-substitutionevaluation|TemplateMiddleList|TemplateMiddleList|TemplateMiddle|Expression" : "[SubstitutionEvaluation] TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression",
  "sec-string.prototype.slice" : "String.prototype.slice",
  "sec-static-semantics-boundnames|ImportDeclaration|import|ImportClause|FromClause|;" : "[BoundNames] ImportDeclaration : import ImportClause FromClause ;",
  "sec-static-semantics-hascallintailposition|CallExpression|ImportCall" : "[HasCallInTailPosition] CallExpression : ImportCall",
  "sec-static-semantics-exportedbindings|ExportDeclaration|export|NamedExports|;" : "[ExportedBindings] ExportDeclaration : export NamedExports ;",
  "sec-static-semantics-toplevellexicallyscopeddeclarations|StatementList|StatementList|StatementListItem" : "[TopLevelLexicallyScopedDeclarations] StatementList : StatementList StatementListItem",
  "sec-static-semantics-hasinitializer|BindingElement|BindingPattern" : "[HasInitializer] BindingElement : BindingPattern",
  "sec-static-semantics-containsduplicatelabels|Statement|VariableStatement" : "[ContainsDuplicateLabels] Statement : VariableStatement",
  "sec-static-semantics-containsduplicatelabels|StatementListItem|Declaration" : "[ContainsDuplicateLabels] StatementListItem : Declaration",
  "sec-privatefieldadd" : "PrivateFieldAdd",
  "sec-runtime-semantics-caseblockevaluation|CaseBlock|{|CaseClauses|DefaultClause|}" : "[CaseBlockEvaluation] CaseBlock : { CaseClauses DefaultClause }",
  "sec-compileclasssetstring|NonEmptyClassString|ClassSetCharacter" : "[CompileClassSetString] NonEmptyClassString : ClassSetCharacter",
  "sec-datefromtime" : "DateFromTime",
  "sec-static-semantics-containsexpression|BindingRestElement|...|BindingPattern" : "[ContainsExpression] BindingRestElement : ... BindingPattern",
  "sec-object.getownpropertydescriptor" : "Object.getOwnPropertyDescriptor",
  "sec-for-in-and-for-of-statements-runtime-semantics-evaluation|BindingIdentifier|yield" : "[Evaluation] BindingIdentifier : yield",
  "sec-global-environment-records-createimmutablebinding-n-s" : "CreateImmutableBinding",
  "sec-static-semantics-isfunctiondefinition|RelationalExpression|RelationalExpression|<|ShiftExpression" : "[IsFunctionDefinition] RelationalExpression : RelationalExpression < ShiftExpression",
  "sec-static-semantics-isfunctiondefinition|PrimaryExpression|TemplateLiteral" : "[IsFunctionDefinition] PrimaryExpression : TemplateLiteral",
  "sec-static-semantics-exportentries|ModuleItem|StatementListItem" : "[ExportEntries] ModuleItem : StatementListItem",
  "sec-static-semantics-isfunctiondefinition|EqualityExpression|EqualityExpression|!=|RelationalExpression" : "[IsFunctionDefinition] EqualityExpression : EqualityExpression != RelationalExpression",
  "sec-date" : "Date",
  "sec-getstringindex" : "GetStringIndex",
  "sec-static-semantics-containsarguments|AsyncMethod|async|ClassElementName|(|UniqueFormalParameters|)|{|AsyncFunctionBody|}" : "[ContainsArguments] AsyncMethod : async ClassElementName ( UniqueFormalParameters ) { AsyncFunctionBody }",
  "sec-parsehexoctet" : "ParseHexOctet",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|ObjectLiteral" : "[AssignmentTargetType] PrimaryExpression : ObjectLiteral",
  "sec-toint16" : "ToInt16",
  "sec-islabelledfunction" : "IsLabelledFunction",
  "sec-runtime-semantics-caseblockevaluation|CaseBlock|{|CaseClauses|DefaultClause|CaseClauses|}" : "[CaseBlockEvaluation] CaseBlock : { CaseClauses DefaultClause CaseClauses }",
  "sec-static-semantics-issimpleparameterlist|BindingElement|BindingPattern" : "[IsSimpleParameterList] BindingElement : BindingPattern",
  "sec-static-semantics-containsundefinedbreaktarget|Block|{|}" : "[ContainsUndefinedBreakTarget] Block : { }",
  "sec-static-semantics-containsundefinedcontinuetarget|TryStatement|try|Block|Catch" : "[ContainsUndefinedContinueTarget] TryStatement : try Block Catch",
  "sec-getgeneratorkind" : "GetGeneratorKind",
  "sec-date.prototype.getutcseconds" : "Date.prototype.getUTCSeconds",
  "sec-date.prototype.getutcmilliseconds" : "Date.prototype.getUTCMilliseconds",
  "sec-compileassertion|Assertion|\\b" : "[CompileAssertion] Assertion : \\b",
  "sec-static-semantics-isfunctiondefinition|CoalesceExpression|CoalesceExpressionHead|??|BitwiseORExpression" : "[IsFunctionDefinition] CoalesceExpression : CoalesceExpressionHead ?? BitwiseORExpression",
  "sec-math.hypot" : "Math.hypot",
  "sec-getvalue" : "GetValue",
  "sec-static-semantics-toplevelvarscopeddeclarations|LabelledItem|Statement" : "[TopLevelVarScopedDeclarations] LabelledItem : Statement",
  "sec-string.prototype.indexof" : "String.prototype.indexOf",
  "sec-static-semantics-containsundefinedcontinuetarget|Statement|VariableStatement" : "[ContainsUndefinedContinueTarget] Statement : VariableStatement",
  "sec-patterns-static-semantics-is-character-class|ClassAtomNoDash|SourceCharacter" : "[IsCharacterClass] ClassAtomNoDash : SourceCharacter",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|;|Expression|;|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( ; Expression ; ) Statement",
  "sec-static-semantics-containsduplicatelabels|IfStatement|if|(|Expression|)|Statement" : "[ContainsDuplicateLabels] IfStatement : if ( Expression ) Statement",
  "sec-static-semantics-assignmenttargettype|EqualityExpression|EqualityExpression|==|RelationalExpression" : "[AssignmentTargetType] EqualityExpression : EqualityExpression == RelationalExpression",
  "sec-static-semantics-lexicallyscopeddeclarations|CaseClause|case|Expression|:" : "[LexicallyScopedDeclarations] CaseClause : case Expression :",
  "sec-dayfromyear" : "DayFromYear",
  "sec-static-semantics-varscopeddeclarations|CaseClauses|CaseClauses|CaseClause" : "[VarScopedDeclarations] CaseClauses : CaseClauses CaseClause",
  "sec-InnerModuleLinking" : "InnerModuleLinking",
  "sec-runtime-semantics-arrayaccumulation|ElementList|Elision|SpreadElement" : "[ArrayAccumulation] ElementList : Elision SpreadElement",
  "sec-symbol.prototype.valueof" : "Symbol.prototype.valueOf",
  "sec-static-semantics-varscopeddeclarations|StatementList|StatementList|StatementListItem" : "[VarScopedDeclarations] StatementList : StatementList StatementListItem",
  "sec-runtime-semantics-classstaticblockdefinitionevaluation|ClassStaticBlock|static|{|ClassStaticBlockBody|}" : "[ClassStaticBlockDefinitionEvaluation] ClassStaticBlock : static { ClassStaticBlockBody }",
  "sec-findviapredicate" : "FindViaPredicate",
  "sec-%typedarray%.prototype.find" : "TypedArray.prototype.find",
  "sec-numeric-types-bigint-bitwiseXOR" : "BigInt::bitwiseXOR",
  "sec-return-statement-runtime-semantics-evaluation|ReturnStatement|return|Expression|;" : "[Evaluation] ReturnStatement : return Expression ;",
  "sec-construct" : "Construct",
  "sec-identifiercodepoint|UnicodeEscapeSequence|u|Hex4Digits" : "[IdentifierCodePoint] UnicodeEscapeSequence : u Hex4Digits",
  "sec-runtime-semantics-labelledevaluation|Statement|ExpressionStatement" : "[LabelledEvaluation] Statement : ExpressionStatement",
  "sec-weakmap-iterable" : "WeakMap",
  "sec-date.prototype.gettimezoneoffset" : "Date.prototype.getTimezoneOffset",
  "sec-evaluate-property-access-with-expression-key" : "EvaluatePropertyAccessWithExpressionKey",
  "sec-compilesubpattern|Alternative|Alternative|Term" : "[CompileSubpattern] Alternative : Alternative Term",
  "sec-runtime-semantics-arrayaccumulation|ElementList|ElementList|,|AssignmentExpression" : "[ArrayAccumulation] ElementList : ElementList , AssignmentExpression",
  "sec-static-semantics-containsundefinedcontinuetarget|Statement|BlockStatement" : "[ContainsUndefinedContinueTarget] Statement : BlockStatement",
  "sec-static-semantics-hascallintailposition|ForInOfStatement|for|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[HasCallInTailPosition] ForInOfStatement : for ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-module-namespace-exotic-objects-ownpropertykeys" : "[[OwnPropertyKeys]]",
  "sec-number.prototype.tostring" : "Number.prototype.toString",
  "sec-static-semantics-vardeclarednames|TryStatement|try|Block|Catch" : "[VarDeclaredNames] TryStatement : try Block Catch",
  "sec-function-calls-runtime-semantics-evaluation|CallExpression|CallExpression|Arguments" : "[Evaluation] CallExpression : CallExpression Arguments",
  "sec-installerrorcause" : "InstallErrorCause",
  "sec-static-semantics-varscopeddeclarations|CaseBlock|{|DefaultClause|}" : "[VarScopedDeclarations] CaseBlock : { DefaultClause }",
  "sec-static-semantics-contains|ClassStaticBlock|static|{|ClassStaticBlockBody|}" : "[Contains] ClassStaticBlock : static { ClassStaticBlockBody }",
  "sec-static-semantics-boundnames|ImportDeclaration|import|ModuleSpecifier|;" : "[BoundNames] ImportDeclaration : import ModuleSpecifier ;",
  "sec-static-semantics-isfunctiondefinition|AsyncFunctionExpression|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[IsFunctionDefinition] AsyncFunctionExpression : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-function-definitions-runtime-semantics-evaluation|FunctionDeclaration|function|(|FormalParameters|)|{|FunctionBody|}" : "[Evaluation] FunctionDeclaration : function ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-importentries|ImportDeclaration|import|ModuleSpecifier|;" : "[ImportEntries] ImportDeclaration : import ModuleSpecifier ;",
  "sec-static-semantics-hascallintailposition|ReturnStatement|return|Expression|;" : "[HasCallInTailPosition] ReturnStatement : return Expression ;",
  "sec-static-semantics-lexicallydeclarednames|Block|{|}" : "[LexicallyDeclaredNames] Block : { }",
  "sec-prefix-decrement-operator-runtime-semantics-evaluation|UpdateExpression|--|UnaryExpression" : "[Evaluation] UpdateExpression : -- UnaryExpression",
  "sec-hasvardeclaration" : "HasVarDeclaration",
  "sec-static-semantics-importentriesformodule|ImportClause|ImportedDefaultBinding|,|NameSpaceImport" : "[ImportEntriesForModule] ImportClause : ImportedDefaultBinding , NameSpaceImport",
  "sec-arrow-function-definitions-runtime-semantics-evaluation|ExpressionBody|AssignmentExpression" : "[Evaluation] ExpressionBody : AssignmentExpression",
  "sec-static-semantics-containsundefinedbreaktarget|ForInOfStatement|for|await|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedBreakTarget] ForInOfStatement : for await ( var ForBinding of AssignmentExpression ) Statement",
  "sec-numberbitwiseop" : "NumberBitwiseOp",
  "sec-%typedarray%.prototype.sort" : "TypedArray.prototype.sort",
  "sec-static-semantics-containsundefinedbreaktarget|DefaultClause|default|:" : "[ContainsUndefinedBreakTarget] DefaultClause : default :",
  "sec-static-semantics-varscopeddeclarations|TryStatement|try|Block|Finally" : "[VarScopedDeclarations] TryStatement : try Block Finally",
  "sec-static-semantics-isstatic|ClassElement|FieldDefinition|;" : "[IsStatic] ClassElement : FieldDefinition ;",
  "sec-object.isextensible" : "Object.isExtensible",
  "sec-static-semantics-isconstantdeclaration|LexicalDeclaration|LetOrConst|BindingList|;" : "[IsConstantDeclaration] LexicalDeclaration : LetOrConst BindingList ;",
  "sec-static-semantics-maycontainstrings|ClassUnion|ClassSetRange" : "[MayContainStrings] ClassUnion : ClassSetRange",
  "sec-static-semantics-boundnames|ImportClause|ImportedDefaultBinding|,|NamedImports" : "[BoundNames] ImportClause : ImportedDefaultBinding , NamedImports",
  "sec-static-semantics-isidentifierref|PrimaryExpression|RegularExpressionLiteral" : "[IsIdentifierRef] PrimaryExpression : RegularExpressionLiteral",
  "sec-stringtobigint" : "StringToBigInt",
  "sec-compileatom|Atom|." : "[CompileAtom] Atom : .",
  "sec-string.raw" : "String.raw",
  "sec-get-promise-@@species" : "get Promise[@@species]",
  "sec-static-semantics-contains|AsyncArrowFunction|CoverCallExpressionAndAsyncArrowHead|=>|AsyncConciseBody" : "[Contains] AsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead => AsyncConciseBody",
  "sec-static-semantics-isidentifierref|PrimaryExpression|this" : "[IsIdentifierRef] PrimaryExpression : this",
  "sec-static-semantics-vardeclarednames|LabelledItem|FunctionDeclaration" : "[VarDeclaredNames] LabelledItem : FunctionDeclaration",
  "sec-static-semantics-importentriesformodule|ImportSpecifier|ModuleExportName|as|ImportedBinding" : "[ImportEntriesForModule] ImportSpecifier : ModuleExportName as ImportedBinding",
  "sec-statement-semantics-runtime-semantics-evaluation|BreakableStatement|IterationStatement" : "[Evaluation] BreakableStatement : IterationStatement",
  "sec-compileclasssetstring|ClassString|NonEmptyClassString" : "[CompileClassSetString] ClassString : NonEmptyClassString",
  "sec-static-semantics-varscopeddeclarations|LabelledItem|FunctionDeclaration" : "[VarScopedDeclarations] LabelledItem : FunctionDeclaration",
  "sec-static-semantics-varscopeddeclarations|ScriptBody|StatementList" : "[VarScopedDeclarations] ScriptBody : StatementList",
  "sec-static-semantics-vardeclarednames|ForInOfStatement|for|await|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[VarDeclaredNames] ForInOfStatement : for await ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-runtime-semantics-instantiategeneratorfunctionexpression|GeneratorExpression|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[InstantiateGeneratorFunctionExpression] GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-hascallintailposition|UpdateExpression|++|UnaryExpression" : "[HasCallInTailPosition] UpdateExpression : ++ UnaryExpression",
  "sec-%typedarray%.prototype.fill" : "TypedArray.prototype.fill",
  "sec-static-semantics-assignmenttargettype|ExponentiationExpression|UpdateExpression|**|ExponentiationExpression" : "[AssignmentTargetType] ExponentiationExpression : UpdateExpression ** ExponentiationExpression",
  "sec-compiletocharset|ClassIntersection|ClassSetOperand|&&|ClassSetOperand" : "[CompileToCharSet] ClassIntersection : ClassSetOperand && ClassSetOperand",
  "sec-static-semantics-varscopeddeclarations|Block|{|}" : "[VarScopedDeclarations] Block : { }",
  "sec-deletepropertyorthrow" : "DeletePropertyOrThrow",
  "sec-runtime-semantics-instantiateasyncgeneratorfunctionobject|AsyncGeneratorDeclaration|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[InstantiateAsyncGeneratorFunctionObject] AsyncGeneratorDeclaration : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-containsundefinedbreaktarget|ForInOfStatement|for|(|LeftHandSideExpression|in|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForInOfStatement : for ( LeftHandSideExpression in Expression ) Statement",
  "sec-static-semantics-containsundefinedcontinuetarget|CaseClause|case|Expression|:" : "[ContainsUndefinedContinueTarget] CaseClause : case Expression :",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|;|Expression|;|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( ; Expression ; ) Statement",
  "sec-static-semantics-containsundefinedcontinuetarget|CaseBlock|{|}" : "[ContainsUndefinedContinueTarget] CaseBlock : { }",
  "sec-static-semantics-varscopeddeclarations|Catch|catch|(|CatchParameter|)|Block" : "[VarScopedDeclarations] Catch : catch ( CatchParameter ) Block",
  "sec-array.prototype.includes" : "Array.prototype.includes",
  "sec-static-semantics-boundnames|ObjectBindingPattern|{|}" : "[BoundNames] ObjectBindingPattern : { }",
  "sec-weakrefderef" : "WeakRefDeref",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|;|;|Expression|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( ; ; Expression ) Statement",
  "sec-runtime-semantics-substitutionevaluation|TemplateMiddleList|TemplateMiddle|Expression" : "[SubstitutionEvaluation] TemplateMiddleList : TemplateMiddle Expression",
  "sec-bigint.asuintn" : "BigInt.asUintN",
  "sec-runtime-semantics-methoddefinitionevaluation|AsyncMethod|async|ClassElementName|(|UniqueFormalParameters|)|{|AsyncFunctionBody|}" : "[MethodDefinitionEvaluation] AsyncMethod : async ClassElementName ( UniqueFormalParameters ) { AsyncFunctionBody }",
  "sec-function.prototype.bind" : "Function.prototype.bind",
  "sec-static-semantics-lexicallydeclarednames|DefaultClause|default|:|StatementList" : "[LexicallyDeclaredNames] DefaultClause : default : StatementList",
  "sec-samevaluezero" : "SameValueZero",
  "sec-binary-bitwise-operators-runtime-semantics-evaluation|BitwiseANDExpression|BitwiseANDExpression|&|EqualityExpression" : "[Evaluation] BitwiseANDExpression : BitwiseANDExpression & EqualityExpression",
  "sec-static-semantics-containsexpression|BindingProperty|PropertyName|:|BindingElement" : "[ContainsExpression] BindingProperty : PropertyName : BindingElement",
  "sec-static-semantics-importentriesformodule|NamedImports|{|}" : "[ImportEntriesForModule] NamedImports : { }",
  "sec-string-exotic-objects-ownpropertykeys" : "[[OwnPropertyKeys]]",
  "sec-static-semantics-hascallintailposition|RelationalExpression|RelationalExpression|>|ShiftExpression" : "[HasCallInTailPosition] RelationalExpression : RelationalExpression > ShiftExpression",
  "sec-typedarraysetelement" : "TypedArraySetElement",
  "sec-math.abs" : "Math.abs",
  "sec-static-semantics-boundnames|BindingElementList|BindingElementList|,|BindingElisionElement" : "[BoundNames] BindingElementList : BindingElementList , BindingElisionElement",
  "sec-static-semantics-lexicallydeclarednames|CaseBlock|{|CaseClauses|DefaultClause|}" : "[LexicallyDeclaredNames] CaseBlock : { CaseClauses DefaultClause }",
  "sec-static-semantics-expectedargumentcount|FormalParameters|FormalParameterList|,|FunctionRestParameter" : "[ExpectedArgumentCount] FormalParameters : FormalParameterList , FunctionRestParameter",
  "sec-comma-operator-runtime-semantics-evaluation|Expression|Expression|,|AssignmentExpression" : "[Evaluation] Expression : Expression , AssignmentExpression",
  "sec-equality-operators-runtime-semantics-evaluation|EqualityExpression|EqualityExpression|!=|RelationalExpression" : "[Evaluation] EqualityExpression : EqualityExpression != RelationalExpression",
  "sec-continue-statement-runtime-semantics-evaluation|ContinueStatement|continue|LabelIdentifier|;" : "[Evaluation] ContinueStatement : continue LabelIdentifier ;",
  "sec-static-semantics-hascallintailposition|ShiftExpression|ShiftExpression|>>>|AdditiveExpression" : "[HasCallInTailPosition] ShiftExpression : ShiftExpression >>> AdditiveExpression",
  "sec-static-semantics-isfunctiondefinition|AssignmentExpression|YieldExpression" : "[IsFunctionDefinition] AssignmentExpression : YieldExpression",
  "sec-numeric-types-number-tostring" : "Number::toString",
  "sec-array.prototype.pop" : "Array.prototype.pop",
  "sec-static-semantics-assignmenttargettype|ConditionalExpression|ShortCircuitExpression|?|AssignmentExpression|:|AssignmentExpression" : "[AssignmentTargetType] ConditionalExpression : ShortCircuitExpression ? AssignmentExpression : AssignmentExpression",
  "sec-static-semantics-isdestructuring|ForBinding|BindingIdentifier" : "[IsDestructuring] ForBinding : BindingIdentifier",
  "sec-newfunctionenvironment" : "NewFunctionEnvironment",
  "sec-rejectpromise" : "RejectPromise",
  "sec-getmethod" : "GetMethod",
  "sec-string-exotic-objects-getownproperty-p" : "[[GetOwnProperty]]",
  "sec-tonumeric" : "ToNumeric",
  "sec-static-semantics-containsundefinedcontinuetarget|DoWhileStatement|do|Statement|while|(|Expression|)|;" : "[ContainsUndefinedContinueTarget] DoWhileStatement : do Statement while ( Expression ) ;",
  "sec-static-semantics-lexicallydeclarednames|ScriptBody|StatementList" : "[LexicallyDeclaredNames] ScriptBody : StatementList",
  "sec-runtime-semantics-stringnumericvalue|StrUnsignedDecimalLiteral|.|DecimalDigits|ExponentPart" : "[StringNumericValue] StrUnsignedDecimalLiteral : . DecimalDigits ExponentPart",
  "sec-math.log" : "Math.log",
  "sec-try-statement-runtime-semantics-evaluation|TryStatement|try|Block|Catch|Finally" : "[Evaluation] TryStatement : try Block Catch Finally",
  "sec-math.asinh" : "Math.asinh",
  "sec-runtime-semantics-stringnumericvalue|StrUnsignedDecimalLiteral|Infinity" : "[StringNumericValue] StrUnsignedDecimalLiteral : Infinity",
  "sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p" : "[[HasProperty]]",
  "sec-assignment-operators-runtime-semantics-evaluation|AssignmentExpression|LeftHandSideExpression|&&=|AssignmentExpression" : "[Evaluation] AssignmentExpression : LeftHandSideExpression &&= AssignmentExpression",
  "sec-static-semantics-containsundefinedbreaktarget|LabelledItem|FunctionDeclaration" : "[ContainsUndefinedBreakTarget] LabelledItem : FunctionDeclaration",
  "sec-runtime-semantics-iteratorbindinginitialization|ArrowParameters|BindingIdentifier" : "[IteratorBindingInitialization] ArrowParameters : BindingIdentifier",
  "sec-setfunctionname" : "SetFunctionName",
  "sec-generatorresumeabrupt" : "GeneratorResumeAbrupt",
  "sec-variable-statement-runtime-semantics-evaluation|VariableDeclaration|BindingPattern|Initializer" : "[Evaluation] VariableDeclaration : BindingPattern Initializer",
  "sec-static-semantics-computedpropertycontains|FieldDefinition|ClassElementName|Initializer" : "[ComputedPropertyContains] FieldDefinition : ClassElementName Initializer",
  "sec-static-semantics-referencedbindings|ModuleExportName|StringLiteral" : "[ReferencedBindings] ModuleExportName : StringLiteral",
  "sec-reflect.has" : "Reflect.has",
  "sec-static-semantics-propname|PropertyDefinition|IdentifierReference" : "[PropName] PropertyDefinition : IdentifierReference",
  "sec-runtime-semantics-labelledevaluation|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[LabelledEvaluation] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-runtime-semantics-destructuringassignmentevaluation|ArrayAssignmentPattern|[|AssignmentElementList|,|]" : "[DestructuringAssignmentEvaluation] ArrayAssignmentPattern : [ AssignmentElementList , ]",
  "sec-static-semantics-containsarguments|AsyncGeneratorDeclaration|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[ContainsArguments] AsyncGeneratorDeclaration : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-array" : "Array",
  "sec-tonumber" : "ToNumber",
  "sec-static-semantics-hascallintailposition|UnaryExpression|+|UnaryExpression" : "[HasCallInTailPosition] UnaryExpression : + UnaryExpression",
  "sec-%typedarray%" : "TypedArray",
  "sec-static-semantics-allprivateidentifiersvalid|MemberExpression|MemberExpression|.|PrivateIdentifier" : "[AllPrivateIdentifiersValid] MemberExpression : MemberExpression . PrivateIdentifier",
  "sec-arraybuffer.prototype.transfertofixedlength" : "ArrayBuffer.prototype.transferToFixedLength",
  "sec-static-semantics-isidentifierref|PrimaryExpression|ArrayLiteral" : "[IsIdentifierRef] PrimaryExpression : ArrayLiteral",
  "sec-static-semantics-containsarguments|FunctionDeclaration|function|(|FormalParameters|)|{|FunctionBody|}" : "[ContainsArguments] FunctionDeclaration : function ( FormalParameters ) { FunctionBody }",
  "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization|BindingPropertyList|BindingPropertyList|,|BindingProperty" : "[PropertyBindingInitialization] BindingPropertyList : BindingPropertyList , BindingProperty",
  "sec-canbeheldweakly" : "CanBeHeldWeakly",
  "sec-static-semantics-isidentifierref|MemberExpression|SuperProperty" : "[IsIdentifierRef] MemberExpression : SuperProperty",
  "sec-runtime-semantics-destructuringassignmentevaluation|ObjectAssignmentPattern|{|}" : "[DestructuringAssignmentEvaluation] ObjectAssignmentPattern : { }",
  "sec-date.prototype.getutcfullyear" : "Date.prototype.getUTCFullYear",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|Expression|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( var VariableDeclarationList ; Expression ; Expression ) Statement",
  "sec-promise.all" : "Promise.all",
  "sec-runtime-semantics-instantiatefunctionobject|FunctionDeclaration|function|(|FormalParameters|)|{|FunctionBody|}" : "[InstantiateFunctionObject] FunctionDeclaration : function ( FormalParameters ) { FunctionBody }",
  "sec-array.prototype.join" : "Array.prototype.join",
  "sec-atomics.sub" : "Atomics.sub",
  "sec-static-semantics-lexicallyscopeddeclarations|Script" : "[LexicallyScopedDeclarations] Script :",
  "sec-static-semantics-classelementkind|ClassElement|ClassStaticBlock" : "[ClassElementKind] ClassElement : ClassStaticBlock",
  "sec-get-array-@@species" : "get Array[@@species]",
  "sec-array.prototype.copywithin" : "Array.prototype.copyWithin",
  "sec-secfromtime" : "SecFromTime",
  "sec-static-semantics-lexicallyscopeddeclarations|CaseBlock|{|DefaultClause|}" : "[LexicallyScopedDeclarations] CaseBlock : { DefaultClause }",
  "sec-static-semantics-isfunctiondefinition|LeftHandSideExpression|CallExpression" : "[IsFunctionDefinition] LeftHandSideExpression : CallExpression",
  "sec-static-semantics-varscopeddeclarations|ForInOfStatement|for|await|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[VarScopedDeclarations] ForInOfStatement : for await ( var ForBinding of AssignmentExpression ) Statement",
  "sec-static-semantics-maycontainstrings|NonEmptyClassString|ClassSetCharacter" : "[MayContainStrings] NonEmptyClassString : ClassSetCharacter",
  "sec-static-semantics-containsexpression|ArrayBindingPattern|[|BindingElementList|,|Elision|]" : "[ContainsExpression] ArrayBindingPattern : [ BindingElementList , Elision ]",
  "sec-static-semantics-isfunctiondefinition|AssignmentExpression|LeftHandSideExpression|??=|AssignmentExpression" : "[IsFunctionDefinition] AssignmentExpression : LeftHandSideExpression ??= AssignmentExpression",
  "sec-array.prototype.reverse" : "Array.prototype.reverse",
  "sec-isfixedlengtharraybuffer" : "IsFixedLengthArrayBuffer",
  "sec-bytelistbitwiseop" : "ByteListBitwiseOp",
  "sec-promise.reject" : "Promise.reject",
  "sec-%typedarray%.prototype.with" : "TypedArray.prototype.with",
  "sec-static-semantics-modulerequests|ExportDeclaration|export|NamedExports|;" : "[ModuleRequests] ExportDeclaration : export NamedExports ;",
  "sec-clear-kept-objects" : "ClearKeptObjects",
  "sec-static-semantics-computedpropertycontains|ClassElementName|PrivateIdentifier" : "[ComputedPropertyContains] ClassElementName : PrivateIdentifier",
  "sec-static-semantics-isfunctiondefinition|PrimaryExpression|RegularExpressionLiteral" : "[IsFunctionDefinition] PrimaryExpression : RegularExpressionLiteral",
  "sec-static-semantics-assignmenttargettype|CoalesceExpression|CoalesceExpressionHead|??|BitwiseORExpression" : "[AssignmentTargetType] CoalesceExpression : CoalesceExpressionHead ?? BitwiseORExpression",
  "sec-static-semantics-exportedbindings|ExportSpecifier|ModuleExportName|as|ModuleExportName" : "[ExportedBindings] ExportSpecifier : ModuleExportName as ModuleExportName",
  "sec-function-calls-runtime-semantics-evaluation|CallExpression|CoverCallExpressionAndAsyncArrowHead" : "[Evaluation] CallExpression : CoverCallExpressionAndAsyncArrowHead",
  "sec-applystringornumericbinaryoperator" : "ApplyStringOrNumericBinaryOperator",
  "sec-static-semantics-issimpleparameterlist|ArrowParameters|BindingIdentifier" : "[IsSimpleParameterList] ArrowParameters : BindingIdentifier",
  "sec-static-semantics-assignmenttargettype|CallExpression|ImportCall" : "[AssignmentTargetType] CallExpression : ImportCall",
  "sec-internalizejsonproperty" : "InternalizeJSONProperty",
  "sec-runtime-semantics-propertydestructuringassignmentevaluation|AssignmentProperty|IdentifierReference" : "[PropertyDestructuringAssignmentEvaluation] AssignmentProperty : IdentifierReference",
  "sec-runtime-semantics-evaluateclassstaticblockbody|ClassStaticBlockBody|ClassStaticBlockStatementList" : "[EvaluateClassStaticBlockBody] ClassStaticBlockBody : ClassStaticBlockStatementList",
  "sec-math.sqrt" : "Math.sqrt",
  "sec-getactivescriptormodule" : "GetActiveScriptOrModule",
  "sec-get-regexp-@@species" : "get RegExp[@@species]",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|;|;|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( ; ; Expression ) Statement",
  "sec-runtime-semantics-evaluategeneratorbody|GeneratorBody|FunctionBody" : "[EvaluateGeneratorBody] GeneratorBody : FunctionBody",
  "sec-createdataproperty" : "CreateDataProperty",
  "sec-static-semantics-propname|LiteralPropertyName|NumericLiteral" : "[PropName] LiteralPropertyName : NumericLiteral",
  "sec-static-semantics-vardeclarednames|CaseClause|case|Expression|:" : "[VarDeclaredNames] CaseClause : case Expression :",
  "sec-runtime-semantics-labelledevaluation|Statement|ThrowStatement" : "[LabelledEvaluation] Statement : ThrowStatement",
  "sec-generator-function-definitions-runtime-semantics-evaluation|GeneratorExpression|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[Evaluation] GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }",
  "sec-gettemplateobject" : "GetTemplateObject",
  "sec-static-semantics-varscopeddeclarations|IfStatement|if|(|Expression|)|Statement" : "[VarScopedDeclarations] IfStatement : if ( Expression ) Statement",
  "sec-static-semantics-assignmenttargettype|MemberExpression|MemberExpression|.|PrivateIdentifier" : "[AssignmentTargetType] MemberExpression : MemberExpression . PrivateIdentifier",
  "sec-static-semantics-propname|ClassElementName|PrivateIdentifier" : "[PropName] ClassElementName : PrivateIdentifier",
  "sec-static-semantics-maycontainstrings|ClassString" : "[MayContainStrings] ClassString :",
  "sec-static-semantics-lexicallyscopeddeclarations|ExportDeclaration|export|NamedExports|;" : "[LexicallyScopedDeclarations] ExportDeclaration : export NamedExports ;",
  "sec-promise.all-resolve-element-functions" : "yet:`Promise.all`ResolveElementFunction",
  "sec-relational-operators-runtime-semantics-evaluation|RelationalExpression|RelationalExpression|in|ShiftExpression" : "[Evaluation] RelationalExpression : RelationalExpression in ShiftExpression",
  "sec-hasrestrictedglobalproperty" : "HasRestrictedGlobalProperty",
  "sec-static-semantics-lexicallydeclarednames|ConciseBody|ExpressionBody" : "[LexicallyDeclaredNames] ConciseBody : ExpressionBody",
  "sec-static-semantics-containsduplicatelabels|ForInOfStatement|for|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[ContainsDuplicateLabels] ForInOfStatement : for ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-object-environment-records-initializebinding-n-v" : "InitializeBinding",
  "sec-createlistfromarraylike" : "CreateListFromArrayLike",
  "sec-weakset.prototype.delete" : "WeakSet.prototype.delete",
  "sec-static-semantics-vardeclarednames|ForInOfStatement|for|(|ForDeclaration|in|Expression|)|Statement" : "[VarDeclaredNames] ForInOfStatement : for ( ForDeclaration in Expression ) Statement",
  "sec-static-semantics-hascallintailposition|ForInOfStatement|for|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[HasCallInTailPosition] ForInOfStatement : for ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-static-semantics-containsarguments|AsyncFunctionDeclaration|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[ContainsArguments] AsyncFunctionDeclaration : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-containsduplicatelabels|ForInOfStatement|for|(|var|ForBinding|in|Expression|)|Statement" : "[ContainsDuplicateLabels] ForInOfStatement : for ( var ForBinding in Expression ) Statement",
  "sec-object-environment-records-withbaseobject" : "WithBaseObject",
  "sec-static-semantics-containsundefinedbreaktarget|Statement|VariableStatement" : "[ContainsUndefinedBreakTarget] Statement : VariableStatement",
  "sec-weakmap.prototype.delete" : "WeakMap.prototype.delete",
  "sec-static-semantics-maycontainstrings|ClassSubtraction|ClassSetOperand|--|ClassSetOperand" : "[MayContainStrings] ClassSubtraction : ClassSetOperand -- ClassSetOperand",
  "sec-exports-runtime-semantics-evaluation|ExportDeclaration|export|VariableStatement" : "[Evaluation] ExportDeclaration : export VariableStatement",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|ClassExpression" : "[AssignmentTargetType] PrimaryExpression : ClassExpression",
  "sec-ispropertykey" : "IsPropertyKey",
  "sec-numeric-types-number-bitwiseAND" : "Number::bitwiseAND",
  "sec-static-semantics-containsundefinedcontinuetarget|WithStatement|with|(|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] WithStatement : with ( Expression ) Statement",
  "sec-%iteratorprototype%-@@iterator" : "IteratorPrototype[@@iterator]",
  "sec-array.prototype.toreversed" : "Array.prototype.toReversed",
  "sec-runtime-semantics-bindinginitialization|ObjectBindingPattern|{|BindingRestProperty|}" : "[BindingInitialization] ObjectBindingPattern : { BindingRestProperty }",
  "sec-static-semantics-hascallintailposition|MemberExpression|SuperProperty" : "[HasCallInTailPosition] MemberExpression : SuperProperty",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|ArrayLiteral" : "[HasCallInTailPosition] PrimaryExpression : ArrayLiteral",
  "sec-static-semantics-containsundefinedcontinuetarget|CaseClause|case|Expression|:|StatementList" : "[ContainsUndefinedContinueTarget] CaseClause : case Expression : StatementList",
  "sec-static-semantics-importentriesformodule|ImportsList|ImportsList|,|ImportSpecifier" : "[ImportEntriesForModule] ImportsList : ImportsList , ImportSpecifier",
  "sec-static-semantics-isfunctiondefinition|AssignmentExpression|LeftHandSideExpression|&&=|AssignmentExpression" : "[IsFunctionDefinition] AssignmentExpression : LeftHandSideExpression &&= AssignmentExpression",
  "sec-function-p1-p2-pn-body" : "Function",
  "sec-monthfromtime" : "MonthFromTime",
  "sec-static-semantics-containsundefinedbreaktarget|StatementListItem|Declaration" : "[ContainsUndefinedBreakTarget] StatementListItem : Declaration",
  "sec-static-semantics-containsundefinedbreaktarget|CaseBlock|{|DefaultClause|CaseClauses|}" : "[ContainsUndefinedBreakTarget] CaseBlock : { DefaultClause CaseClauses }",
  "sec-runtime-semantics-namedevaluation|GeneratorExpression|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[NamedEvaluation] GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }",
  "sec-module-semantics-runtime-semantics-evaluation|ModuleItemList|ModuleItemList|ModuleItem" : "[Evaluation] ModuleItemList : ModuleItemList ModuleItem",
  "sec-static-semantics-hascallintailposition|Statement|VariableStatement" : "[HasCallInTailPosition] Statement : VariableStatement",
  "sec-reflect.ownkeys" : "Reflect.ownKeys",
  "sec-static-semantics-containsduplicatelabels|DoWhileStatement|do|Statement|while|(|Expression|)|;" : "[ContainsDuplicateLabels] DoWhileStatement : do Statement while ( Expression ) ;",
  "sec-static-semantics-contains|AsyncGeneratorDeclaration|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[Contains] AsyncGeneratorDeclaration : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-hasinitializer|FormalParameterList|FormalParameterList|,|FormalParameter" : "[HasInitializer] FormalParameterList : FormalParameterList , FormalParameter",
  "sec-static-semantics-contains|GeneratorExpression|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[Contains] GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-isidentifierref|PrimaryExpression|IdentifierReference" : "[IsIdentifierRef] PrimaryExpression : IdentifierReference",
  "sec-static-semantics-modulerequests|ExportDeclaration|export|default|HoistableDeclaration" : "[ModuleRequests] ExportDeclaration : export default HoistableDeclaration",
  "sec-requireinternalslot" : "RequireInternalSlot",
  "sec-promise-resolve" : "PromiseResolve",
  "sec-runtime-semantics-iswordchar-abstract-operation" : "IsWordChar",
  "sec-dataview.prototype.setbigint64" : "DataView.prototype.setBigInt64",
  "sec-string.prototype.lastindexof" : "String.prototype.lastIndexOf",
  "sec-compilecharacterclass|CharacterClass|[^|ClassContents|]" : "[CompileCharacterClass] CharacterClass : [^ ClassContents ]",
  "await" : "Await",
  "sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization|BindingRestProperty|...|BindingIdentifier" : "[RestBindingInitialization] BindingRestProperty : ... BindingIdentifier",
  "sec-static-semantics-hascallintailposition|OptionalChain|OptionalChain|[|Expression|]" : "[HasCallInTailPosition] OptionalChain : OptionalChain [ Expression ]",
  "sec-runtime-semantics-iteratorbindinginitialization|ArrayBindingPattern|[|BindingRestElement|]" : "[IteratorBindingInitialization] ArrayBindingPattern : [ BindingRestElement ]",
  "sec-string.prototype.trimend" : "String.prototype.trimEnd",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|Expression|;|;|Expression|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( Expression ; ; Expression ) Statement",
  "sec-patterns-static-semantics-character-value|CharacterEscape|c|AsciiLetter" : "[CharacterValue] CharacterEscape : c AsciiLetter",
  "sec-unsigned-right-shift-operator-runtime-semantics-evaluation|ShiftExpression|ShiftExpression|>>>|AdditiveExpression" : "[Evaluation] ShiftExpression : ShiftExpression >>> AdditiveExpression",
  "sec-static-semantics-lexicallydeclarednames|CaseClause|case|Expression|:" : "[LexicallyDeclaredNames] CaseClause : case Expression :",
  "sec-makeprivatereference" : "MakePrivateReference",
  "sec-array.prototype.findlast" : "Array.prototype.findLast",
  "sec-static-semantics-containsundefinedbreaktarget|ForInOfStatement|for|(|ForDeclaration|in|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForInOfStatement : for ( ForDeclaration in Expression ) Statement",
  "sec-static-semantics-boundnames|BindingPropertyList|BindingPropertyList|,|BindingProperty" : "[BoundNames] BindingPropertyList : BindingPropertyList , BindingProperty",
  "sec-identifiercodepoint|IdentifierStart|IdentifierStartChar" : "[IdentifierCodePoint] IdentifierStart : IdentifierStartChar",
  "sec-binaryor" : "BinaryOr",
  "sec-generator-function-definitions-runtime-semantics-evaluation|GeneratorExpression|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[Evaluation] GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-runtime-semantics-iteratorbindinginitialization|BindingElementList|BindingElementList|,|BindingElisionElement" : "[IteratorBindingInitialization] BindingElementList : BindingElementList , BindingElisionElement",
  "sec-async-functions-abstract-operations-async-function-start" : "AsyncFunctionStart",
  "sec-proxy-object-internal-methods-and-internal-slots-isextensible" : "[[IsExtensible]]",
  "sec-utc-t" : "UTC",
  "sec-static-semantics-hascallintailposition|AdditiveExpression|AdditiveExpression|-|MultiplicativeExpression" : "[HasCallInTailPosition] AdditiveExpression : AdditiveExpression - MultiplicativeExpression",
  "sec-initializereferencedbinding" : "InitializeReferencedBinding",
  "sec-iteratornext" : "IteratorNext",
  "sec-runtime-semantics-instantiatefunctionobject|AsyncGeneratorDeclaration|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[InstantiateFunctionObject] AsyncGeneratorDeclaration : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-object.prototype.__lookupSetter__" : "Object.prototype.__lookupSetter__",
  "sec-object.defineproperties" : "Object.defineProperties",
  "sec-generator-function-definitions-runtime-semantics-evaluation|YieldExpression|yield|*|AssignmentExpression" : "[Evaluation] YieldExpression : yield * AssignmentExpression",
  "sec-relational-operators-runtime-semantics-evaluation|RelationalExpression|RelationalExpression|<=|ShiftExpression" : "[Evaluation] RelationalExpression : RelationalExpression <= ShiftExpression",
  "sec-%foriniteratorprototype%.next" : "ForInIteratorPrototype.next",
  "sec-static-semantics-prototypepropertynamelist|ClassElementList|ClassElement" : "[PrototypePropertyNameList] ClassElementList : ClassElement",
  "sec-let-and-const-declarations-runtime-semantics-evaluation|LexicalBinding|BindingIdentifier" : "[Evaluation] LexicalBinding : BindingIdentifier",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|LexicalDeclaration|Expression|;|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( LexicalDeclaration Expression ; ) Statement",
  "sec-compilequantifier|Quantifier|QuantifierPrefix|?" : "[CompileQuantifier] Quantifier : QuantifierPrefix ?",
  "sec-static-semantics-boundnames|ClassDeclaration|class|ClassTail" : "[BoundNames] ClassDeclaration : class ClassTail",
  "sec-unary-plus-operator-runtime-semantics-evaluation|UnaryExpression|+|UnaryExpression" : "[Evaluation] UnaryExpression : + UnaryExpression",
  "sec-runtime-semantics-arrayaccumulation|ElementList|ElementList|,|SpreadElement" : "[ArrayAccumulation] ElementList : ElementList , SpreadElement",
  "sec-compilequantifierprefix|QuantifierPrefix|{|DecimalDigits|,}" : "[CompileQuantifierPrefix] QuantifierPrefix : { DecimalDigits ,}",
  "sec-runtime-semantics-iteratorbindinginitialization|ArrayBindingPattern|[|BindingElementList|,|Elision|]" : "[IteratorBindingInitialization] ArrayBindingPattern : [ BindingElementList , Elision ]",
  "sec-runtime-semantics-methoddefinitionevaluation|MethodDefinition|get|ClassElementName|(|)|{|FunctionBody|}" : "[MethodDefinitionEvaluation] MethodDefinition : get ClassElementName ( ) { FunctionBody }",
  "sec-static-semantics-assignmenttargettype|RelationalExpression|RelationalExpression|<=|ShiftExpression" : "[AssignmentTargetType] RelationalExpression : RelationalExpression <= ShiftExpression",
  "sec-equality-operators-runtime-semantics-evaluation|EqualityExpression|EqualityExpression|!==|RelationalExpression" : "[Evaluation] EqualityExpression : EqualityExpression !== RelationalExpression",
  "sec-static-semantics-containsexpression|ArrayBindingPattern|[|]" : "[ContainsExpression] ArrayBindingPattern : [ ]",
  "sec-static-semantics-propname|PropertyDefinition|PropertyName|:|AssignmentExpression" : "[PropName] PropertyDefinition : PropertyName : AssignmentExpression",
  "sec-ispromise" : "IsPromise",
  "sec-topropertydescriptor" : "ToPropertyDescriptor",
  "sec-samevalue" : "SameValue",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|Expression|;|;|Expression|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( Expression ; ; Expression ) Statement",
  "sec-static-semantics-hascallintailposition|RelationalExpression|PrivateIdentifier|in|ShiftExpression" : "[HasCallInTailPosition] RelationalExpression : PrivateIdentifier in ShiftExpression",
  "sec-static-semantics-contains|AsyncGeneratorDeclaration|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[Contains] AsyncGeneratorDeclaration : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-string.prototype.endswith" : "String.prototype.endsWith",
  "sec-object.getownpropertynames" : "Object.getOwnPropertyNames",
  "sec-static-semantics-assignmenttargettype|UnaryExpression|~|UnaryExpression" : "[AssignmentTargetType] UnaryExpression : ~ UnaryExpression",
  "sec-static-semantics-isfunctiondefinition|GeneratorExpression|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[IsFunctionDefinition] GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }",
  "sec-testintegritylevel" : "TestIntegrityLevel",
  "sec-static-semantics-hascallintailposition|Expression|Expression|,|AssignmentExpression" : "[HasCallInTailPosition] Expression : Expression , AssignmentExpression",
  "sec-loopcontinues" : "LoopContinues",
  "sec-static-semantics-isfunctiondefinition|MemberExpression|MemberExpression|TemplateLiteral" : "[IsFunctionDefinition] MemberExpression : MemberExpression TemplateLiteral",
  "sec-array.prototype.filter" : "Array.prototype.filter",
  "sec-roundmvresult" : "RoundMVResult",
  "sec-static-semantics-isidentifierref|PrimaryExpression|ClassExpression" : "[IsIdentifierRef] PrimaryExpression : ClassExpression",
  "sec-atomiccompareexchangeinsharedblock" : "AtomicCompareExchangeInSharedBlock",
  "sec-static-semantics-lexicallyscopeddeclarations|StatementListItem|Declaration" : "[LexicallyScopedDeclarations] StatementListItem : Declaration",
  "sec-math.pow" : "Math.pow",
  "sec-runtime-semantics-methoddefinitionevaluation|AsyncGeneratorMethod|async|*|ClassElementName|(|UniqueFormalParameters|)|{|AsyncGeneratorBody|}" : "[MethodDefinitionEvaluation] AsyncGeneratorMethod : async * ClassElementName ( UniqueFormalParameters ) { AsyncGeneratorBody }",
  "sec-%typedarray%.prototype.toreversed" : "TypedArray.prototype.toReversed",
  "sec-getexportednames" : "GetExportedNames",
  "sec-static-semantics-expectedargumentcount|ArrowParameters|BindingIdentifier" : "[ExpectedArgumentCount] ArrowParameters : BindingIdentifier",
  "sec-object.is" : "Object.is",
  "sec-date.prototype.sethours" : "Date.prototype.setHours",
  "sec-global-environment-records-getbindingvalue-n-s" : "GetBindingValue",
  "sec-getfunctionrealm" : "GetFunctionRealm",
  "sec-tobiguint64" : "ToBigUint64",
  "sec-execute-async-module" : "ExecuteAsyncModule",
  "sec-innermoduleevaluation" : "InnerModuleEvaluation",
  "sec-promise-executor" : "Promise",
  "sec-static-semantics-containsundefinedcontinuetarget|SwitchStatement|switch|(|Expression|)|CaseBlock" : "[ContainsUndefinedContinueTarget] SwitchStatement : switch ( Expression ) CaseBlock",
  "sec-arraybuffer.prototype.slice" : "ArrayBuffer.prototype.slice",
  "sec-equality-operators-runtime-semantics-evaluation|EqualityExpression|EqualityExpression|===|RelationalExpression" : "[Evaluation] EqualityExpression : EqualityExpression === RelationalExpression",
  "sec-runtime-semantics-bindingclassdeclarationevaluation|ClassDeclaration|class|BindingIdentifier|ClassTail" : "[BindingClassDeclarationEvaluation] ClassDeclaration : class BindingIdentifier ClassTail",
  "sec-runtime-semantics-classfielddefinitionevaluation|FieldDefinition|ClassElementName" : "[ClassFieldDefinitionEvaluation] FieldDefinition : ClassElementName",
  "sec-asyncgeneratordrainqueue" : "AsyncGeneratorDrainQueue",
  "sec-variable-statement-runtime-semantics-evaluation|VariableDeclarationList|VariableDeclarationList|,|VariableDeclaration" : "[Evaluation] VariableDeclarationList : VariableDeclarationList , VariableDeclaration",
  "sec-runtime-semantics-stringnumericvalue|StrDecimalLiteral|-|StrUnsignedDecimalLiteral" : "[StringNumericValue] StrDecimalLiteral : - StrUnsignedDecimalLiteral",
  "sec-object.preventextensions" : "Object.preventExtensions",
  "sec-static-semantics-containsarguments|FunctionExpression|function|(|FormalParameters|)|{|FunctionBody|}" : "[ContainsArguments] FunctionExpression : function ( FormalParameters ) { FunctionBody }",
  "sec-runtime-semantics-forinofloopevaluation|ForInOfStatement|for|await|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[ForInOfLoopEvaluation] ForInOfStatement : for await ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-static-semantics-varscopeddeclarations|WithStatement|with|(|Expression|)|Statement" : "[VarScopedDeclarations] WithStatement : with ( Expression ) Statement",
  "sec-typedarray-set" : "[[Set]]",
  "sec-array-exotic-objects-defineownproperty-p-desc" : "[[DefineOwnProperty]]",
  "sec-proxy-target-handler" : "Proxy",
  "sec-object-environment-records-hassuperbinding" : "HasSuperBinding",
  "sec-static-semantics-containsundefinedcontinuetarget|Statement|DebuggerStatement" : "[ContainsUndefinedContinueTarget] Statement : DebuggerStatement",
  "sec-static-semantics-lexicallyscopeddeclarations|CaseBlock|{|CaseClauses|DefaultClause|CaseClauses|}" : "[LexicallyScopedDeclarations] CaseBlock : { CaseClauses DefaultClause CaseClauses }",
  "sec-static-semantics-lexicallyscopeddeclarations|ExportDeclaration|export|default|AssignmentExpression|;" : "[LexicallyScopedDeclarations] ExportDeclaration : export default AssignmentExpression ;",
  "sec-numeric-types-bigint-leftShift" : "BigInt::leftShift",
  "sec-runtime-semantics-instantiateasyncarrowfunctionexpression|AsyncArrowFunction|async|AsyncArrowBindingIdentifier|=>|AsyncConciseBody" : "[InstantiateAsyncArrowFunctionExpression] AsyncArrowFunction : async AsyncArrowBindingIdentifier => AsyncConciseBody",
  "sec-iteratorstepvalue" : "IteratorStepValue",
  "sec-array.prototype.tolocalestring" : "Array.prototype.toLocaleString",
  "sec-validateatomicaccess" : "ValidateAtomicAccess",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|;|Expression|;|)|Statement" : "[VarDeclaredNames] ForStatement : for ( ; Expression ; ) Statement",
  "sec-static-semantics-isidentifierref|MemberExpression|MemberExpression|.|PrivateIdentifier" : "[IsIdentifierRef] MemberExpression : MemberExpression . PrivateIdentifier",
  "sec-runtime-semantics-propertydefinitionevaluation|PropertyDefinition|PropertyName|:|AssignmentExpression" : "[PropertyDefinitionEvaluation] PropertyDefinition : PropertyName : AssignmentExpression",
  "sec-patterns-static-semantics-character-value|HexTrailSurrogate|Hex4Digits" : "[CharacterValue] HexTrailSurrogate : Hex4Digits",
  "sec-array-initializer-runtime-semantics-evaluation|ArrayLiteral|[|Elision|]" : "[Evaluation] ArrayLiteral : [ Elision ]",
  "sec-number-constructor-number-value" : "Number",
  "sec-resolveexport" : "ResolveExport",
  "sec-getownpropertykeys" : "GetOwnPropertyKeys",
  "sec-static-semantics-boundnames|GeneratorDeclaration|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[BoundNames] GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }",
  "sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p" : "[[GetOwnProperty]]",
  "sec-makedate" : "MakeDate",
  "sec-nativeerror" : "_NativeError_",
  "sec-touint32" : "ToUint32",
  "sec-static-semantics-boundnames|ArrayBindingPattern|[|BindingElementList|,|Elision|BindingRestElement|]" : "[BoundNames] ArrayBindingPattern : [ BindingElementList , Elision BindingRestElement ]",
  "sec-static-semantics-containsundefinedcontinuetarget|DefaultClause|default|:" : "[ContainsUndefinedContinueTarget] DefaultClause : default :",
  "sec-array.prototype.foreach" : "Array.prototype.forEach",
  "sec-promise.any" : "Promise.any",
  "sec-static-semantics-containsarguments|GeneratorExpression|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[ContainsArguments] GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-declarative-environment-records-hasbinding-n" : "HasBinding",
  "sec-makearggetter" : "MakeArgGetter",
  "sec-static-semantics-referencedbindings|ExportsList|ExportsList|,|ExportSpecifier" : "[ReferencedBindings] ExportsList : ExportsList , ExportSpecifier",
  "sec-isprivatereference" : "IsPrivateReference",
  "sec-runtime-semantics-argumentlistevaluation|ArgumentList|ArgumentList|,|...|AssignmentExpression" : "[ArgumentListEvaluation] ArgumentList : ArgumentList , ... AssignmentExpression",
  "sec-static-semantics-contains|ArrowFunction|ArrowParameters|=>|ConciseBody" : "[Contains] ArrowFunction : ArrowParameters => ConciseBody",
  "sec-static-semantics-maycontainstrings|ClassSetOperand|ClassSetCharacter" : "[MayContainStrings] ClassSetOperand : ClassSetCharacter",
  "sec-array.prototype.reduceright" : "Array.prototype.reduceRight",
  "sec-string.prototype.trim" : "String.prototype.trim",
  "sec-static-semantics-hascallintailposition|UnaryExpression|void|UnaryExpression" : "[HasCallInTailPosition] UnaryExpression : void UnaryExpression",
  "sec-relational-operators-runtime-semantics-evaluation|RelationalExpression|RelationalExpression|instanceof|ShiftExpression" : "[Evaluation] RelationalExpression : RelationalExpression instanceof ShiftExpression",
  "sec-array.prototype.keys" : "Array.prototype.keys",
  "sec-static-semantics-issimpleparameterlist|CoverCallExpressionAndAsyncArrowHead|MemberExpression|Arguments" : "[IsSimpleParameterList] CoverCallExpressionAndAsyncArrowHead : MemberExpression Arguments",
  "sec-get-regexp.prototype.flags" : "get RegExp.prototype.flags",
  "sec-compileclasssetstring|ClassString" : "[CompileClassSetString] ClassString :",
  "sec-completepropertydescriptor" : "CompletePropertyDescriptor",
  "sec-static-semantics-stringvalue|LabelIdentifier|await" : "[StringValue] LabelIdentifier : await",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( var VariableDeclarationList ; Expression ; ) Statement",
  "sec-static-semantics-propname|MethodDefinition|set|ClassElementName|(|PropertySetParameterList|)|{|FunctionBody|}" : "[PropName] MethodDefinition : set ClassElementName ( PropertySetParameterList ) { FunctionBody }",
  "sec-math.fround" : "Math.fround",
  "sec-static-semantics-hascallintailposition|UnaryExpression|AwaitExpression" : "[HasCallInTailPosition] UnaryExpression : AwaitExpression",
  "sec-runtime-semantics-iteratorbindinginitialization|AsyncArrowBindingIdentifier|BindingIdentifier" : "[IteratorBindingInitialization] AsyncArrowBindingIdentifier : BindingIdentifier",
  "sec-static-semantics-isconstantdeclaration|GeneratorDeclaration|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[IsConstantDeclaration] GeneratorDeclaration : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-lexicallyscopeddeclarations|ExportDeclaration|export|default|ClassDeclaration" : "[LexicallyScopedDeclarations] ExportDeclaration : export default ClassDeclaration",
  "sec-static-semantics-assignmenttargettype|RelationalExpression|RelationalExpression|in|ShiftExpression" : "[AssignmentTargetType] RelationalExpression : RelationalExpression in ShiftExpression",
  "sec-for-in-and-for-of-statements-runtime-semantics-evaluation|BindingIdentifier|Identifier" : "[Evaluation] BindingIdentifier : Identifier",
  "sec-%typedarray%.prototype.values" : "TypedArray.prototype.values",
  "sec-static-semantics-assignmenttargettype|LeftHandSideExpression|OptionalExpression" : "[AssignmentTargetType] LeftHandSideExpression : OptionalExpression",
  "sec-static-semantics-isidentifierref|PrimaryExpression|AsyncGeneratorExpression" : "[IsIdentifierRef] PrimaryExpression : AsyncGeneratorExpression",
  "sec-static-semantics-hascallintailposition|PrimaryExpression|IdentifierReference" : "[HasCallInTailPosition] PrimaryExpression : IdentifierReference",
  "sec-static-semantics-lexicallydeclarednames|StatementListItem|Declaration" : "[LexicallyDeclaredNames] StatementListItem : Declaration",
  "sec-gather-available-ancestors" : "GatherAvailableAncestors",
  "sec-runtime-semantics-bindinginitialization|BindingIdentifier|yield" : "[BindingInitialization] BindingIdentifier : yield",
  "sec-module-environment-records-getbindingvalue-n-s" : "GetBindingValue",
  "sec-static-semantics-hasdirectsuper|MethodDefinition|get|ClassElementName|(|)|{|FunctionBody|}" : "[HasDirectSuper] MethodDefinition : get ClassElementName ( ) { FunctionBody }",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|LexicalDeclaration|;|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( LexicalDeclaration ; ) Statement",
  "sec-static-semantics-varscopeddeclarations|ModuleItem|ExportDeclaration" : "[VarScopedDeclarations] ModuleItem : ExportDeclaration",
  "sec-static-semantics-modulerequests|Module" : "[ModuleRequests] Module :",
  "sec-asyncgeneratorfunction" : "AsyncGeneratorFunction",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|Expression|;|;|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( Expression ; ; Expression ) Statement",
  "sec-runtime-semantics-instantiateordinaryfunctionobject|FunctionDeclaration|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[InstantiateOrdinaryFunctionObject] FunctionDeclaration : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-runtime-semantics-caseblockevaluation|CaseBlock|{|DefaultClause|CaseClauses|}" : "[CaseBlockEvaluation] CaseBlock : { DefaultClause CaseClauses }",
  "sec-runtime-semantics-arrayaccumulation|Elision|," : "[ArrayAccumulation] Elision : ,",
  "sec-static-semantics-containsduplicatelabels|ModuleItem|ExportDeclaration" : "[ContainsDuplicateLabels] ModuleItem : ExportDeclaration",
  "sec-static-semantics-isfunctiondefinition|AssignmentExpression|ArrowFunction" : "[IsFunctionDefinition] AssignmentExpression : ArrowFunction",
  "sec-touint16" : "ToUint16",
  "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization|BindingProperty|PropertyName|:|BindingElement" : "[PropertyBindingInitialization] BindingProperty : PropertyName : BindingElement",
  "sec-object.values" : "Object.values",
  "sec-globaldeclarationinstantiation" : "GlobalDeclarationInstantiation",
  "sec-static-semantics-boundnames|BindingElement|BindingPattern" : "[BoundNames] BindingElement : BindingPattern",
  "sec-static-semantics-boundnames|ArrayBindingPattern|[|Elision|]" : "[BoundNames] ArrayBindingPattern : [ Elision ]",
  "sec-arguments-exotic-objects-getownproperty-p" : "[[GetOwnProperty]]",
  "sec-compiletocharset|ClassEscape|-" : "[CompileToCharSet] ClassEscape : -",
  "sec-ispropertyreference" : "IsPropertyReference",
  "sec-numeric-types-number-bitwiseOR" : "Number::bitwiseOR",
  "sec-static-semantics-vardeclarednames|ForInOfStatement|for|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[VarDeclaredNames] ForInOfStatement : for ( var ForBinding of AssignmentExpression ) Statement",
  "sec-static-semantics-modulerequests|ExportDeclaration|export|Declaration" : "[ModuleRequests] ExportDeclaration : export Declaration",
  "sec-clonearraybuffer" : "CloneArrayBuffer",
  "sec-hostcalljobcallback" : "HostCallJobCallback",
  "sec-object.keys" : "Object.keys",
  "sec-compiletocharset|ClassSetCharacter|\\|ClassSetReservedPunctuator" : "[CompileToCharSet] ClassSetCharacter : \\ ClassSetReservedPunctuator",
  "sec-date.prototype.tojson" : "Date.prototype.toJSON",
  "sec-weakmap.prototype.has" : "WeakMap.prototype.has",
  "sec-date.prototype.getday" : "Date.prototype.getDay",
  "sec-patterns-static-semantics-character-value|ClassAtomNoDash|SourceCharacter" : "[CharacterValue] ClassAtomNoDash : SourceCharacter",
  "sec-variable-statement-runtime-semantics-evaluation|VariableDeclaration|BindingIdentifier" : "[Evaluation] VariableDeclaration : BindingIdentifier",
  "sec-static-semantics-containsarguments|AsyncGeneratorExpression|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[ContainsArguments] AsyncGeneratorExpression : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-createasynciteratorfromclosure" : "CreateAsyncIteratorFromClosure",
  "sec-static-semantics-containsundefinedbreaktarget|IfStatement|if|(|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] IfStatement : if ( Expression ) Statement",
  "sec-promise.allsettled-resolve-element-functions" : "yet:`Promise.allSettled`ResolveElementFunction",
  "sec-static-semantics-containsduplicatelabels|CaseClause|case|Expression|:" : "[ContainsDuplicateLabels] CaseClause : case Expression :",
  "sec-object.seal" : "Object.seal",
  "sec-static-semantics-isfunctiondefinition|MemberExpression|MemberExpression|.|IdentifierName" : "[IsFunctionDefinition] MemberExpression : MemberExpression . IdentifierName",
  "sec-parsetext" : "ParseText",
  "sec-ordinary-object-internal-methods-and-internal-slots-preventextensions" : "[[PreventExtensions]]",
  "sec-prepareforordinarycall" : "PrepareForOrdinaryCall",
  "sec-compiletocharset|ClassEscape|b" : "[CompileToCharSet] ClassEscape : b",
  "sec-static-semantics-boundnames|LexicalDeclaration|LetOrConst|BindingList|;" : "[BoundNames] LexicalDeclaration : LetOrConst BindingList ;",
  "sec-static-semantics-isfunctiondefinition|GeneratorExpression|function|*|BindingIdentifier|(|FormalParameters|)|{|GeneratorBody|}" : "[IsFunctionDefinition] GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }",
  "sec-%typedarray%.prototype.indexof" : "TypedArray.prototype.indexOf",
  "sec-patterns-static-semantics-character-value|RegExpUnicodeEscapeSequence|u|Hex4Digits" : "[CharacterValue] RegExpUnicodeEscapeSequence : u Hex4Digits",
  "sec-static-semantics-varscopeddeclarations|FunctionStatementList|StatementList" : "[VarScopedDeclarations] FunctionStatementList : StatementList",
  "sec-static-semantics-vardeclarednames|ModuleItem|ExportDeclaration" : "[VarDeclaredNames] ModuleItem : ExportDeclaration",
  "sec-set.prototype.foreach" : "Set.prototype.forEach",
  "sec-iscallable" : "IsCallable",
  "sec-runtime-semantics-labelledevaluation|Statement|BreakStatement" : "[LabelledEvaluation] Statement : BreakStatement",
  "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization|BindingProperty|SingleNameBinding" : "[PropertyBindingInitialization] BindingProperty : SingleNameBinding",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|Expression|;|Expression|;|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( Expression ; Expression ; ) Statement",
  "sec-static-semantics-stringvalue|IdentifierReference|await" : "[StringValue] IdentifierReference : await",
  "sec-runtime-semantics-forinofloopevaluation|ForInOfStatement|for|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[ForInOfLoopEvaluation] ForInOfStatement : for ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-static-semantics-containsduplicatelabels|ClassStaticBlockStatementList" : "[ContainsDuplicateLabels] ClassStaticBlockStatementList :",
  "sec-import-call-runtime-semantics-evaluation|ImportCall|import|(|AssignmentExpression|)" : "[Evaluation] ImportCall : import ( AssignmentExpression )",
  "sec-static-semantics-vardeclarednames|Statement|BreakStatement" : "[VarDeclaredNames] Statement : BreakStatement",
  "sec-static-semantics-boundnames|BindingProperty|PropertyName|:|BindingElement" : "[BoundNames] BindingProperty : PropertyName : BindingElement",
  "sec-static-semantics-containsduplicatelabels|DefaultClause|default|:" : "[ContainsDuplicateLabels] DefaultClause : default :",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|;|;|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( ; ; ) Statement",
  "sec-static-semantics-computedpropertycontains|ClassElement|ClassStaticBlock" : "[ComputedPropertyContains] ClassElement : ClassStaticBlock",
  "sec-static-semantics-propname|ComputedPropertyName|[|AssignmentExpression|]" : "[PropName] ComputedPropertyName : [ AssignmentExpression ]",
  "sec-arrow-function-definitions-runtime-semantics-evaluation|ArrowFunction|ArrowParameters|=>|ConciseBody" : "[Evaluation] ArrowFunction : ArrowParameters => ConciseBody",
  "sec-static-semantics-containsduplicatelabels|CaseBlock|{|}" : "[ContainsDuplicateLabels] CaseBlock : { }",
  "sec-completion-ao" : "Completion",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|;|;|)|Statement" : "[VarDeclaredNames] ForStatement : for ( ; ; ) Statement",
  "sec-prefix-increment-operator-runtime-semantics-evaluation|UpdateExpression|++|UnaryExpression" : "[Evaluation] UpdateExpression : ++ UnaryExpression",
  "sec-math.max" : "Math.max",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|LexicalDeclaration|Expression|;|Expression|)|Statement" : "[VarDeclaredNames] ForStatement : for ( LexicalDeclaration Expression ; Expression ) Statement",
  "sec-static-semantics-isdestructuring|MemberExpression|new|MemberExpression|Arguments" : "[IsDestructuring] MemberExpression : new MemberExpression Arguments",
  "sec-static-semantics-maycontainstrings|CharacterClassEscape|P{|UnicodePropertyValueExpression|}" : "[MayContainStrings] CharacterClassEscape : P{ UnicodePropertyValueExpression }",
  "sec-static-semantics-varscopeddeclarations|VariableDeclarationList|VariableDeclaration" : "[VarScopedDeclarations] VariableDeclarationList : VariableDeclaration",
  "sec-get-regexp.prototype.sticky" : "get RegExp.prototype.sticky",
  "sec-number.prototype.valueof" : "Number.prototype.valueOf",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|Expression|;|Expression|;|Expression|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( Expression ; Expression ; Expression ) Statement",
  "sec-boolean-constructor-boolean-value" : "Boolean",
  "sec-static-semantics-assignmenttargettype|RelationalExpression|RelationalExpression|>=|ShiftExpression" : "[AssignmentTargetType] RelationalExpression : RelationalExpression >= ShiftExpression",
  "sec-createnonenumerabledatapropertyorthrow" : "CreateNonEnumerableDataPropertyOrThrow",
  "sec-string.prototype.substring" : "String.prototype.substring",
  "sec-static-semantics-isconstantdeclaration|ClassDeclaration|class|ClassTail" : "[IsConstantDeclaration] ClassDeclaration : class ClassTail",
  "sec-runtime-semantics-instantiatefunctionobject|AsyncFunctionDeclaration|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[InstantiateFunctionObject] AsyncFunctionDeclaration : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-atomics.compareexchange" : "Atomics.compareExchange",
  "sec-static-semantics-allprivateidentifiersvalid|OptionalChain|OptionalChain|.|PrivateIdentifier" : "[AllPrivateIdentifiersValid] OptionalChain : OptionalChain . PrivateIdentifier",
  "sec-static-semantics-isfunctiondefinition|BitwiseXORExpression|BitwiseXORExpression|^|BitwiseANDExpression" : "[IsFunctionDefinition] BitwiseXORExpression : BitwiseXORExpression ^ BitwiseANDExpression",
  "sec-static-semantics-containsduplicatelabels|ModuleItem|ImportDeclaration" : "[ContainsDuplicateLabels] ModuleItem : ImportDeclaration",
  "sec-static-semantics-isstrict|Script" : "[IsStrict] Script :",
  "sec-static-semantics-containsarguments|GeneratorDeclaration|function|*|(|FormalParameters|)|{|GeneratorBody|}" : "[ContainsArguments] GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|LexicalDeclaration|;|Expression|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( LexicalDeclaration ; Expression ) Statement",
  "sec-timezoneestring" : "TimeZoneString",
  "sec-static-semantics-containsexpression|ArrayBindingPattern|[|BindingElementList|,|BindingRestElement|]" : "[ContainsExpression] ArrayBindingPattern : [ BindingElementList , BindingRestElement ]",
  "sec-arraycreate" : "ArrayCreate",
  "sec-static-semantics-hasname|AsyncArrowFunction|CoverCallExpressionAndAsyncArrowHead|=>|AsyncConciseBody" : "[HasName] AsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead => AsyncConciseBody",
  "sec-static-semantics-containsundefinedcontinuetarget|TryStatement|try|Block|Finally" : "[ContainsUndefinedContinueTarget] TryStatement : try Block Finally",
  "sec-static-semantics-propname|LiteralPropertyName|StringLiteral" : "[PropName] LiteralPropertyName : StringLiteral",
  "sec-compileassertion|Assertion|(?!|Disjunction|)" : "[CompileAssertion] Assertion : (?! Disjunction )",
  "sec-regexp-prototype-matchall" : "RegExp.prototype[@@matchAll]",
  "sec-maketime" : "MakeTime",
  "sec-static-semantics-isfunctiondefinition|EqualityExpression|EqualityExpression|!==|RelationalExpression" : "[IsFunctionDefinition] EqualityExpression : EqualityExpression !== RelationalExpression",
  "sec-static-semantics-lexicallyscopeddeclarations|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[LexicallyScopedDeclarations] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-privateelementfind" : "PrivateElementFind",
  "sec-static-semantics-boundnames|ImportSpecifier|ModuleExportName|as|ImportedBinding" : "[BoundNames] ImportSpecifier : ModuleExportName as ImportedBinding",
  "sec-object.groupby" : "Object.groupBy",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|;|;|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( ; ; ) Statement",
  "sec-static-semantics-hascallintailposition|MemberExpression|MemberExpression|[|Expression|]" : "[HasCallInTailPosition] MemberExpression : MemberExpression [ Expression ]",
  "sec-validateintegertypedarray" : "ValidateIntegerTypedArray",
  "sec-setviewvalue" : "SetViewValue",
  "sec-static-semantics-boundnames|AsyncGeneratorDeclaration|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[BoundNames] AsyncGeneratorDeclaration : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-string.prototype.charcodeat" : "String.prototype.charCodeAt",
  "sec-makemethod" : "MakeMethod",
  "sec-static-semantics-allprivateidentifiersvalid|RelationalExpression|PrivateIdentifier|in|ShiftExpression" : "[AllPrivateIdentifiersValid] RelationalExpression : PrivateIdentifier in ShiftExpression",
  "sec-static-semantics-hascallintailposition|EqualityExpression|EqualityExpression|==|RelationalExpression" : "[HasCallInTailPosition] EqualityExpression : EqualityExpression == RelationalExpression",
  "sec-math.sinh" : "Math.sinh",
  "sec-static-semantics-hascallintailposition|MemberExpression|MemberExpression|TemplateLiteral" : "[HasCallInTailPosition] MemberExpression : MemberExpression TemplateLiteral",
  "sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys" : "[[OwnPropertyKeys]]",
  "sec-static-semantics-toplevelvarscopeddeclarations|LabelledItem|FunctionDeclaration" : "[TopLevelVarScopedDeclarations] LabelledItem : FunctionDeclaration",
  "sec-static-semantics-isfunctiondefinition|ConditionalExpression|ShortCircuitExpression|?|AssignmentExpression|:|AssignmentExpression" : "[IsFunctionDefinition] ConditionalExpression : ShortCircuitExpression ? AssignmentExpression : AssignmentExpression",
  "sec-arraybuffer.prototype.transfer" : "ArrayBuffer.prototype.transfer",
  "sec-static-semantics-hascallintailposition|CallExpression|CallExpression|TemplateLiteral" : "[HasCallInTailPosition] CallExpression : CallExpression TemplateLiteral",
  "sec-object.defineproperty" : "Object.defineProperty",
  "sec-static-semantics-classelementkind|ClassElement|MethodDefinition" : "[ClassElementKind] ClassElement : MethodDefinition",
  "sec-object-environment-records-hasbinding-n" : "HasBinding",
  "sec-assignment-operators-runtime-semantics-evaluation|AssignmentExpression|LeftHandSideExpression|||=|AssignmentExpression" : "[Evaluation] AssignmentExpression : LeftHandSideExpression ||= AssignmentExpression",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|Expression|)|Statement" : "[VarDeclaredNames] ForStatement : for ( var VariableDeclarationList ; Expression ; Expression ) Statement",
  "sec-static-semantics-assignmenttargettype|IdentifierReference|Identifier" : "[AssignmentTargetType] IdentifierReference : Identifier",
  "sec-compiletocharset|ClassUnion|ClassSetOperand|ClassUnion" : "[CompileToCharSet] ClassUnion : ClassSetOperand ClassUnion",
  "sec-function-environment-records-getthisbinding" : "GetThisBinding",
  "sec-static-semantics-importentriesformodule|ImportedDefaultBinding|ImportedBinding" : "[ImportEntriesForModule] ImportedDefaultBinding : ImportedBinding",
  "sec-compiletocharset|CharacterClassEscape|p{|UnicodePropertyValueExpression|}" : "[CompileToCharSet] CharacterClassEscape : p{ UnicodePropertyValueExpression }",
  "sec-set.prototype.values" : "Set.prototype.values",
  "sec-static-semantics-boundnames|ArrayBindingPattern|[|]" : "[BoundNames] ArrayBindingPattern : [ ]",
  "sec-static-semantics-constructormethod|ClassElementList|ClassElement" : "[ConstructorMethod] ClassElementList : ClassElement",
  "sec-global-environment-records-hasbinding-n" : "HasBinding",
  "sec-script-semantics-runtime-semantics-evaluation|Script" : "[Evaluation] Script :",
  "sec-%typedarray%.prototype.subarray" : "TypedArray.prototype.subarray",
  "sec-static-semantics-lexicallydeclarednames|StatementListItem|Statement" : "[LexicallyDeclaredNames] StatementListItem : Statement",
  "sec-arguments-exotic-objects-get-p-receiver" : "[[Get]]",
  "sec-static-semantics-hasdirectsuper|GeneratorMethod|*|ClassElementName|(|UniqueFormalParameters|)|{|GeneratorBody|}" : "[HasDirectSuper] GeneratorMethod : * ClassElementName ( UniqueFormalParameters ) { GeneratorBody }",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|Expression|;|;|Expression|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( Expression ; ; Expression ) Statement",
  "sec-static-semantics-containsundefinedbreaktarget|ForInOfStatement|for|await|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[ContainsUndefinedBreakTarget] ForInOfStatement : for await ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-charactercomplement" : "CharacterComplement",
  "sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof" : "[[GetPrototypeOf]]",
  "sec-set.prototype.has" : "Set.prototype.has",
  "sec-static-semantics-hascallintailposition|CaseBlock|{|CaseClauses|DefaultClause|CaseClauses|}" : "[HasCallInTailPosition] CaseBlock : { CaseClauses DefaultClause CaseClauses }",
  "sec-runtime-semantics-keyedbindinginitialization|BindingElement|BindingPattern" : "[KeyedBindingInitialization] BindingElement : BindingPattern",
  "sec-get-sharedarraybuffer.prototype.bytelength" : "get SharedArrayBuffer.prototype.byteLength",
  "sec-static-semantics-assignmenttargettype|PrimaryExpression|GeneratorExpression" : "[AssignmentTargetType] PrimaryExpression : GeneratorExpression",
  "sec-static-semantics-varscopeddeclarations|ForInOfStatement|for|await|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[VarScopedDeclarations] ForInOfStatement : for await ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-async-function-definitions-runtime-semantics-evaluation|AsyncFunctionExpression|async|function|BindingIdentifier|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[Evaluation] AsyncFunctionExpression : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-containsundefinedbreaktarget|Statement|DebuggerStatement" : "[ContainsUndefinedBreakTarget] Statement : DebuggerStatement",
  "sec-date.prototype.getfullyear" : "Date.prototype.getFullYear",
  "sec-function-definitions-runtime-semantics-evaluation|FunctionExpression|function|(|FormalParameters|)|{|FunctionBody|}" : "[Evaluation] FunctionExpression : function ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-toplevelvardeclarednames|LabelledItem|FunctionDeclaration" : "[TopLevelVarDeclaredNames] LabelledItem : FunctionDeclaration",
  "sec-static-semantics-isfunctiondefinition|PrimaryExpression|this" : "[IsFunctionDefinition] PrimaryExpression : this",
  "sec-static-semantics-propname|PropertyDefinition|...|AssignmentExpression" : "[PropName] PropertyDefinition : ... AssignmentExpression",
  "sec-static-semantics-containsundefinedcontinuetarget|Statement|EmptyStatement" : "[ContainsUndefinedContinueTarget] Statement : EmptyStatement",
  "sec-static-semantics-exportentries|ExportDeclaration|export|VariableStatement" : "[ExportEntries] ExportDeclaration : export VariableStatement",
  "sec-static-semantics-containsarguments|AsyncFunctionDeclaration|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[ContainsArguments] AsyncFunctionDeclaration : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-static-semantics-boundnames|ArrayBindingPattern|[|BindingElementList|,|BindingRestElement|]" : "[BoundNames] ArrayBindingPattern : [ BindingElementList , BindingRestElement ]",
  "sec-valueofreadevent" : "ValueOfReadEvent",
  "sec-math.cbrt" : "Math.cbrt",
  "sec-delete-operator-runtime-semantics-evaluation|UnaryExpression|delete|UnaryExpression" : "[Evaluation] UnaryExpression : delete UnaryExpression",
  "sec-numeric-types-number-divide" : "Number::divide",
  "sec-optional-chaining-chain-evaluation|OptionalChain|OptionalChain|.|IdentifierName" : "[ChainEvaluation] OptionalChain : OptionalChain . IdentifierName",
  "sec-runjobs" : "RunJobs",
  "sec-parse-script" : "ParseScript",
  "sec-generator.prototype.return" : "GeneratorFunction.prototype.prototype.return",
  "sec-call" : "Call",
  "sec-runtime-semantics-instantiateasyncfunctionexpression|AsyncFunctionExpression|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[InstantiateAsyncFunctionExpression] AsyncFunctionExpression : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-ordinarycallbindthis" : "OrdinaryCallBindThis",
  "sec-literals-runtime-semantics-evaluation|Literal|NumericLiteral" : "[Evaluation] Literal : NumericLiteral",
  "sec-runtime-semantics-catchclauseevaluation|Catch|catch|Block" : "[CatchClauseEvaluation] Catch : catch Block",
  "sec-grouping-operator-runtime-semantics-evaluation|ParenthesizedExpression|(|Expression|)" : "[Evaluation] ParenthesizedExpression : ( Expression )",
  "sec-static-semantics-vardeclarednames|ForInOfStatement|for|(|ForDeclaration|of|AssignmentExpression|)|Statement" : "[VarDeclaredNames] ForInOfStatement : for ( ForDeclaration of AssignmentExpression ) Statement",
  "sec-static-semantics-containsduplicatelabels|Statement|ReturnStatement" : "[ContainsDuplicateLabels] Statement : ReturnStatement",
  "sec-static-semantics-boundnames|ExportDeclaration|export|default|ClassDeclaration" : "[BoundNames] ExportDeclaration : export default ClassDeclaration",
  "sec-moduleevaluation" : "Evaluate",
  "sec-static-semantics-hascallintailposition|Statement|BreakStatement" : "[HasCallInTailPosition] Statement : BreakStatement",
  "sec-static-semantics-isfunctiondefinition|ExponentiationExpression|UpdateExpression|**|ExponentiationExpression" : "[IsFunctionDefinition] ExponentiationExpression : UpdateExpression ** ExponentiationExpression",
  "sec-subtraction-operator-minus-runtime-semantics-evaluation|AdditiveExpression|AdditiveExpression|-|MultiplicativeExpression" : "[Evaluation] AdditiveExpression : AdditiveExpression - MultiplicativeExpression",
  "sec-map.prototype.delete" : "Map.prototype.delete",
  "sec-array-initializer-runtime-semantics-evaluation|ArrayLiteral|[|ElementList|,|]" : "[Evaluation] ArrayLiteral : [ ElementList , ]",
  "sec-thissymbolvalue" : "ThisSymbolValue",
  "sec-get-regexp.prototype.dotAll" : "get RegExp.prototype.dotAll",
  "sec-forbodyevaluation" : "ForBodyEvaluation",
  "sec-static-semantics-exportentries|ExportDeclaration|export|ExportFromClause|FromClause|;" : "[ExportEntries] ExportDeclaration : export ExportFromClause FromClause ;",
  "sec-static-semantics-isfunctiondefinition|EqualityExpression|EqualityExpression|===|RelationalExpression" : "[IsFunctionDefinition] EqualityExpression : EqualityExpression === RelationalExpression",
  "sec-static-semantics-hasinitializer|SingleNameBinding|BindingIdentifier|Initializer" : "[HasInitializer] SingleNameBinding : BindingIdentifier Initializer",
  "sec-runtime-semantics-canonicalize-ch" : "Canonicalize",
  "sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget" : "[[Construct]]",
  "sec-static-semantics-lexicallyscopeddeclarations|CaseBlock|{|CaseClauses|DefaultClause|}" : "[LexicallyScopedDeclarations] CaseBlock : { CaseClauses DefaultClause }",
  "sec-runtime-semantics-propertydefinitionevaluation|PropertyDefinition|IdentifierReference" : "[PropertyDefinitionEvaluation] PropertyDefinition : IdentifierReference",
  "sec-privatemethodoraccessoradd" : "PrivateMethodOrAccessorAdd",
  "sec-createarrayfromlist" : "CreateArrayFromList",
  "sec-static-semantics-exportednames|ExportDeclaration|export|Declaration" : "[ExportedNames] ExportDeclaration : export Declaration",
  "sec-set-o-p-v-throw" : "Set",
  "sec-weak-ref.prototype.deref" : "WeakRef.prototype.deref",
  "sec-static-semantics-boundnames|LexicalBinding|BindingIdentifier" : "[BoundNames] LexicalBinding : BindingIdentifier",
  "sec-static-semantics-hascallintailposition|TryStatement|try|Block|Finally" : "[HasCallInTailPosition] TryStatement : try Block Finally",
  "sec-static-semantics-isconstantdeclaration|ExportDeclaration|export|NamedExports|;" : "[IsConstantDeclaration] ExportDeclaration : export NamedExports ;",
  "sec-runtime-semantics-evaluatebody|Initializer|=|AssignmentExpression" : "[EvaluateBody] Initializer : = AssignmentExpression",
  "sec-static-semantics-hascallintailposition|RelationalExpression|RelationalExpression|instanceof|ShiftExpression" : "[HasCallInTailPosition] RelationalExpression : RelationalExpression instanceof ShiftExpression",
  "sec-static-semantics-modulerequests|ModuleItemList|ModuleItemList|ModuleItem" : "[ModuleRequests] ModuleItemList : ModuleItemList ModuleItem",
  "sec-reflect.isextensible" : "Reflect.isExtensible",
  "sec-static-semantics-varscopeddeclarations|ForInOfStatement|for|(|LeftHandSideExpression|in|Expression|)|Statement" : "[VarScopedDeclarations] ForInOfStatement : for ( LeftHandSideExpression in Expression ) Statement",
  "sec-runtime-semantics-forinofloopevaluation|ForInOfStatement|for|(|LeftHandSideExpression|in|Expression|)|Statement" : "[ForInOfLoopEvaluation] ForInOfStatement : for ( LeftHandSideExpression in Expression ) Statement",
  "sec-compileassertion|Assertion|^" : "[CompileAssertion] Assertion : ^",
  "sec-compilequantifierprefix|QuantifierPrefix|{|DecimalDigits|}" : "[CompileQuantifierPrefix] QuantifierPrefix : { DecimalDigits }",
  "sec-static-semantics-hasname|ClassExpression|class|ClassTail" : "[HasName] ClassExpression : class ClassTail",
  "sec-static-semantics-lexicallydeclarednames|FunctionStatementList|StatementList" : "[LexicallyDeclaredNames] FunctionStatementList : StatementList",
  "sec-static-semantics-containsduplicatelabels|SwitchStatement|switch|(|Expression|)|CaseBlock" : "[ContainsDuplicateLabels] SwitchStatement : switch ( Expression ) CaseBlock",
  "sec-numeric-types-number-equal" : "Number::equal",
  "sec-date.utc" : "Date.UTC",
  "sec-static-semantics-boundnames|FunctionDeclaration|function|BindingIdentifier|(|FormalParameters|)|{|FunctionBody|}" : "[BoundNames] FunctionDeclaration : function BindingIdentifier ( FormalParameters ) { FunctionBody }",
  "sec-static-semantics-flagtext|RegularExpressionLiteral|/|RegularExpressionBody|/|RegularExpressionFlags" : "[FlagText] RegularExpressionLiteral : / RegularExpressionBody / RegularExpressionFlags",
  "sec-static-semantics-containsundefinedcontinuetarget|StatementListItem|Declaration" : "[ContainsUndefinedContinueTarget] StatementListItem : Declaration",
  "sec-static-semantics-isfunctiondefinition|ClassExpression|class|BindingIdentifier|ClassTail" : "[IsFunctionDefinition] ClassExpression : class BindingIdentifier ClassTail",
  "sec-static-semantics-assignmenttargettype|UpdateExpression|LeftHandSideExpression|++" : "[AssignmentTargetType] UpdateExpression : LeftHandSideExpression ++",
  "sec-static-semantics-varscopeddeclarations|CaseBlock|{|DefaultClause|CaseClauses|}" : "[VarScopedDeclarations] CaseBlock : { DefaultClause CaseClauses }",
  "sec-static-semantics-containsduplicatelabels|ForInOfStatement|for|await|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[ContainsDuplicateLabels] ForInOfStatement : for await ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-math.sign" : "Math.sign",
  "sec-array-initializer-runtime-semantics-evaluation|ArrayLiteral|[|ElementList|]" : "[Evaluation] ArrayLiteral : [ ElementList ]",
  "sec-isunresolvablereference" : "IsUnresolvableReference",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|Expression|;|Expression|;|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( Expression ; Expression ; ) Statement",
  "sec-numeric-types-number-unaryMinus" : "Number::unaryMinus",
  "sec-runtime-semantics-iteratorbindinginitialization|SingleNameBinding|BindingIdentifier" : "[IteratorBindingInitialization] SingleNameBinding : BindingIdentifier",
  "sec-static-semantics-boundnames|FormalParameterList|FormalParameterList|,|FormalParameter" : "[BoundNames] FormalParameterList : FormalParameterList , FormalParameter",
  "sec-exports-runtime-semantics-evaluation|ExportDeclaration|export|default|ClassDeclaration" : "[Evaluation] ExportDeclaration : export default ClassDeclaration",
  "sec-identifiers-runtime-semantics-evaluation|IdentifierReference|Identifier" : "[Evaluation] IdentifierReference : Identifier",
  "sec-set.prototype.clear" : "Set.prototype.clear",
  "sec-isvalidregularexpressionliteral" : "IsValidRegularExpressionLiteral",
  "sec-static-semantics-hasname|AsyncGeneratorExpression|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[HasName] AsyncGeneratorExpression : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-compiletocharset|ClassSubtraction|ClassSetOperand|--|ClassSetOperand" : "[CompileToCharSet] ClassSubtraction : ClassSetOperand -- ClassSetOperand",
  "sec-object-initializer-runtime-semantics-evaluation|ObjectLiteral|{|}" : "[Evaluation] ObjectLiteral : { }",
  "sec-arguments-exotic-objects-defineownproperty-p-desc" : "[[DefineOwnProperty]]",
  "sec-static-semantics-containsundefinedcontinuetarget|IfStatement|if|(|Expression|)|Statement|else|Statement" : "[ContainsUndefinedContinueTarget] IfStatement : if ( Expression ) Statement else Statement",
  "sec-static-semantics-vardeclarednames|Script" : "[VarDeclaredNames] Script :",
  "sec-objectdefineproperties" : "ObjectDefineProperties",
  "sec-atomics.load" : "Atomics.load",
  "sec-static-semantics-containsundefinedcontinuetarget|WhileStatement|while|(|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] WhileStatement : while ( Expression ) Statement",
  "sec-getv" : "GetV",
  "sec-runtime-semantics-iteratordestructuringassignmentevaluation|AssignmentElisionElement|Elision|AssignmentElement" : "[IteratorDestructuringAssignmentEvaluation] AssignmentElisionElement : Elision AssignmentElement",
  "sec-runtime-semantics-stringnumericvalue|StrUnsignedDecimalLiteral|DecimalDigits" : "[StringNumericValue] StrUnsignedDecimalLiteral : DecimalDigits",
  "sec-getthisvalue" : "GetThisValue",
  "sec-blockdeclarationinstantiation" : "BlockDeclarationInstantiation",
  "sec-static-semantics-containsarguments|MethodDefinition|set|ClassElementName|(|PropertySetParameterList|)|{|FunctionBody|}" : "[ContainsArguments] MethodDefinition : set ClassElementName ( PropertySetParameterList ) { FunctionBody }",
  "sec-regexpidentifiercodepoint|RegExpIdentifierStart|UnicodeLeadSurrogate|UnicodeTrailSurrogate" : "[RegExpIdentifierCodePoint] RegExpIdentifierStart : UnicodeLeadSurrogate UnicodeTrailSurrogate",
  "sec-islessthan" : "IsLessThan",
  "sec-static-semantics-assignmenttargettype|AssignmentExpression|LeftHandSideExpression|??=|AssignmentExpression" : "[AssignmentTargetType] AssignmentExpression : LeftHandSideExpression ??= AssignmentExpression",
  "sec-static-semantics-toplevelvardeclarednames|StatementListItem|Statement" : "[TopLevelVarDeclaredNames] StatementListItem : Statement",
  "sec-static-semantics-declarationpart|HoistableDeclaration|GeneratorDeclaration" : "[DeclarationPart] HoistableDeclaration : GeneratorDeclaration",
  "sec-static-semantics-boundnames|ArrowParameters|CoverParenthesizedExpressionAndArrowParameterList" : "[BoundNames] ArrowParameters : CoverParenthesizedExpressionAndArrowParameterList",
  "sec-static-semantics-contains|ToDo" : "Contains",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|var|VariableDeclarationList|;|Expression|;|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( var VariableDeclarationList ; Expression ; ) Statement",
  "sec-compileassertion|Assertion|$" : "[CompileAssertion] Assertion : $",
  "sec-string.prototype.repeat" : "String.prototype.repeat",
  "sec-static-semantics-assignmenttargettype|IdentifierReference|await" : "[AssignmentTargetType] IdentifierReference : await",
  "sec-static-semantics-varscopeddeclarations|Statement|EmptyStatement" : "[VarScopedDeclarations] Statement : EmptyStatement",
  "sec-static-semantics-containsundefinedbreaktarget|IfStatement|if|(|Expression|)|Statement|else|Statement" : "[ContainsUndefinedBreakTarget] IfStatement : if ( Expression ) Statement else Statement",
  "sec-runtime-semantics-instantiatefunctionobject|AsyncFunctionDeclaration|async|function|(|FormalParameters|)|{|AsyncFunctionBody|}" : "[InstantiateFunctionObject] AsyncFunctionDeclaration : async function ( FormalParameters ) { AsyncFunctionBody }",
  "sec-runtime-semantics-argumentlistevaluation|ArgumentList|...|AssignmentExpression" : "[ArgumentListEvaluation] ArgumentList : ... AssignmentExpression",
  "sec-boolean.prototype.tostring" : "Boolean.prototype.toString",
  "sec-promise.withResolvers" : "Promise.withResolvers",
  "sec-static-semantics-containsarguments|ToDo" : "ContainsArguments",
  "sec-istypedarrayoutofbounds" : "IsTypedArrayOutOfBounds",
  "sec-error.prototype.tostring" : "Error.prototype.toString",
  "sec-static-semantics-lexicallydeclarednames|ClassStaticBlockStatementList|StatementList" : "[LexicallyDeclaredNames] ClassStaticBlockStatementList : StatementList",
  "sec-static-semantics-hascallintailposition|CallExpression|CallExpression|[|Expression|]" : "[HasCallInTailPosition] CallExpression : CallExpression [ Expression ]",
  "sec-static-semantics-vardeclarednames|CaseBlock|{|CaseClauses|DefaultClause|}" : "[VarDeclaredNames] CaseBlock : { CaseClauses DefaultClause }",
  "sec-static-semantics-vardeclarednames|ForStatement|for|(|Expression|;|Expression|;|)|Statement" : "[VarDeclaredNames] ForStatement : for ( Expression ; Expression ; ) Statement",
  "sec-asyncgeneratoryield" : "AsyncGeneratorYield",
  "sec-exp-operator-runtime-semantics-evaluation|ExponentiationExpression|UpdateExpression|**|ExponentiationExpression" : "[Evaluation] ExponentiationExpression : UpdateExpression ** ExponentiationExpression",
  "sec-InnerModuleLoading" : "InnerModuleLoading",
  "sec-get-%typedarray%.prototype.length" : "get TypedArray.prototype.length",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|LexicalDeclaration|Expression|;|Expression|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( LexicalDeclaration Expression ; Expression ) Statement",
  "sec-runtime-semantics-instantiatefunctionobject|AsyncGeneratorDeclaration|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[InstantiateFunctionObject] AsyncGeneratorDeclaration : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-exports-runtime-semantics-evaluation|ExportDeclaration|export|default|AssignmentExpression|;" : "[Evaluation] ExportDeclaration : export default AssignmentExpression ;",
  "sec-object-initializer-runtime-semantics-evaluation|ObjectLiteral|{|PropertyDefinitionList|,|}" : "[Evaluation] ObjectLiteral : { PropertyDefinitionList , }",
  "sec-makefullyear" : "MakeFullYear",
  "sec-static-semantics-varscopeddeclarations|ForInOfStatement|for|(|LeftHandSideExpression|of|AssignmentExpression|)|Statement" : "[VarScopedDeclarations] ForInOfStatement : for ( LeftHandSideExpression of AssignmentExpression ) Statement",
  "sec-dataview.prototype.getint16" : "DataView.prototype.getInt16",
  "sec-generatorfunction" : "GeneratorFunction",
  "sec-symbol-description" : "Symbol",
  "sec-static-semantics-hascallintailposition|ForStatement|for|(|LexicalDeclaration|;|)|Statement" : "[HasCallInTailPosition] ForStatement : for ( LexicalDeclaration ; ) Statement",
  "sec-static-semantics-assignmenttargettype|AssignmentExpression|ArrowFunction" : "[AssignmentTargetType] AssignmentExpression : ArrowFunction",
  "sec-static-semantics-lexicallydeclarednames|LabelledItem|Statement" : "[LexicallyDeclaredNames] LabelledItem : Statement",
  "sec-arraybuffercopyanddetach" : "ArrayBufferCopyAndDetach",
  "sec-privateget" : "PrivateGet",
  "sec-evaluate-property-access-with-identifier-key" : "EvaluatePropertyAccessWithIdentifierKey",
  "sec-string.fromcodepoint" : "String.fromCodePoint",
  "sec-static-semantics-varscopeddeclarations|ForStatement|for|(|Expression|;|;|Expression|)|Statement" : "[VarScopedDeclarations] ForStatement : for ( Expression ; ; Expression ) Statement",
  "sec-topropertykey" : "ToPropertyKey",
  "sec-static-semantics-assignmenttargettype|MemberExpression|MemberExpression|[|Expression|]" : "[AssignmentTargetType] MemberExpression : MemberExpression [ Expression ]",
  "sec-static-semantics-contains|AsyncGeneratorExpression|async|function|*|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[Contains] AsyncGeneratorExpression : async function * ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-math.expm1" : "Math.expm1",
  "sec-static-semantics-containsarguments|AsyncGeneratorDeclaration|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[ContainsArguments] AsyncGeneratorDeclaration : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-static-semantics-exportednames|ExportSpecifier|ModuleExportName" : "[ExportedNames] ExportSpecifier : ModuleExportName",
  "sec-static-semantics-containsundefinedcontinuetarget|IfStatement|if|(|Expression|)|Statement" : "[ContainsUndefinedContinueTarget] IfStatement : if ( Expression ) Statement",
  "sec-runtime-semantics-instantiateordinaryfunctionexpression|FunctionExpression|function|(|FormalParameters|)|{|FunctionBody|}" : "[InstantiateOrdinaryFunctionExpression] FunctionExpression : function ( FormalParameters ) { FunctionBody }",
  "sec-trimstring" : "TrimString",
  "sec-static-semantics-containsundefinedbreaktarget|ForStatement|for|(|var|VariableDeclarationList|;|;|)|Statement" : "[ContainsUndefinedBreakTarget] ForStatement : for ( var VariableDeclarationList ; ; ) Statement",
  "sec-numeric-types-number-bitwiseNOT" : "Number::bitwiseNOT",
  "sec-static-semantics-exportednames|NamedExports|{|}" : "[ExportedNames] NamedExports : { }",
  "sec-runtime-semantics-classfielddefinitionevaluation|FieldDefinition|ClassElementName|Initializer" : "[ClassFieldDefinitionEvaluation] FieldDefinition : ClassElementName Initializer",
  "sec-array.prototype.splice" : "Array.prototype.splice",
  "sec-runtime-semantics-forinofloopevaluation|ForInOfStatement|for|await|(|var|ForBinding|of|AssignmentExpression|)|Statement" : "[ForInOfLoopEvaluation] ForInOfStatement : for await ( var ForBinding of AssignmentExpression ) Statement",
  "sec-static-semantics-hascallintailposition|OptionalChain|?.|[|Expression|]" : "[HasCallInTailPosition] OptionalChain : ?. [ Expression ]",
  "sec-static-semantics-containsexpression|SingleNameBinding|BindingIdentifier" : "[ContainsExpression] SingleNameBinding : BindingIdentifier",
  "sec-static-semantics-assignmenttargettype|MemberExpression|MemberExpression|TemplateLiteral" : "[AssignmentTargetType] MemberExpression : MemberExpression TemplateLiteral",
  "sec-arguments-exotic-objects-delete-p" : "[[Delete]]",
  "sec-runtime-semantics-stringnumericvalue|StringNumericLiteral|StrWhiteSpace" : "[StringNumericValue] StringNumericLiteral : StrWhiteSpace",
  "sec-number.prototype.toexponential" : "Number.prototype.toExponential",
  "sec-set-object.prototype.__proto__" : "set Object.prototype.__proto__",
  "sec-isviewoutofbounds" : "IsViewOutOfBounds",
  "sec-module-environment-records-hasthisbinding" : "HasThisBinding",
  "sec-static-semantics-varscopeddeclarations|CaseClause|case|Expression|:|StatementList" : "[VarScopedDeclarations] CaseClause : case Expression : StatementList",
  "sec-static-semantics-varscopeddeclarations|Statement|DebuggerStatement" : "[VarScopedDeclarations] Statement : DebuggerStatement",
  "sec-makesuperpropertyreference" : "MakeSuperPropertyReference",
  "sec-dataview.prototype.getint32" : "DataView.prototype.getInt32",
  "sec-static-semantics-containsduplicatelabels|ForStatement|for|(|LexicalDeclaration|Expression|;|)|Statement" : "[ContainsDuplicateLabels] ForStatement : for ( LexicalDeclaration Expression ; ) Statement",
  "sec-hasproperty" : "HasProperty",
  "sec-performpromiseallsettled" : "PerformPromiseAllSettled",
  "sec-compiletocharset|ClassStringDisjunction|\\q{|ClassStringDisjunctionContents|}" : "[CompileToCharSet] ClassStringDisjunction : \\q{ ClassStringDisjunctionContents }",
  "sec-static-semantics-assignmenttargettype|MultiplicativeExpression|MultiplicativeExpression|MultiplicativeOperator|ExponentiationExpression" : "[AssignmentTargetType] MultiplicativeExpression : MultiplicativeExpression MultiplicativeOperator ExponentiationExpression",
  "sec-getsuperconstructor" : "GetSuperConstructor",
  "sec-static-semantics-varscopeddeclarations|ConciseBody|ExpressionBody" : "[VarScopedDeclarations] ConciseBody : ExpressionBody",
  "sec-object-initializer-runtime-semantics-evaluation|ComputedPropertyName|[|AssignmentExpression|]" : "[Evaluation] ComputedPropertyName : [ AssignmentExpression ]",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|var|VariableDeclarationList|;|;|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( var VariableDeclarationList ; ; ) Statement",
  "sec-tagged-templates-runtime-semantics-evaluation|MemberExpression|MemberExpression|TemplateLiteral" : "[Evaluation] MemberExpression : MemberExpression TemplateLiteral",
  "sec-patterns-static-semantics-character-value|CharacterEscape|0" : "[CharacterValue] CharacterEscape : 0",
  "sec-runtime-semantics-forloopevaluation|ForStatement|for|(|var|VariableDeclarationList|;|;|Expression|)|Statement" : "[ForLoopEvaluation] ForStatement : for ( var VariableDeclarationList ; ; Expression ) Statement",
  "sec-static-semantics-expectedargumentcount|FormalParameters" : "[ExpectedArgumentCount] FormalParameters :",
  "sec-static-semantics-toplevelvarscopeddeclarations|LabelledStatement|LabelIdentifier|:|LabelledItem" : "[TopLevelVarScopedDeclarations] LabelledStatement : LabelIdentifier : LabelledItem",
  "sec-runtime-semantics-iteratorbindinginitialization|BindingElisionElement|Elision|BindingElement" : "[IteratorBindingInitialization] BindingElisionElement : Elision BindingElement",
  "sec-static-semantics-assignmenttargettype|UpdateExpression|LeftHandSideExpression|--" : "[AssignmentTargetType] UpdateExpression : LeftHandSideExpression --",
  "sec-countleftcapturingparenswithin" : "CountLeftCapturingParensWithin",
  "sec-static-semantics-assignmenttargettype|UnaryExpression|+|UnaryExpression" : "[AssignmentTargetType] UnaryExpression : + UnaryExpression",
  "sec-runtime-semantics-caseclauseisselected" : "CaseClauseIsSelected",
  "sec-math.floor" : "Math.floor",
  "sec-createforiniterator" : "CreateForInIterator",
  "sec-yearfromtime" : "YearFromTime",
  "sec-moduledeclarationlinking" : "Link",
  "sec-static-semantics-isconstantdeclaration|AsyncGeneratorDeclaration|async|function|*|BindingIdentifier|(|FormalParameters|)|{|AsyncGeneratorBody|}" : "[IsConstantDeclaration] AsyncGeneratorDeclaration : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }",
  "sec-numeric-types-number-add" : "Number::add",
  "sec-static-semantics-containsundefinedcontinuetarget|ForStatement|for|(|LexicalDeclaration|;|)|Statement" : "[ContainsUndefinedContinueTarget] ForStatement : for ( LexicalDeclaration ; ) Statement",
  "sec-parsemodule" : "ParseModule",
  "sec-static-semantics-hasname|ArrowFunction|ArrowParameters|=>|ConciseBody" : "[HasName] ArrowFunction : ArrowParameters => ConciseBody",
  "sec-runtime-semantics-iteratorbindinginitialization|ArrayBindingPattern|[|BindingElementList|,|Elision|BindingRestElement|]" : "[IteratorBindingInitialization] ArrayBindingPattern : [ BindingElementList , Elision BindingRestElement ]",
  "sec-static-semantics-vardeclarednames|ModuleItem|ImportDeclaration" : "[VarDeclaredNames] ModuleItem : ImportDeclaration"
}